/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/sax/lib/sax.js
var require_sax = __commonJS({
  "node_modules/sax/lib/sax.js"(exports) {
    (function(sax) {
      sax.parser = function(strict, opt) {
        return new SAXParser(strict, opt);
      };
      sax.SAXParser = SAXParser;
      sax.SAXStream = SAXStream;
      sax.createStream = createStream;
      sax.MAX_BUFFER_LENGTH = 64 * 1024;
      var buffers = [
        "comment",
        "sgmlDecl",
        "textNode",
        "tagName",
        "doctype",
        "procInstName",
        "procInstBody",
        "entity",
        "attribName",
        "attribValue",
        "cdata",
        "script"
      ];
      sax.EVENTS = [
        "text",
        "processinginstruction",
        "sgmldeclaration",
        "doctype",
        "comment",
        "opentagstart",
        "attribute",
        "opentag",
        "closetag",
        "opencdata",
        "cdata",
        "closecdata",
        "error",
        "end",
        "ready",
        "script",
        "opennamespace",
        "closenamespace"
      ];
      function SAXParser(strict, opt) {
        if (!(this instanceof SAXParser)) {
          return new SAXParser(strict, opt);
        }
        var parser = this;
        clearBuffers(parser);
        parser.q = parser.c = "";
        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
        parser.opt = opt || {};
        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
        parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
        parser.tags = [];
        parser.closed = parser.closedRoot = parser.sawRoot = false;
        parser.tag = parser.error = null;
        parser.strict = !!strict;
        parser.noscript = !!(strict || parser.opt.noscript);
        parser.state = S.BEGIN;
        parser.strictEntities = parser.opt.strictEntities;
        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
        parser.attribList = [];
        if (parser.opt.xmlns) {
          parser.ns = Object.create(rootNS);
        }
        parser.trackPosition = parser.opt.position !== false;
        if (parser.trackPosition) {
          parser.position = parser.line = parser.column = 0;
        }
        emit(parser, "onready");
      }
      if (!Object.create) {
        Object.create = function(o) {
          function F() {
          }
          F.prototype = o;
          var newf = new F();
          return newf;
        };
      }
      if (!Object.keys) {
        Object.keys = function(o) {
          var a = [];
          for (var i in o)
            if (o.hasOwnProperty(i))
              a.push(i);
          return a;
        };
      }
      function checkBufferLength(parser) {
        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
        var maxActual = 0;
        for (var i = 0, l = buffers.length; i < l; i++) {
          var len = parser[buffers[i]].length;
          if (len > maxAllowed) {
            switch (buffers[i]) {
              case "textNode":
                closeText(parser);
                break;
              case "cdata":
                emitNode(parser, "oncdata", parser.cdata);
                parser.cdata = "";
                break;
              case "script":
                emitNode(parser, "onscript", parser.script);
                parser.script = "";
                break;
              default:
                error(parser, "Max buffer length exceeded: " + buffers[i]);
            }
          }
          maxActual = Math.max(maxActual, len);
        }
        var m = sax.MAX_BUFFER_LENGTH - maxActual;
        parser.bufferCheckPosition = m + parser.position;
      }
      function clearBuffers(parser) {
        for (var i = 0, l = buffers.length; i < l; i++) {
          parser[buffers[i]] = "";
        }
      }
      function flushBuffers(parser) {
        closeText(parser);
        if (parser.cdata !== "") {
          emitNode(parser, "oncdata", parser.cdata);
          parser.cdata = "";
        }
        if (parser.script !== "") {
          emitNode(parser, "onscript", parser.script);
          parser.script = "";
        }
      }
      SAXParser.prototype = {
        end: function() {
          end(this);
        },
        write,
        resume: function() {
          this.error = null;
          return this;
        },
        close: function() {
          return this.write(null);
        },
        flush: function() {
          flushBuffers(this);
        }
      };
      var Stream2;
      try {
        Stream2 = require("stream").Stream;
      } catch (ex) {
        Stream2 = function() {
        };
      }
      var streamWraps = sax.EVENTS.filter(function(ev) {
        return ev !== "error" && ev !== "end";
      });
      function createStream(strict, opt) {
        return new SAXStream(strict, opt);
      }
      function SAXStream(strict, opt) {
        if (!(this instanceof SAXStream)) {
          return new SAXStream(strict, opt);
        }
        Stream2.apply(this);
        this._parser = new SAXParser(strict, opt);
        this.writable = true;
        this.readable = true;
        var me = this;
        this._parser.onend = function() {
          me.emit("end");
        };
        this._parser.onerror = function(er) {
          me.emit("error", er);
          me._parser.error = null;
        };
        this._decoder = null;
        streamWraps.forEach(function(ev) {
          Object.defineProperty(me, "on" + ev, {
            get: function() {
              return me._parser["on" + ev];
            },
            set: function(h) {
              if (!h) {
                me.removeAllListeners(ev);
                me._parser["on" + ev] = h;
                return h;
              }
              me.on(ev, h);
            },
            enumerable: true,
            configurable: false
          });
        });
      }
      SAXStream.prototype = Object.create(Stream2.prototype, {
        constructor: {
          value: SAXStream
        }
      });
      SAXStream.prototype.write = function(data) {
        if (typeof Buffer === "function" && typeof Buffer.isBuffer === "function" && Buffer.isBuffer(data)) {
          if (!this._decoder) {
            var SD = require("string_decoder").StringDecoder;
            this._decoder = new SD("utf8");
          }
          data = this._decoder.write(data);
        }
        this._parser.write(data.toString());
        this.emit("data", data);
        return true;
      };
      SAXStream.prototype.end = function(chunk) {
        if (chunk && chunk.length) {
          this.write(chunk);
        }
        this._parser.end();
        return true;
      };
      SAXStream.prototype.on = function(ev, handler) {
        var me = this;
        if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
          me._parser["on" + ev] = function() {
            var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
            args.splice(0, 0, ev);
            me.emit.apply(me, args);
          };
        }
        return Stream2.prototype.on.call(me, ev, handler);
      };
      var CDATA = "[CDATA[";
      var DOCTYPE = "DOCTYPE";
      var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
      var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
      var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };
      var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      function isWhitespace(c) {
        return c === " " || c === "\n" || c === "\r" || c === "	";
      }
      function isQuote(c) {
        return c === '"' || c === "'";
      }
      function isAttribEnd(c) {
        return c === ">" || isWhitespace(c);
      }
      function isMatch(regex2, c) {
        return regex2.test(c);
      }
      function notMatch(regex2, c) {
        return !isMatch(regex2, c);
      }
      var S = 0;
      sax.STATE = {
        BEGIN: S++,
        // leading byte order mark or whitespace
        BEGIN_WHITESPACE: S++,
        // leading whitespace
        TEXT: S++,
        // general stuff
        TEXT_ENTITY: S++,
        // &amp and such.
        OPEN_WAKA: S++,
        // <
        SGML_DECL: S++,
        // <!BLARG
        SGML_DECL_QUOTED: S++,
        // <!BLARG foo "bar
        DOCTYPE: S++,
        // <!DOCTYPE
        DOCTYPE_QUOTED: S++,
        // <!DOCTYPE "//blah
        DOCTYPE_DTD: S++,
        // <!DOCTYPE "//blah" [ ...
        DOCTYPE_DTD_QUOTED: S++,
        // <!DOCTYPE "//blah" [ "foo
        COMMENT_STARTING: S++,
        // <!-
        COMMENT: S++,
        // <!--
        COMMENT_ENDING: S++,
        // <!-- blah -
        COMMENT_ENDED: S++,
        // <!-- blah --
        CDATA: S++,
        // <![CDATA[ something
        CDATA_ENDING: S++,
        // ]
        CDATA_ENDING_2: S++,
        // ]]
        PROC_INST: S++,
        // <?hi
        PROC_INST_BODY: S++,
        // <?hi there
        PROC_INST_ENDING: S++,
        // <?hi "there" ?
        OPEN_TAG: S++,
        // <strong
        OPEN_TAG_SLASH: S++,
        // <strong /
        ATTRIB: S++,
        // <a
        ATTRIB_NAME: S++,
        // <a foo
        ATTRIB_NAME_SAW_WHITE: S++,
        // <a foo _
        ATTRIB_VALUE: S++,
        // <a foo=
        ATTRIB_VALUE_QUOTED: S++,
        // <a foo="bar
        ATTRIB_VALUE_CLOSED: S++,
        // <a foo="bar"
        ATTRIB_VALUE_UNQUOTED: S++,
        // <a foo=bar
        ATTRIB_VALUE_ENTITY_Q: S++,
        // <foo bar="&quot;"
        ATTRIB_VALUE_ENTITY_U: S++,
        // <foo bar=&quot
        CLOSE_TAG: S++,
        // </a
        CLOSE_TAG_SAW_WHITE: S++,
        // </a   >
        SCRIPT: S++,
        // <script> ...
        SCRIPT_ENDING: S++
        // <script> ... <
      };
      sax.XML_ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'"
      };
      sax.ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'",
        "AElig": 198,
        "Aacute": 193,
        "Acirc": 194,
        "Agrave": 192,
        "Aring": 197,
        "Atilde": 195,
        "Auml": 196,
        "Ccedil": 199,
        "ETH": 208,
        "Eacute": 201,
        "Ecirc": 202,
        "Egrave": 200,
        "Euml": 203,
        "Iacute": 205,
        "Icirc": 206,
        "Igrave": 204,
        "Iuml": 207,
        "Ntilde": 209,
        "Oacute": 211,
        "Ocirc": 212,
        "Ograve": 210,
        "Oslash": 216,
        "Otilde": 213,
        "Ouml": 214,
        "THORN": 222,
        "Uacute": 218,
        "Ucirc": 219,
        "Ugrave": 217,
        "Uuml": 220,
        "Yacute": 221,
        "aacute": 225,
        "acirc": 226,
        "aelig": 230,
        "agrave": 224,
        "aring": 229,
        "atilde": 227,
        "auml": 228,
        "ccedil": 231,
        "eacute": 233,
        "ecirc": 234,
        "egrave": 232,
        "eth": 240,
        "euml": 235,
        "iacute": 237,
        "icirc": 238,
        "igrave": 236,
        "iuml": 239,
        "ntilde": 241,
        "oacute": 243,
        "ocirc": 244,
        "ograve": 242,
        "oslash": 248,
        "otilde": 245,
        "ouml": 246,
        "szlig": 223,
        "thorn": 254,
        "uacute": 250,
        "ucirc": 251,
        "ugrave": 249,
        "uuml": 252,
        "yacute": 253,
        "yuml": 255,
        "copy": 169,
        "reg": 174,
        "nbsp": 160,
        "iexcl": 161,
        "cent": 162,
        "pound": 163,
        "curren": 164,
        "yen": 165,
        "brvbar": 166,
        "sect": 167,
        "uml": 168,
        "ordf": 170,
        "laquo": 171,
        "not": 172,
        "shy": 173,
        "macr": 175,
        "deg": 176,
        "plusmn": 177,
        "sup1": 185,
        "sup2": 178,
        "sup3": 179,
        "acute": 180,
        "micro": 181,
        "para": 182,
        "middot": 183,
        "cedil": 184,
        "ordm": 186,
        "raquo": 187,
        "frac14": 188,
        "frac12": 189,
        "frac34": 190,
        "iquest": 191,
        "times": 215,
        "divide": 247,
        "OElig": 338,
        "oelig": 339,
        "Scaron": 352,
        "scaron": 353,
        "Yuml": 376,
        "fnof": 402,
        "circ": 710,
        "tilde": 732,
        "Alpha": 913,
        "Beta": 914,
        "Gamma": 915,
        "Delta": 916,
        "Epsilon": 917,
        "Zeta": 918,
        "Eta": 919,
        "Theta": 920,
        "Iota": 921,
        "Kappa": 922,
        "Lambda": 923,
        "Mu": 924,
        "Nu": 925,
        "Xi": 926,
        "Omicron": 927,
        "Pi": 928,
        "Rho": 929,
        "Sigma": 931,
        "Tau": 932,
        "Upsilon": 933,
        "Phi": 934,
        "Chi": 935,
        "Psi": 936,
        "Omega": 937,
        "alpha": 945,
        "beta": 946,
        "gamma": 947,
        "delta": 948,
        "epsilon": 949,
        "zeta": 950,
        "eta": 951,
        "theta": 952,
        "iota": 953,
        "kappa": 954,
        "lambda": 955,
        "mu": 956,
        "nu": 957,
        "xi": 958,
        "omicron": 959,
        "pi": 960,
        "rho": 961,
        "sigmaf": 962,
        "sigma": 963,
        "tau": 964,
        "upsilon": 965,
        "phi": 966,
        "chi": 967,
        "psi": 968,
        "omega": 969,
        "thetasym": 977,
        "upsih": 978,
        "piv": 982,
        "ensp": 8194,
        "emsp": 8195,
        "thinsp": 8201,
        "zwnj": 8204,
        "zwj": 8205,
        "lrm": 8206,
        "rlm": 8207,
        "ndash": 8211,
        "mdash": 8212,
        "lsquo": 8216,
        "rsquo": 8217,
        "sbquo": 8218,
        "ldquo": 8220,
        "rdquo": 8221,
        "bdquo": 8222,
        "dagger": 8224,
        "Dagger": 8225,
        "bull": 8226,
        "hellip": 8230,
        "permil": 8240,
        "prime": 8242,
        "Prime": 8243,
        "lsaquo": 8249,
        "rsaquo": 8250,
        "oline": 8254,
        "frasl": 8260,
        "euro": 8364,
        "image": 8465,
        "weierp": 8472,
        "real": 8476,
        "trade": 8482,
        "alefsym": 8501,
        "larr": 8592,
        "uarr": 8593,
        "rarr": 8594,
        "darr": 8595,
        "harr": 8596,
        "crarr": 8629,
        "lArr": 8656,
        "uArr": 8657,
        "rArr": 8658,
        "dArr": 8659,
        "hArr": 8660,
        "forall": 8704,
        "part": 8706,
        "exist": 8707,
        "empty": 8709,
        "nabla": 8711,
        "isin": 8712,
        "notin": 8713,
        "ni": 8715,
        "prod": 8719,
        "sum": 8721,
        "minus": 8722,
        "lowast": 8727,
        "radic": 8730,
        "prop": 8733,
        "infin": 8734,
        "ang": 8736,
        "and": 8743,
        "or": 8744,
        "cap": 8745,
        "cup": 8746,
        "int": 8747,
        "there4": 8756,
        "sim": 8764,
        "cong": 8773,
        "asymp": 8776,
        "ne": 8800,
        "equiv": 8801,
        "le": 8804,
        "ge": 8805,
        "sub": 8834,
        "sup": 8835,
        "nsub": 8836,
        "sube": 8838,
        "supe": 8839,
        "oplus": 8853,
        "otimes": 8855,
        "perp": 8869,
        "sdot": 8901,
        "lceil": 8968,
        "rceil": 8969,
        "lfloor": 8970,
        "rfloor": 8971,
        "lang": 9001,
        "rang": 9002,
        "loz": 9674,
        "spades": 9824,
        "clubs": 9827,
        "hearts": 9829,
        "diams": 9830
      };
      Object.keys(sax.ENTITIES).forEach(function(key) {
        var e2 = sax.ENTITIES[key];
        var s2 = typeof e2 === "number" ? String.fromCharCode(e2) : e2;
        sax.ENTITIES[key] = s2;
      });
      for (var s in sax.STATE) {
        sax.STATE[sax.STATE[s]] = s;
      }
      S = sax.STATE;
      function emit(parser, event, data) {
        parser[event] && parser[event](data);
      }
      function emitNode(parser, nodeType, data) {
        if (parser.textNode)
          closeText(parser);
        emit(parser, nodeType, data);
      }
      function closeText(parser) {
        parser.textNode = textopts(parser.opt, parser.textNode);
        if (parser.textNode)
          emit(parser, "ontext", parser.textNode);
        parser.textNode = "";
      }
      function textopts(opt, text) {
        if (opt.trim)
          text = text.trim();
        if (opt.normalize)
          text = text.replace(/\s+/g, " ");
        return text;
      }
      function error(parser, er) {
        closeText(parser);
        if (parser.trackPosition) {
          er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
        }
        er = new Error(er);
        parser.error = er;
        emit(parser, "onerror", er);
        return parser;
      }
      function end(parser) {
        if (parser.sawRoot && !parser.closedRoot)
          strictFail(parser, "Unclosed root tag");
        if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
          error(parser, "Unexpected end");
        }
        closeText(parser);
        parser.c = "";
        parser.closed = true;
        emit(parser, "onend");
        SAXParser.call(parser, parser.strict, parser.opt);
        return parser;
      }
      function strictFail(parser, message) {
        if (typeof parser !== "object" || !(parser instanceof SAXParser)) {
          throw new Error("bad call to strictFail");
        }
        if (parser.strict) {
          error(parser, message);
        }
      }
      function newTag(parser) {
        if (!parser.strict)
          parser.tagName = parser.tagName[parser.looseCase]();
        var parent = parser.tags[parser.tags.length - 1] || parser;
        var tag = parser.tag = { name: parser.tagName, attributes: {} };
        if (parser.opt.xmlns) {
          tag.ns = parent.ns;
        }
        parser.attribList.length = 0;
        emitNode(parser, "onopentagstart", tag);
      }
      function qname(name, attribute) {
        var i = name.indexOf(":");
        var qualName = i < 0 ? ["", name] : name.split(":");
        var prefix = qualName[0];
        var local = qualName[1];
        if (attribute && name === "xmlns") {
          prefix = "xmlns";
          local = "";
        }
        return { prefix, local };
      }
      function attrib(parser) {
        if (!parser.strict) {
          parser.attribName = parser.attribName[parser.looseCase]();
        }
        if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
          parser.attribName = parser.attribValue = "";
          return;
        }
        if (parser.opt.xmlns) {
          var qn = qname(parser.attribName, true);
          var prefix = qn.prefix;
          var local = qn.local;
          if (prefix === "xmlns") {
            if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
              strictFail(
                parser,
                "xml: prefix must be bound to " + XML_NAMESPACE + "\nActual: " + parser.attribValue
              );
            } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
              strictFail(
                parser,
                "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\nActual: " + parser.attribValue
              );
            } else {
              var tag = parser.tag;
              var parent = parser.tags[parser.tags.length - 1] || parser;
              if (tag.ns === parent.ns) {
                tag.ns = Object.create(parent.ns);
              }
              tag.ns[local] = parser.attribValue;
            }
          }
          parser.attribList.push([parser.attribName, parser.attribValue]);
        } else {
          parser.tag.attributes[parser.attribName] = parser.attribValue;
          emitNode(parser, "onattribute", {
            name: parser.attribName,
            value: parser.attribValue
          });
        }
        parser.attribName = parser.attribValue = "";
      }
      function openTag(parser, selfClosing) {
        if (parser.opt.xmlns) {
          var tag = parser.tag;
          var qn = qname(parser.tagName);
          tag.prefix = qn.prefix;
          tag.local = qn.local;
          tag.uri = tag.ns[qn.prefix] || "";
          if (tag.prefix && !tag.uri) {
            strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
            tag.uri = qn.prefix;
          }
          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (tag.ns && parent.ns !== tag.ns) {
            Object.keys(tag.ns).forEach(function(p) {
              emitNode(parser, "onopennamespace", {
                prefix: p,
                uri: tag.ns[p]
              });
            });
          }
          for (var i = 0, l = parser.attribList.length; i < l; i++) {
            var nv = parser.attribList[i];
            var name = nv[0];
            var value = nv[1];
            var qualName = qname(name, true);
            var prefix = qualName.prefix;
            var local = qualName.local;
            var uri = prefix === "" ? "" : tag.ns[prefix] || "";
            var a = {
              name,
              value,
              prefix,
              local,
              uri
            };
            if (prefix && prefix !== "xmlns" && !uri) {
              strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
              a.uri = prefix;
            }
            parser.tag.attributes[name] = a;
            emitNode(parser, "onattribute", a);
          }
          parser.attribList.length = 0;
        }
        parser.tag.isSelfClosing = !!selfClosing;
        parser.sawRoot = true;
        parser.tags.push(parser.tag);
        emitNode(parser, "onopentag", parser.tag);
        if (!selfClosing) {
          if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
            parser.state = S.SCRIPT;
          } else {
            parser.state = S.TEXT;
          }
          parser.tag = null;
          parser.tagName = "";
        }
        parser.attribName = parser.attribValue = "";
        parser.attribList.length = 0;
      }
      function closeTag(parser) {
        if (!parser.tagName) {
          strictFail(parser, "Weird empty close tag.");
          parser.textNode += "</>";
          parser.state = S.TEXT;
          return;
        }
        if (parser.script) {
          if (parser.tagName !== "script") {
            parser.script += "</" + parser.tagName + ">";
            parser.tagName = "";
            parser.state = S.SCRIPT;
            return;
          }
          emitNode(parser, "onscript", parser.script);
          parser.script = "";
        }
        var t = parser.tags.length;
        var tagName = parser.tagName;
        if (!parser.strict) {
          tagName = tagName[parser.looseCase]();
        }
        var closeTo = tagName;
        while (t--) {
          var close = parser.tags[t];
          if (close.name !== closeTo) {
            strictFail(parser, "Unexpected close tag");
          } else {
            break;
          }
        }
        if (t < 0) {
          strictFail(parser, "Unmatched closing tag: " + parser.tagName);
          parser.textNode += "</" + parser.tagName + ">";
          parser.state = S.TEXT;
          return;
        }
        parser.tagName = tagName;
        var s2 = parser.tags.length;
        while (s2-- > t) {
          var tag = parser.tag = parser.tags.pop();
          parser.tagName = parser.tag.name;
          emitNode(parser, "onclosetag", parser.tagName);
          var x = {};
          for (var i in tag.ns) {
            x[i] = tag.ns[i];
          }
          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (parser.opt.xmlns && tag.ns !== parent.ns) {
            Object.keys(tag.ns).forEach(function(p) {
              var n = tag.ns[p];
              emitNode(parser, "onclosenamespace", { prefix: p, uri: n });
            });
          }
        }
        if (t === 0)
          parser.closedRoot = true;
        parser.tagName = parser.attribValue = parser.attribName = "";
        parser.attribList.length = 0;
        parser.state = S.TEXT;
      }
      function parseEntity(parser) {
        var entity = parser.entity;
        var entityLC = entity.toLowerCase();
        var num;
        var numStr = "";
        if (parser.ENTITIES[entity]) {
          return parser.ENTITIES[entity];
        }
        if (parser.ENTITIES[entityLC]) {
          return parser.ENTITIES[entityLC];
        }
        entity = entityLC;
        if (entity.charAt(0) === "#") {
          if (entity.charAt(1) === "x") {
            entity = entity.slice(2);
            num = parseInt(entity, 16);
            numStr = num.toString(16);
          } else {
            entity = entity.slice(1);
            num = parseInt(entity, 10);
            numStr = num.toString(10);
          }
        }
        entity = entity.replace(/^0+/, "");
        if (isNaN(num) || numStr.toLowerCase() !== entity) {
          strictFail(parser, "Invalid character entity");
          return "&" + parser.entity + ";";
        }
        return String.fromCodePoint(num);
      }
      function beginWhiteSpace(parser, c) {
        if (c === "<") {
          parser.state = S.OPEN_WAKA;
          parser.startTagPosition = parser.position;
        } else if (!isWhitespace(c)) {
          strictFail(parser, "Non-whitespace before first tag.");
          parser.textNode = c;
          parser.state = S.TEXT;
        }
      }
      function charAt(chunk, i) {
        var result = "";
        if (i < chunk.length) {
          result = chunk.charAt(i);
        }
        return result;
      }
      function write(chunk) {
        var parser = this;
        if (this.error) {
          throw this.error;
        }
        if (parser.closed) {
          return error(
            parser,
            "Cannot write after close. Assign an onready handler."
          );
        }
        if (chunk === null) {
          return end(parser);
        }
        if (typeof chunk === "object") {
          chunk = chunk.toString();
        }
        var i = 0;
        var c = "";
        while (true) {
          c = charAt(chunk, i++);
          parser.c = c;
          if (!c) {
            break;
          }
          if (parser.trackPosition) {
            parser.position++;
            if (c === "\n") {
              parser.line++;
              parser.column = 0;
            } else {
              parser.column++;
            }
          }
          switch (parser.state) {
            case S.BEGIN:
              parser.state = S.BEGIN_WHITESPACE;
              if (c === "\uFEFF") {
                continue;
              }
              beginWhiteSpace(parser, c);
              continue;
            case S.BEGIN_WHITESPACE:
              beginWhiteSpace(parser, c);
              continue;
            case S.TEXT:
              if (parser.sawRoot && !parser.closedRoot) {
                var starti = i - 1;
                while (c && c !== "<" && c !== "&") {
                  c = charAt(chunk, i++);
                  if (c && parser.trackPosition) {
                    parser.position++;
                    if (c === "\n") {
                      parser.line++;
                      parser.column = 0;
                    } else {
                      parser.column++;
                    }
                  }
                }
                parser.textNode += chunk.substring(starti, i - 1);
              }
              if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                parser.state = S.OPEN_WAKA;
                parser.startTagPosition = parser.position;
              } else {
                if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
                  strictFail(parser, "Text data outside of root node.");
                }
                if (c === "&") {
                  parser.state = S.TEXT_ENTITY;
                } else {
                  parser.textNode += c;
                }
              }
              continue;
            case S.SCRIPT:
              if (c === "<") {
                parser.state = S.SCRIPT_ENDING;
              } else {
                parser.script += c;
              }
              continue;
            case S.SCRIPT_ENDING:
              if (c === "/") {
                parser.state = S.CLOSE_TAG;
              } else {
                parser.script += "<" + c;
                parser.state = S.SCRIPT;
              }
              continue;
            case S.OPEN_WAKA:
              if (c === "!") {
                parser.state = S.SGML_DECL;
                parser.sgmlDecl = "";
              } else if (isWhitespace(c)) {
              } else if (isMatch(nameStart, c)) {
                parser.state = S.OPEN_TAG;
                parser.tagName = c;
              } else if (c === "/") {
                parser.state = S.CLOSE_TAG;
                parser.tagName = "";
              } else if (c === "?") {
                parser.state = S.PROC_INST;
                parser.procInstName = parser.procInstBody = "";
              } else {
                strictFail(parser, "Unencoded <");
                if (parser.startTagPosition + 1 < parser.position) {
                  var pad = parser.position - parser.startTagPosition;
                  c = new Array(pad).join(" ") + c;
                }
                parser.textNode += "<" + c;
                parser.state = S.TEXT;
              }
              continue;
            case S.SGML_DECL:
              if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                emitNode(parser, "onopencdata");
                parser.state = S.CDATA;
                parser.sgmlDecl = "";
                parser.cdata = "";
              } else if (parser.sgmlDecl + c === "--") {
                parser.state = S.COMMENT;
                parser.comment = "";
                parser.sgmlDecl = "";
              } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                parser.state = S.DOCTYPE;
                if (parser.doctype || parser.sawRoot) {
                  strictFail(
                    parser,
                    "Inappropriately located doctype declaration"
                  );
                }
                parser.doctype = "";
                parser.sgmlDecl = "";
              } else if (c === ">") {
                emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                parser.sgmlDecl = "";
                parser.state = S.TEXT;
              } else if (isQuote(c)) {
                parser.state = S.SGML_DECL_QUOTED;
                parser.sgmlDecl += c;
              } else {
                parser.sgmlDecl += c;
              }
              continue;
            case S.SGML_DECL_QUOTED:
              if (c === parser.q) {
                parser.state = S.SGML_DECL;
                parser.q = "";
              }
              parser.sgmlDecl += c;
              continue;
            case S.DOCTYPE:
              if (c === ">") {
                parser.state = S.TEXT;
                emitNode(parser, "ondoctype", parser.doctype);
                parser.doctype = true;
              } else {
                parser.doctype += c;
                if (c === "[") {
                  parser.state = S.DOCTYPE_DTD;
                } else if (isQuote(c)) {
                  parser.state = S.DOCTYPE_QUOTED;
                  parser.q = c;
                }
              }
              continue;
            case S.DOCTYPE_QUOTED:
              parser.doctype += c;
              if (c === parser.q) {
                parser.q = "";
                parser.state = S.DOCTYPE;
              }
              continue;
            case S.DOCTYPE_DTD:
              parser.doctype += c;
              if (c === "]") {
                parser.state = S.DOCTYPE;
              } else if (isQuote(c)) {
                parser.state = S.DOCTYPE_DTD_QUOTED;
                parser.q = c;
              }
              continue;
            case S.DOCTYPE_DTD_QUOTED:
              parser.doctype += c;
              if (c === parser.q) {
                parser.state = S.DOCTYPE_DTD;
                parser.q = "";
              }
              continue;
            case S.COMMENT:
              if (c === "-") {
                parser.state = S.COMMENT_ENDING;
              } else {
                parser.comment += c;
              }
              continue;
            case S.COMMENT_ENDING:
              if (c === "-") {
                parser.state = S.COMMENT_ENDED;
                parser.comment = textopts(parser.opt, parser.comment);
                if (parser.comment) {
                  emitNode(parser, "oncomment", parser.comment);
                }
                parser.comment = "";
              } else {
                parser.comment += "-" + c;
                parser.state = S.COMMENT;
              }
              continue;
            case S.COMMENT_ENDED:
              if (c !== ">") {
                strictFail(parser, "Malformed comment");
                parser.comment += "--" + c;
                parser.state = S.COMMENT;
              } else {
                parser.state = S.TEXT;
              }
              continue;
            case S.CDATA:
              if (c === "]") {
                parser.state = S.CDATA_ENDING;
              } else {
                parser.cdata += c;
              }
              continue;
            case S.CDATA_ENDING:
              if (c === "]") {
                parser.state = S.CDATA_ENDING_2;
              } else {
                parser.cdata += "]" + c;
                parser.state = S.CDATA;
              }
              continue;
            case S.CDATA_ENDING_2:
              if (c === ">") {
                if (parser.cdata) {
                  emitNode(parser, "oncdata", parser.cdata);
                }
                emitNode(parser, "onclosecdata");
                parser.cdata = "";
                parser.state = S.TEXT;
              } else if (c === "]") {
                parser.cdata += "]";
              } else {
                parser.cdata += "]]" + c;
                parser.state = S.CDATA;
              }
              continue;
            case S.PROC_INST:
              if (c === "?") {
                parser.state = S.PROC_INST_ENDING;
              } else if (isWhitespace(c)) {
                parser.state = S.PROC_INST_BODY;
              } else {
                parser.procInstName += c;
              }
              continue;
            case S.PROC_INST_BODY:
              if (!parser.procInstBody && isWhitespace(c)) {
                continue;
              } else if (c === "?") {
                parser.state = S.PROC_INST_ENDING;
              } else {
                parser.procInstBody += c;
              }
              continue;
            case S.PROC_INST_ENDING:
              if (c === ">") {
                emitNode(parser, "onprocessinginstruction", {
                  name: parser.procInstName,
                  body: parser.procInstBody
                });
                parser.procInstName = parser.procInstBody = "";
                parser.state = S.TEXT;
              } else {
                parser.procInstBody += "?" + c;
                parser.state = S.PROC_INST_BODY;
              }
              continue;
            case S.OPEN_TAG:
              if (isMatch(nameBody, c)) {
                parser.tagName += c;
              } else {
                newTag(parser);
                if (c === ">") {
                  openTag(parser);
                } else if (c === "/") {
                  parser.state = S.OPEN_TAG_SLASH;
                } else {
                  if (!isWhitespace(c)) {
                    strictFail(parser, "Invalid character in tag name");
                  }
                  parser.state = S.ATTRIB;
                }
              }
              continue;
            case S.OPEN_TAG_SLASH:
              if (c === ">") {
                openTag(parser, true);
                closeTag(parser);
              } else {
                strictFail(parser, "Forward-slash in opening tag not followed by >");
                parser.state = S.ATTRIB;
              }
              continue;
            case S.ATTRIB:
              if (isWhitespace(c)) {
                continue;
              } else if (c === ">") {
                openTag(parser);
              } else if (c === "/") {
                parser.state = S.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c)) {
                parser.attribName = c;
                parser.attribValue = "";
                parser.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_NAME:
              if (c === "=") {
                parser.state = S.ATTRIB_VALUE;
              } else if (c === ">") {
                strictFail(parser, "Attribute without value");
                parser.attribValue = parser.attribName;
                attrib(parser);
                openTag(parser);
              } else if (isWhitespace(c)) {
                parser.state = S.ATTRIB_NAME_SAW_WHITE;
              } else if (isMatch(nameBody, c)) {
                parser.attribName += c;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_NAME_SAW_WHITE:
              if (c === "=") {
                parser.state = S.ATTRIB_VALUE;
              } else if (isWhitespace(c)) {
                continue;
              } else {
                strictFail(parser, "Attribute without value");
                parser.tag.attributes[parser.attribName] = "";
                parser.attribValue = "";
                emitNode(parser, "onattribute", {
                  name: parser.attribName,
                  value: ""
                });
                parser.attribName = "";
                if (c === ">") {
                  openTag(parser);
                } else if (isMatch(nameStart, c)) {
                  parser.attribName = c;
                  parser.state = S.ATTRIB_NAME;
                } else {
                  strictFail(parser, "Invalid attribute name");
                  parser.state = S.ATTRIB;
                }
              }
              continue;
            case S.ATTRIB_VALUE:
              if (isWhitespace(c)) {
                continue;
              } else if (isQuote(c)) {
                parser.q = c;
                parser.state = S.ATTRIB_VALUE_QUOTED;
              } else {
                strictFail(parser, "Unquoted attribute value");
                parser.state = S.ATTRIB_VALUE_UNQUOTED;
                parser.attribValue = c;
              }
              continue;
            case S.ATTRIB_VALUE_QUOTED:
              if (c !== parser.q) {
                if (c === "&") {
                  parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                } else {
                  parser.attribValue += c;
                }
                continue;
              }
              attrib(parser);
              parser.q = "";
              parser.state = S.ATTRIB_VALUE_CLOSED;
              continue;
            case S.ATTRIB_VALUE_CLOSED:
              if (isWhitespace(c)) {
                parser.state = S.ATTRIB;
              } else if (c === ">") {
                openTag(parser);
              } else if (c === "/") {
                parser.state = S.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c)) {
                strictFail(parser, "No whitespace between attributes");
                parser.attribName = c;
                parser.attribValue = "";
                parser.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_VALUE_UNQUOTED:
              if (!isAttribEnd(c)) {
                if (c === "&") {
                  parser.state = S.ATTRIB_VALUE_ENTITY_U;
                } else {
                  parser.attribValue += c;
                }
                continue;
              }
              attrib(parser);
              if (c === ">") {
                openTag(parser);
              } else {
                parser.state = S.ATTRIB;
              }
              continue;
            case S.CLOSE_TAG:
              if (!parser.tagName) {
                if (isWhitespace(c)) {
                  continue;
                } else if (notMatch(nameStart, c)) {
                  if (parser.script) {
                    parser.script += "</" + c;
                    parser.state = S.SCRIPT;
                  } else {
                    strictFail(parser, "Invalid tagname in closing tag.");
                  }
                } else {
                  parser.tagName = c;
                }
              } else if (c === ">") {
                closeTag(parser);
              } else if (isMatch(nameBody, c)) {
                parser.tagName += c;
              } else if (parser.script) {
                parser.script += "</" + parser.tagName;
                parser.tagName = "";
                parser.state = S.SCRIPT;
              } else {
                if (!isWhitespace(c)) {
                  strictFail(parser, "Invalid tagname in closing tag");
                }
                parser.state = S.CLOSE_TAG_SAW_WHITE;
              }
              continue;
            case S.CLOSE_TAG_SAW_WHITE:
              if (isWhitespace(c)) {
                continue;
              }
              if (c === ">") {
                closeTag(parser);
              } else {
                strictFail(parser, "Invalid characters in closing tag");
              }
              continue;
            case S.TEXT_ENTITY:
            case S.ATTRIB_VALUE_ENTITY_Q:
            case S.ATTRIB_VALUE_ENTITY_U:
              var returnState;
              var buffer;
              switch (parser.state) {
                case S.TEXT_ENTITY:
                  returnState = S.TEXT;
                  buffer = "textNode";
                  break;
                case S.ATTRIB_VALUE_ENTITY_Q:
                  returnState = S.ATTRIB_VALUE_QUOTED;
                  buffer = "attribValue";
                  break;
                case S.ATTRIB_VALUE_ENTITY_U:
                  returnState = S.ATTRIB_VALUE_UNQUOTED;
                  buffer = "attribValue";
                  break;
              }
              if (c === ";") {
                parser[buffer] += parseEntity(parser);
                parser.entity = "";
                parser.state = returnState;
              } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
                parser.entity += c;
              } else {
                strictFail(parser, "Invalid character in entity name");
                parser[buffer] += "&" + parser.entity + c;
                parser.entity = "";
                parser.state = returnState;
              }
              continue;
            default:
              throw new Error(parser, "Unknown state: " + parser.state);
          }
        }
        if (parser.position >= parser.bufferCheckPosition) {
          checkBufferLength(parser);
        }
        return parser;
      }
      if (!String.fromCodePoint) {
        (function() {
          var stringFromCharCode = String.fromCharCode;
          var floor = Math.floor;
          var fromCodePoint = function() {
            var MAX_SIZE = 16384;
            var codeUnits = [];
            var highSurrogate;
            var lowSurrogate;
            var index = -1;
            var length = arguments.length;
            if (!length) {
              return "";
            }
            var result = "";
            while (++index < length) {
              var codePoint = Number(arguments[index]);
              if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
              codePoint < 0 || // not a valid Unicode code point
              codePoint > 1114111 || // not a valid Unicode code point
              floor(codePoint) !== codePoint) {
                throw RangeError("Invalid code point: " + codePoint);
              }
              if (codePoint <= 65535) {
                codeUnits.push(codePoint);
              } else {
                codePoint -= 65536;
                highSurrogate = (codePoint >> 10) + 55296;
                lowSurrogate = codePoint % 1024 + 56320;
                codeUnits.push(highSurrogate, lowSurrogate);
              }
              if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                result += stringFromCharCode.apply(null, codeUnits);
                codeUnits.length = 0;
              }
            }
            return result;
          };
          if (Object.defineProperty) {
            Object.defineProperty(String, "fromCodePoint", {
              value: fromCodePoint,
              configurable: true,
              writable: true
            });
          } else {
            String.fromCodePoint = fromCodePoint;
          }
        })();
      }
    })(typeof exports === "undefined" ? exports.sax = {} : exports);
  }
});

// node_modules/xml-flow/lib/helper.js
var require_helper = __commonJS({
  "node_modules/xml-flow/lib/helper.js"(exports, module2) {
    var reUnescapedHtml = /[&<>"]/g;
    var reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var htmlEscapes = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;"
    };
    var escape = (string) => {
      const result = String(string);
      return result && reHasUnescapedHtml.test(result) ? result.replace(reUnescapedHtml, (chr) => htmlEscapes[chr]) : result;
    };
    var isCongruent = (a, b) => typeof a === "string" && typeof b === "string" || a && a[0].$name === b.$name;
    var pushTogether = (a, b) => typeof a === "string" ? a + b : a.concat(b);
    var condenseArray = (items) => items.reduce(
      (result, element) => {
        const lastPosition = result.length - 1;
        const last = result[lastPosition];
        if (isCongruent(last, element))
          result[lastPosition] = pushTogether(last, element);
        else
          result.push(typeof element === "string" ? element : [element]);
        return result;
      },
      []
    );
    var disassembleNode = (node, dropName, unwrap) => {
      let $attrs = null;
      const stripped = {};
      Object.keys(node).forEach((key) => {
        const val = isSomething(node[key]) ? node[key] : null;
        if (!val)
          return;
        switch (key) {
          case "$name":
            if (!dropName && val)
              stripped.$name = val;
            break;
          case "$attrs":
            $attrs = val;
            break;
          case "$markup":
            stripped.$markup = simplifyAll(val);
            break;
          default:
            if (val)
              stripped[key] = unwrap(val);
        }
      });
      return { stripped, $attrs };
    };
    var unwrapSingleArrays = (x) => Array.isArray(x) && x.length === 1 ? x[0] : x;
    var tryMergingAttrs = ($attrs, stripped) => {
      if (!isSomething(stripped))
        return $attrs;
      if (!$attrs)
        return stripped;
      const keys = Object.keys(stripped);
      if (keys.length === 1 && stripped.$name)
        return Object.assign(stripped, $attrs);
      return Object.assign(stripped, { $attrs });
    };
    var tryGuttingNode = (node) => {
      if (!node)
        return void 0;
      const keys = Object.keys(node);
      const [firstKey] = keys;
      if (keys.length === 1 && firstKey !== "$name" && firstKey !== "id")
        return node[keys[0]];
      return node;
    };
    var simplifyNode = (node, dropName, keepArrays) => {
      const unwrap = keepArrays ? (x) => x : unwrapSingleArrays;
      const unwrapped = unwrap(node);
      if (!isSomething(unwrapped))
        return null;
      if (typeof unwrapped !== "object" || Array.isArray(unwrapped))
        return unwrapped;
      const { $attrs, stripped } = disassembleNode(unwrapped, dropName, unwrap);
      const merged = tryMergingAttrs($attrs, stripped);
      return tryGuttingNode(merged);
    };
    var shouldObjectifyMarkup = (items) => {
      let currentTag;
      const foundTags = {};
      let shouldObjectify = true;
      items.every((item) => {
        if (typeof item === "string") {
          currentTag = "$text";
        } else {
          currentTag = item[0].$name;
        }
        if (foundTags[currentTag]) {
          shouldObjectify = false;
          return false;
        }
        foundTags[currentTag] = true;
        return true;
      });
      return shouldObjectify;
    };
    var moosh = (a = [], b = [], preserveSingleArrays = false) => {
      const arrayA = Array.isArray(a) ? a : [a];
      const arrayB = Array.isArray(b) ? b : [b];
      const mooshed = arrayA.concat(arrayB);
      return mooshed.length === 1 && !preserveSingleArrays ? mooshed[0] : mooshed;
    };
    var simplifyAll = (input, dropName) => {
      const output = [];
      if (input !== null && typeof input === "object" && input.constructor === Array) {
        input.forEach((item) => {
          output.push(simplifyNode(item, dropName));
        });
        return output;
      }
      return simplifyNode(input, dropName);
    };
    var objectifyMarkup = (node, keepArrays) => {
      let key;
      const output = {};
      Object.keys(node).forEach((nodeKey) => {
        if (nodeKey !== "$markup") {
          output[nodeKey] = node[nodeKey];
        }
      });
      if (node.$markup) {
        node.$markup.forEach((item) => {
          if (typeof item === "string") {
            output.$text = moosh(output.$text, item, keepArrays);
          } else if (typeof item === "object") {
            if (item.constructor === Array) {
              key = item[0].$name;
            } else {
              key = item.$name;
            }
            output[key] = moosh(output[key], simplifyAll(item, true), keepArrays);
          }
        });
      }
      return output;
    };
    var isSomething = (value) => value != null && (value.length == null || value.length !== 0) && (typeof value !== "object" || Object.keys(value).length !== 0);
    module2.exports = {
      condenseArray,
      escape,
      isSomething,
      moosh,
      objectifyMarkup,
      shouldObjectifyMarkup,
      simplifyNode
    };
  }
});

// node_modules/xml-flow/lib/xml-flow.js
var require_xml_flow = __commonJS({
  "node_modules/xml-flow/lib/xml-flow.js"(exports, module2) {
    var { EventEmitter } = require("events");
    var sax = require_sax();
    var helper = require_helper();
    var ALWAYS = 1;
    var SOMETIMES = 0;
    var NEVER = -1;
    var defaults = {
      preserveMarkup: SOMETIMES,
      simplifyNodes: true,
      useArrays: SOMETIMES,
      lowercase: true,
      trim: true,
      normalize: true,
      cdataAsText: false,
      strict: false
    };
    var flow2 = function xmlFlow(inStream, options = defaults) {
      const emitter = new EventEmitter();
      const stack = [];
      const opts = Object.assign({}, defaults, options);
      const {
        preserveMarkup,
        simplifyNodes,
        useArrays,
        lowercase,
        trim,
        normalize,
        cdataAsText,
        strict
      } = opts;
      let topNode = null;
      let currentCdata = null;
      const saxStream = sax.createStream(strict, { lowercase, trim, normalize, cdataAsText });
      saxStream.on("opentag", (node) => {
        if (stack.length === 0 && !emitter.listeners(`tag:${node.name}`).length) {
          return;
        }
        topNode = {
          $name: node.name,
          $attrs: node.attributes
        };
        if (useArrays > NEVER) {
          topNode.$markup = [];
        }
        stack.push(topNode);
      });
      saxStream.on("text", (text) => {
        if (topNode) {
          if (useArrays > NEVER) {
            topNode.$markup.push(text);
          } else if (topNode.$text) {
            topNode.$text += text;
          } else {
            topNode.$text = text;
          }
        }
      });
      saxStream.on("opencdata", () => {
        if (topNode) {
          if (!cdataAsText) {
            currentCdata = {
              $name: "$cdata",
              text: ""
            };
            if (useArrays > NEVER) {
              topNode.$markup.push(currentCdata);
            } else {
              topNode.$cdata = currentCdata;
            }
          }
        }
      });
      saxStream.on("cdata", (text) => {
        if (topNode) {
          if (currentCdata !== null) {
            currentCdata.text += text;
          } else if (useArrays > NEVER) {
            topNode.$markup.push(text);
          } else if (topNode.$text) {
            topNode.$text += text;
          } else {
            topNode.$text = text;
          }
        }
      });
      saxStream.on("closecdata", () => {
        currentCdata = null;
      });
      saxStream.on("script", (script) => {
        if (topNode) {
          topNode.$script = script;
        }
      });
      saxStream.on("closetag", (tagName) => {
        let compressed;
        let newTop = null;
        const keepArrays = useArrays > SOMETIMES;
        if (stack.length === 0)
          return;
        if (useArrays > NEVER) {
          if (preserveMarkup <= NEVER) {
            topNode.$markup = helper.condenseArray(topNode.$markup);
            topNode = helper.objectifyMarkup(topNode, keepArrays);
          } else if (preserveMarkup === SOMETIMES) {
            compressed = helper.condenseArray(topNode.$markup);
            if (helper.shouldObjectifyMarkup(compressed)) {
              topNode.$markup = compressed;
              topNode = helper.objectifyMarkup(topNode, keepArrays);
            }
          }
        }
        if (emitter.listeners(`tag:${tagName}`).length) {
          emitter.emit(
            `tag:${tagName}`,
            simplifyNodes ? helper.simplifyNode(topNode, false, useArrays > SOMETIMES) : topNode
          );
        }
        stack.pop();
        if (stack.length > 0) {
          newTop = stack[stack.length - 1];
          if (useArrays > NEVER) {
            newTop.$markup.push(topNode);
          } else if (!newTop[tagName]) {
            newTop[tagName] = helper.simplifyNode(topNode, true);
          }
        }
        topNode = newTop;
      });
      saxStream.on("end", () => {
        emitter.emit("end");
      });
      saxStream.on("error", (error) => {
        emitter.emit("error", error);
      });
      inStream.pipe(saxStream);
      emitter.pause = function pause() {
        inStream.pause();
      };
      emitter.resume = function resume() {
        inStream.resume();
      };
      return emitter;
    };
    flow2.ALWAYS = ALWAYS;
    flow2.SOMETIMES = SOMETIMES;
    flow2.NEVER = NEVER;
    flow2.toXml = function toXml(obj, {
      indent = "",
      selfClosing = true,
      escape = helper.escape,
      nodeName
    } = {}) {
      const carriageReturn = indent ? "\n" : "";
      function getXml(node, nodeName2, currentIndent) {
        let output = "";
        let keys;
        let name = nodeName2;
        const thisIndent = currentIndent ? carriageReturn + currentIndent : "";
        const nextIndent = currentIndent + indent;
        let guts = "";
        node = node || "";
        if (node.constructor === Array) {
          node.forEach((subNode) => {
            output += getXml(subNode, name, currentIndent);
          });
          return output;
        }
        if (!name && node.$name) {
          name = node.$name;
        }
        if (name) {
          output = `${thisIndent}<${name}`;
          if (node.$attrs && typeof node.$attrs === "object") {
            keys = Object.keys(node.$attrs);
            keys.forEach((key) => {
              output += ` ${key}=${JSON.stringify(String(node.$attrs[key]))}`;
            });
          }
        }
        if (node === null || node === void 0 || node === "") {
        } else if (typeof node === "object") {
          keys = Object.keys(node);
          keys.forEach((key) => {
            const value = node[key];
            switch (key) {
              case "$name":
              case "$attrs":
                break;
              case "$text":
              case "$markup":
                guts += getXml(value, null, nextIndent);
                break;
              case "$script":
                guts += getXml(value, "script", nextIndent);
                break;
              case "$cdata":
                guts += `${thisIndent}<![CDATA[${value}]]>`;
                break;
              default:
                guts += getXml(value, key, nextIndent);
            }
          });
        } else {
          guts += thisIndent + escape(node);
        }
        if (name) {
          if (guts) {
            output += `>${guts}${carriageReturn}${currentIndent}</${name}>`;
          } else if (selfClosing) {
            output += "/>";
          } else {
            output += `></${name}>`;
          }
        } else {
          output += guts;
        }
        return output;
      }
      return getXml(obj, nodeName, "");
    };
    module2.exports = flow2;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  AUTH_REDIRECT_URI: () => AUTH_REDIRECT_URI,
  ImportContext: () => ImportContext2,
  ImporterModal: () => ImporterModal,
  default: () => ImporterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian19 = require("obsidian");

// src/formats/bear-bear2bk.ts
var import_obsidian4 = require("obsidian");

// node_modules/@zip.js/zip.js/lib/core/streams/codecs/inflate.js
var MAX_BITS = 15;
var Z_OK = 0;
var Z_STREAM_END = 1;
var Z_NEED_DICT = 2;
var Z_STREAM_ERROR = -2;
var Z_DATA_ERROR = -3;
var Z_MEM_ERROR = -4;
var Z_BUF_ERROR = -5;
var inflate_mask = [
  0,
  1,
  3,
  7,
  15,
  31,
  63,
  127,
  255,
  511,
  1023,
  2047,
  4095,
  8191,
  16383,
  32767,
  65535
];
var MANY = 1440;
var Z_NO_FLUSH = 0;
var Z_FINISH = 4;
var fixed_bl = 9;
var fixed_bd = 5;
var fixed_tl = [
  96,
  7,
  256,
  0,
  8,
  80,
  0,
  8,
  16,
  84,
  8,
  115,
  82,
  7,
  31,
  0,
  8,
  112,
  0,
  8,
  48,
  0,
  9,
  192,
  80,
  7,
  10,
  0,
  8,
  96,
  0,
  8,
  32,
  0,
  9,
  160,
  0,
  8,
  0,
  0,
  8,
  128,
  0,
  8,
  64,
  0,
  9,
  224,
  80,
  7,
  6,
  0,
  8,
  88,
  0,
  8,
  24,
  0,
  9,
  144,
  83,
  7,
  59,
  0,
  8,
  120,
  0,
  8,
  56,
  0,
  9,
  208,
  81,
  7,
  17,
  0,
  8,
  104,
  0,
  8,
  40,
  0,
  9,
  176,
  0,
  8,
  8,
  0,
  8,
  136,
  0,
  8,
  72,
  0,
  9,
  240,
  80,
  7,
  4,
  0,
  8,
  84,
  0,
  8,
  20,
  85,
  8,
  227,
  83,
  7,
  43,
  0,
  8,
  116,
  0,
  8,
  52,
  0,
  9,
  200,
  81,
  7,
  13,
  0,
  8,
  100,
  0,
  8,
  36,
  0,
  9,
  168,
  0,
  8,
  4,
  0,
  8,
  132,
  0,
  8,
  68,
  0,
  9,
  232,
  80,
  7,
  8,
  0,
  8,
  92,
  0,
  8,
  28,
  0,
  9,
  152,
  84,
  7,
  83,
  0,
  8,
  124,
  0,
  8,
  60,
  0,
  9,
  216,
  82,
  7,
  23,
  0,
  8,
  108,
  0,
  8,
  44,
  0,
  9,
  184,
  0,
  8,
  12,
  0,
  8,
  140,
  0,
  8,
  76,
  0,
  9,
  248,
  80,
  7,
  3,
  0,
  8,
  82,
  0,
  8,
  18,
  85,
  8,
  163,
  83,
  7,
  35,
  0,
  8,
  114,
  0,
  8,
  50,
  0,
  9,
  196,
  81,
  7,
  11,
  0,
  8,
  98,
  0,
  8,
  34,
  0,
  9,
  164,
  0,
  8,
  2,
  0,
  8,
  130,
  0,
  8,
  66,
  0,
  9,
  228,
  80,
  7,
  7,
  0,
  8,
  90,
  0,
  8,
  26,
  0,
  9,
  148,
  84,
  7,
  67,
  0,
  8,
  122,
  0,
  8,
  58,
  0,
  9,
  212,
  82,
  7,
  19,
  0,
  8,
  106,
  0,
  8,
  42,
  0,
  9,
  180,
  0,
  8,
  10,
  0,
  8,
  138,
  0,
  8,
  74,
  0,
  9,
  244,
  80,
  7,
  5,
  0,
  8,
  86,
  0,
  8,
  22,
  192,
  8,
  0,
  83,
  7,
  51,
  0,
  8,
  118,
  0,
  8,
  54,
  0,
  9,
  204,
  81,
  7,
  15,
  0,
  8,
  102,
  0,
  8,
  38,
  0,
  9,
  172,
  0,
  8,
  6,
  0,
  8,
  134,
  0,
  8,
  70,
  0,
  9,
  236,
  80,
  7,
  9,
  0,
  8,
  94,
  0,
  8,
  30,
  0,
  9,
  156,
  84,
  7,
  99,
  0,
  8,
  126,
  0,
  8,
  62,
  0,
  9,
  220,
  82,
  7,
  27,
  0,
  8,
  110,
  0,
  8,
  46,
  0,
  9,
  188,
  0,
  8,
  14,
  0,
  8,
  142,
  0,
  8,
  78,
  0,
  9,
  252,
  96,
  7,
  256,
  0,
  8,
  81,
  0,
  8,
  17,
  85,
  8,
  131,
  82,
  7,
  31,
  0,
  8,
  113,
  0,
  8,
  49,
  0,
  9,
  194,
  80,
  7,
  10,
  0,
  8,
  97,
  0,
  8,
  33,
  0,
  9,
  162,
  0,
  8,
  1,
  0,
  8,
  129,
  0,
  8,
  65,
  0,
  9,
  226,
  80,
  7,
  6,
  0,
  8,
  89,
  0,
  8,
  25,
  0,
  9,
  146,
  83,
  7,
  59,
  0,
  8,
  121,
  0,
  8,
  57,
  0,
  9,
  210,
  81,
  7,
  17,
  0,
  8,
  105,
  0,
  8,
  41,
  0,
  9,
  178,
  0,
  8,
  9,
  0,
  8,
  137,
  0,
  8,
  73,
  0,
  9,
  242,
  80,
  7,
  4,
  0,
  8,
  85,
  0,
  8,
  21,
  80,
  8,
  258,
  83,
  7,
  43,
  0,
  8,
  117,
  0,
  8,
  53,
  0,
  9,
  202,
  81,
  7,
  13,
  0,
  8,
  101,
  0,
  8,
  37,
  0,
  9,
  170,
  0,
  8,
  5,
  0,
  8,
  133,
  0,
  8,
  69,
  0,
  9,
  234,
  80,
  7,
  8,
  0,
  8,
  93,
  0,
  8,
  29,
  0,
  9,
  154,
  84,
  7,
  83,
  0,
  8,
  125,
  0,
  8,
  61,
  0,
  9,
  218,
  82,
  7,
  23,
  0,
  8,
  109,
  0,
  8,
  45,
  0,
  9,
  186,
  0,
  8,
  13,
  0,
  8,
  141,
  0,
  8,
  77,
  0,
  9,
  250,
  80,
  7,
  3,
  0,
  8,
  83,
  0,
  8,
  19,
  85,
  8,
  195,
  83,
  7,
  35,
  0,
  8,
  115,
  0,
  8,
  51,
  0,
  9,
  198,
  81,
  7,
  11,
  0,
  8,
  99,
  0,
  8,
  35,
  0,
  9,
  166,
  0,
  8,
  3,
  0,
  8,
  131,
  0,
  8,
  67,
  0,
  9,
  230,
  80,
  7,
  7,
  0,
  8,
  91,
  0,
  8,
  27,
  0,
  9,
  150,
  84,
  7,
  67,
  0,
  8,
  123,
  0,
  8,
  59,
  0,
  9,
  214,
  82,
  7,
  19,
  0,
  8,
  107,
  0,
  8,
  43,
  0,
  9,
  182,
  0,
  8,
  11,
  0,
  8,
  139,
  0,
  8,
  75,
  0,
  9,
  246,
  80,
  7,
  5,
  0,
  8,
  87,
  0,
  8,
  23,
  192,
  8,
  0,
  83,
  7,
  51,
  0,
  8,
  119,
  0,
  8,
  55,
  0,
  9,
  206,
  81,
  7,
  15,
  0,
  8,
  103,
  0,
  8,
  39,
  0,
  9,
  174,
  0,
  8,
  7,
  0,
  8,
  135,
  0,
  8,
  71,
  0,
  9,
  238,
  80,
  7,
  9,
  0,
  8,
  95,
  0,
  8,
  31,
  0,
  9,
  158,
  84,
  7,
  99,
  0,
  8,
  127,
  0,
  8,
  63,
  0,
  9,
  222,
  82,
  7,
  27,
  0,
  8,
  111,
  0,
  8,
  47,
  0,
  9,
  190,
  0,
  8,
  15,
  0,
  8,
  143,
  0,
  8,
  79,
  0,
  9,
  254,
  96,
  7,
  256,
  0,
  8,
  80,
  0,
  8,
  16,
  84,
  8,
  115,
  82,
  7,
  31,
  0,
  8,
  112,
  0,
  8,
  48,
  0,
  9,
  193,
  80,
  7,
  10,
  0,
  8,
  96,
  0,
  8,
  32,
  0,
  9,
  161,
  0,
  8,
  0,
  0,
  8,
  128,
  0,
  8,
  64,
  0,
  9,
  225,
  80,
  7,
  6,
  0,
  8,
  88,
  0,
  8,
  24,
  0,
  9,
  145,
  83,
  7,
  59,
  0,
  8,
  120,
  0,
  8,
  56,
  0,
  9,
  209,
  81,
  7,
  17,
  0,
  8,
  104,
  0,
  8,
  40,
  0,
  9,
  177,
  0,
  8,
  8,
  0,
  8,
  136,
  0,
  8,
  72,
  0,
  9,
  241,
  80,
  7,
  4,
  0,
  8,
  84,
  0,
  8,
  20,
  85,
  8,
  227,
  83,
  7,
  43,
  0,
  8,
  116,
  0,
  8,
  52,
  0,
  9,
  201,
  81,
  7,
  13,
  0,
  8,
  100,
  0,
  8,
  36,
  0,
  9,
  169,
  0,
  8,
  4,
  0,
  8,
  132,
  0,
  8,
  68,
  0,
  9,
  233,
  80,
  7,
  8,
  0,
  8,
  92,
  0,
  8,
  28,
  0,
  9,
  153,
  84,
  7,
  83,
  0,
  8,
  124,
  0,
  8,
  60,
  0,
  9,
  217,
  82,
  7,
  23,
  0,
  8,
  108,
  0,
  8,
  44,
  0,
  9,
  185,
  0,
  8,
  12,
  0,
  8,
  140,
  0,
  8,
  76,
  0,
  9,
  249,
  80,
  7,
  3,
  0,
  8,
  82,
  0,
  8,
  18,
  85,
  8,
  163,
  83,
  7,
  35,
  0,
  8,
  114,
  0,
  8,
  50,
  0,
  9,
  197,
  81,
  7,
  11,
  0,
  8,
  98,
  0,
  8,
  34,
  0,
  9,
  165,
  0,
  8,
  2,
  0,
  8,
  130,
  0,
  8,
  66,
  0,
  9,
  229,
  80,
  7,
  7,
  0,
  8,
  90,
  0,
  8,
  26,
  0,
  9,
  149,
  84,
  7,
  67,
  0,
  8,
  122,
  0,
  8,
  58,
  0,
  9,
  213,
  82,
  7,
  19,
  0,
  8,
  106,
  0,
  8,
  42,
  0,
  9,
  181,
  0,
  8,
  10,
  0,
  8,
  138,
  0,
  8,
  74,
  0,
  9,
  245,
  80,
  7,
  5,
  0,
  8,
  86,
  0,
  8,
  22,
  192,
  8,
  0,
  83,
  7,
  51,
  0,
  8,
  118,
  0,
  8,
  54,
  0,
  9,
  205,
  81,
  7,
  15,
  0,
  8,
  102,
  0,
  8,
  38,
  0,
  9,
  173,
  0,
  8,
  6,
  0,
  8,
  134,
  0,
  8,
  70,
  0,
  9,
  237,
  80,
  7,
  9,
  0,
  8,
  94,
  0,
  8,
  30,
  0,
  9,
  157,
  84,
  7,
  99,
  0,
  8,
  126,
  0,
  8,
  62,
  0,
  9,
  221,
  82,
  7,
  27,
  0,
  8,
  110,
  0,
  8,
  46,
  0,
  9,
  189,
  0,
  8,
  14,
  0,
  8,
  142,
  0,
  8,
  78,
  0,
  9,
  253,
  96,
  7,
  256,
  0,
  8,
  81,
  0,
  8,
  17,
  85,
  8,
  131,
  82,
  7,
  31,
  0,
  8,
  113,
  0,
  8,
  49,
  0,
  9,
  195,
  80,
  7,
  10,
  0,
  8,
  97,
  0,
  8,
  33,
  0,
  9,
  163,
  0,
  8,
  1,
  0,
  8,
  129,
  0,
  8,
  65,
  0,
  9,
  227,
  80,
  7,
  6,
  0,
  8,
  89,
  0,
  8,
  25,
  0,
  9,
  147,
  83,
  7,
  59,
  0,
  8,
  121,
  0,
  8,
  57,
  0,
  9,
  211,
  81,
  7,
  17,
  0,
  8,
  105,
  0,
  8,
  41,
  0,
  9,
  179,
  0,
  8,
  9,
  0,
  8,
  137,
  0,
  8,
  73,
  0,
  9,
  243,
  80,
  7,
  4,
  0,
  8,
  85,
  0,
  8,
  21,
  80,
  8,
  258,
  83,
  7,
  43,
  0,
  8,
  117,
  0,
  8,
  53,
  0,
  9,
  203,
  81,
  7,
  13,
  0,
  8,
  101,
  0,
  8,
  37,
  0,
  9,
  171,
  0,
  8,
  5,
  0,
  8,
  133,
  0,
  8,
  69,
  0,
  9,
  235,
  80,
  7,
  8,
  0,
  8,
  93,
  0,
  8,
  29,
  0,
  9,
  155,
  84,
  7,
  83,
  0,
  8,
  125,
  0,
  8,
  61,
  0,
  9,
  219,
  82,
  7,
  23,
  0,
  8,
  109,
  0,
  8,
  45,
  0,
  9,
  187,
  0,
  8,
  13,
  0,
  8,
  141,
  0,
  8,
  77,
  0,
  9,
  251,
  80,
  7,
  3,
  0,
  8,
  83,
  0,
  8,
  19,
  85,
  8,
  195,
  83,
  7,
  35,
  0,
  8,
  115,
  0,
  8,
  51,
  0,
  9,
  199,
  81,
  7,
  11,
  0,
  8,
  99,
  0,
  8,
  35,
  0,
  9,
  167,
  0,
  8,
  3,
  0,
  8,
  131,
  0,
  8,
  67,
  0,
  9,
  231,
  80,
  7,
  7,
  0,
  8,
  91,
  0,
  8,
  27,
  0,
  9,
  151,
  84,
  7,
  67,
  0,
  8,
  123,
  0,
  8,
  59,
  0,
  9,
  215,
  82,
  7,
  19,
  0,
  8,
  107,
  0,
  8,
  43,
  0,
  9,
  183,
  0,
  8,
  11,
  0,
  8,
  139,
  0,
  8,
  75,
  0,
  9,
  247,
  80,
  7,
  5,
  0,
  8,
  87,
  0,
  8,
  23,
  192,
  8,
  0,
  83,
  7,
  51,
  0,
  8,
  119,
  0,
  8,
  55,
  0,
  9,
  207,
  81,
  7,
  15,
  0,
  8,
  103,
  0,
  8,
  39,
  0,
  9,
  175,
  0,
  8,
  7,
  0,
  8,
  135,
  0,
  8,
  71,
  0,
  9,
  239,
  80,
  7,
  9,
  0,
  8,
  95,
  0,
  8,
  31,
  0,
  9,
  159,
  84,
  7,
  99,
  0,
  8,
  127,
  0,
  8,
  63,
  0,
  9,
  223,
  82,
  7,
  27,
  0,
  8,
  111,
  0,
  8,
  47,
  0,
  9,
  191,
  0,
  8,
  15,
  0,
  8,
  143,
  0,
  8,
  79,
  0,
  9,
  255
];
var fixed_td = [
  80,
  5,
  1,
  87,
  5,
  257,
  83,
  5,
  17,
  91,
  5,
  4097,
  81,
  5,
  5,
  89,
  5,
  1025,
  85,
  5,
  65,
  93,
  5,
  16385,
  80,
  5,
  3,
  88,
  5,
  513,
  84,
  5,
  33,
  92,
  5,
  8193,
  82,
  5,
  9,
  90,
  5,
  2049,
  86,
  5,
  129,
  192,
  5,
  24577,
  80,
  5,
  2,
  87,
  5,
  385,
  83,
  5,
  25,
  91,
  5,
  6145,
  81,
  5,
  7,
  89,
  5,
  1537,
  85,
  5,
  97,
  93,
  5,
  24577,
  80,
  5,
  4,
  88,
  5,
  769,
  84,
  5,
  49,
  92,
  5,
  12289,
  82,
  5,
  13,
  90,
  5,
  3073,
  86,
  5,
  193,
  192,
  5,
  24577
];
var cplens = [
  // Copy lengths for literal codes 257..285
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  15,
  17,
  19,
  23,
  27,
  31,
  35,
  43,
  51,
  59,
  67,
  83,
  99,
  115,
  131,
  163,
  195,
  227,
  258,
  0,
  0
];
var cplext = [
  // Extra bits for literal codes 257..285
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  0,
  112,
  112
  // 112==invalid
];
var cpdist = [
  // Copy offsets for distance codes 0..29
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  13,
  17,
  25,
  33,
  49,
  65,
  97,
  129,
  193,
  257,
  385,
  513,
  769,
  1025,
  1537,
  2049,
  3073,
  4097,
  6145,
  8193,
  12289,
  16385,
  24577
];
var cpdext = [
  // Extra bits for distance codes
  0,
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13
];
var BMAX = 15;
function InfTree() {
  const that = this;
  let hn;
  let v;
  let c;
  let r;
  let u;
  let x;
  function huft_build(b, bindex, n, s, d, e2, t, m, hp, hn2, v2) {
    let a;
    let f;
    let g;
    let h;
    let i;
    let j;
    let k;
    let l;
    let mask;
    let p;
    let q;
    let w;
    let xp;
    let y;
    let z;
    p = 0;
    i = n;
    do {
      c[b[bindex + p]]++;
      p++;
      i--;
    } while (i !== 0);
    if (c[0] == n) {
      t[0] = -1;
      m[0] = 0;
      return Z_OK;
    }
    l = m[0];
    for (j = 1; j <= BMAX; j++)
      if (c[j] !== 0)
        break;
    k = j;
    if (l < j) {
      l = j;
    }
    for (i = BMAX; i !== 0; i--) {
      if (c[i] !== 0)
        break;
    }
    g = i;
    if (l > i) {
      l = i;
    }
    m[0] = l;
    for (y = 1 << j; j < i; j++, y <<= 1) {
      if ((y -= c[j]) < 0) {
        return Z_DATA_ERROR;
      }
    }
    if ((y -= c[i]) < 0) {
      return Z_DATA_ERROR;
    }
    c[i] += y;
    x[1] = j = 0;
    p = 1;
    xp = 2;
    while (--i !== 0) {
      x[xp] = j += c[p];
      xp++;
      p++;
    }
    i = 0;
    p = 0;
    do {
      if ((j = b[bindex + p]) !== 0) {
        v2[x[j]++] = i;
      }
      p++;
    } while (++i < n);
    n = x[g];
    x[0] = i = 0;
    p = 0;
    h = -1;
    w = -l;
    u[0] = 0;
    q = 0;
    z = 0;
    for (; k <= g; k++) {
      a = c[k];
      while (a-- !== 0) {
        while (k > w + l) {
          h++;
          w += l;
          z = g - w;
          z = z > l ? l : z;
          if ((f = 1 << (j = k - w)) > a + 1) {
            f -= a + 1;
            xp = k;
            if (j < z) {
              while (++j < z) {
                if ((f <<= 1) <= c[++xp])
                  break;
                f -= c[xp];
              }
            }
          }
          z = 1 << j;
          if (hn2[0] + z > MANY) {
            return Z_DATA_ERROR;
          }
          u[h] = q = /* hp+ */
          hn2[0];
          hn2[0] += z;
          if (h !== 0) {
            x[h] = i;
            r[0] = /* (byte) */
            j;
            r[1] = /* (byte) */
            l;
            j = i >>> w - l;
            r[2] = /* (int) */
            q - u[h - 1] - j;
            hp.set(r, (u[h - 1] + j) * 3);
          } else {
            t[0] = q;
          }
        }
        r[1] = /* (byte) */
        k - w;
        if (p >= n) {
          r[0] = 128 + 64;
        } else if (v2[p] < s) {
          r[0] = /* (byte) */
          v2[p] < 256 ? 0 : 32 + 64;
          r[2] = v2[p++];
        } else {
          r[0] = /* (byte) */
          e2[v2[p] - s] + 16 + 64;
          r[2] = d[v2[p++] - s];
        }
        f = 1 << k - w;
        for (j = i >>> w; j < z; j += f) {
          hp.set(r, (q + j) * 3);
        }
        for (j = 1 << k - 1; (i & j) !== 0; j >>>= 1) {
          i ^= j;
        }
        i ^= j;
        mask = (1 << w) - 1;
        while ((i & mask) != x[h]) {
          h--;
          w -= l;
          mask = (1 << w) - 1;
        }
      }
    }
    return y !== 0 && g != 1 ? Z_BUF_ERROR : Z_OK;
  }
  function initWorkArea(vsize) {
    let i;
    if (!hn) {
      hn = [];
      v = [];
      c = new Int32Array(BMAX + 1);
      r = [];
      u = new Int32Array(BMAX);
      x = new Int32Array(BMAX + 1);
    }
    if (v.length < vsize) {
      v = [];
    }
    for (i = 0; i < vsize; i++) {
      v[i] = 0;
    }
    for (i = 0; i < BMAX + 1; i++) {
      c[i] = 0;
    }
    for (i = 0; i < 3; i++) {
      r[i] = 0;
    }
    u.set(c.subarray(0, BMAX), 0);
    x.set(c.subarray(0, BMAX + 1), 0);
  }
  that.inflate_trees_bits = function(c2, bb, tb, hp, z) {
    let result;
    initWorkArea(19);
    hn[0] = 0;
    result = huft_build(c2, 0, 19, 19, null, null, tb, bb, hp, hn, v);
    if (result == Z_DATA_ERROR) {
      z.msg = "oversubscribed dynamic bit lengths tree";
    } else if (result == Z_BUF_ERROR || bb[0] === 0) {
      z.msg = "incomplete dynamic bit lengths tree";
      result = Z_DATA_ERROR;
    }
    return result;
  };
  that.inflate_trees_dynamic = function(nl, nd, c2, bl, bd, tl, td, hp, z) {
    let result;
    initWorkArea(288);
    hn[0] = 0;
    result = huft_build(c2, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);
    if (result != Z_OK || bl[0] === 0) {
      if (result == Z_DATA_ERROR) {
        z.msg = "oversubscribed literal/length tree";
      } else if (result != Z_MEM_ERROR) {
        z.msg = "incomplete literal/length tree";
        result = Z_DATA_ERROR;
      }
      return result;
    }
    initWorkArea(288);
    result = huft_build(c2, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);
    if (result != Z_OK || bd[0] === 0 && nl > 257) {
      if (result == Z_DATA_ERROR) {
        z.msg = "oversubscribed distance tree";
      } else if (result == Z_BUF_ERROR) {
        z.msg = "incomplete distance tree";
        result = Z_DATA_ERROR;
      } else if (result != Z_MEM_ERROR) {
        z.msg = "empty distance tree with lengths";
        result = Z_DATA_ERROR;
      }
      return result;
    }
    return Z_OK;
  };
}
InfTree.inflate_trees_fixed = function(bl, bd, tl, td) {
  bl[0] = fixed_bl;
  bd[0] = fixed_bd;
  tl[0] = fixed_tl;
  td[0] = fixed_td;
  return Z_OK;
};
var START = 0;
var LEN = 1;
var LENEXT = 2;
var DIST = 3;
var DISTEXT = 4;
var COPY = 5;
var LIT = 6;
var WASH = 7;
var END = 8;
var BADCODE = 9;
function InfCodes() {
  const that = this;
  let mode2;
  let len = 0;
  let tree;
  let tree_index = 0;
  let need = 0;
  let lit = 0;
  let get = 0;
  let dist = 0;
  let lbits = 0;
  let dbits = 0;
  let ltree;
  let ltree_index = 0;
  let dtree;
  let dtree_index = 0;
  function inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {
    let t;
    let tp;
    let tp_index;
    let e2;
    let b;
    let k;
    let p;
    let n;
    let q;
    let m;
    let ml;
    let md;
    let c;
    let d;
    let r;
    let tp_index_t_3;
    p = z.next_in_index;
    n = z.avail_in;
    b = s.bitb;
    k = s.bitk;
    q = s.write;
    m = q < s.read ? s.read - q - 1 : s.end - q;
    ml = inflate_mask[bl];
    md = inflate_mask[bd];
    do {
      while (k < 20) {
        n--;
        b |= (z.read_byte(p++) & 255) << k;
        k += 8;
      }
      t = b & ml;
      tp = tl;
      tp_index = tl_index;
      tp_index_t_3 = (tp_index + t) * 3;
      if ((e2 = tp[tp_index_t_3]) === 0) {
        b >>= tp[tp_index_t_3 + 1];
        k -= tp[tp_index_t_3 + 1];
        s.win[q++] = /* (byte) */
        tp[tp_index_t_3 + 2];
        m--;
        continue;
      }
      do {
        b >>= tp[tp_index_t_3 + 1];
        k -= tp[tp_index_t_3 + 1];
        if ((e2 & 16) !== 0) {
          e2 &= 15;
          c = tp[tp_index_t_3 + 2] + /* (int) */
          (b & inflate_mask[e2]);
          b >>= e2;
          k -= e2;
          while (k < 15) {
            n--;
            b |= (z.read_byte(p++) & 255) << k;
            k += 8;
          }
          t = b & md;
          tp = td;
          tp_index = td_index;
          tp_index_t_3 = (tp_index + t) * 3;
          e2 = tp[tp_index_t_3];
          do {
            b >>= tp[tp_index_t_3 + 1];
            k -= tp[tp_index_t_3 + 1];
            if ((e2 & 16) !== 0) {
              e2 &= 15;
              while (k < e2) {
                n--;
                b |= (z.read_byte(p++) & 255) << k;
                k += 8;
              }
              d = tp[tp_index_t_3 + 2] + (b & inflate_mask[e2]);
              b >>= e2;
              k -= e2;
              m -= c;
              if (q >= d) {
                r = q - d;
                if (q - r > 0 && 2 > q - r) {
                  s.win[q++] = s.win[r++];
                  s.win[q++] = s.win[r++];
                  c -= 2;
                } else {
                  s.win.set(s.win.subarray(r, r + 2), q);
                  q += 2;
                  r += 2;
                  c -= 2;
                }
              } else {
                r = q - d;
                do {
                  r += s.end;
                } while (r < 0);
                e2 = s.end - r;
                if (c > e2) {
                  c -= e2;
                  if (q - r > 0 && e2 > q - r) {
                    do {
                      s.win[q++] = s.win[r++];
                    } while (--e2 !== 0);
                  } else {
                    s.win.set(s.win.subarray(r, r + e2), q);
                    q += e2;
                    r += e2;
                    e2 = 0;
                  }
                  r = 0;
                }
              }
              if (q - r > 0 && c > q - r) {
                do {
                  s.win[q++] = s.win[r++];
                } while (--c !== 0);
              } else {
                s.win.set(s.win.subarray(r, r + c), q);
                q += c;
                r += c;
                c = 0;
              }
              break;
            } else if ((e2 & 64) === 0) {
              t += tp[tp_index_t_3 + 2];
              t += b & inflate_mask[e2];
              tp_index_t_3 = (tp_index + t) * 3;
              e2 = tp[tp_index_t_3];
            } else {
              z.msg = "invalid distance code";
              c = z.avail_in - n;
              c = k >> 3 < c ? k >> 3 : c;
              n += c;
              p -= c;
              k -= c << 3;
              s.bitb = b;
              s.bitk = k;
              z.avail_in = n;
              z.total_in += p - z.next_in_index;
              z.next_in_index = p;
              s.write = q;
              return Z_DATA_ERROR;
            }
          } while (true);
          break;
        }
        if ((e2 & 64) === 0) {
          t += tp[tp_index_t_3 + 2];
          t += b & inflate_mask[e2];
          tp_index_t_3 = (tp_index + t) * 3;
          if ((e2 = tp[tp_index_t_3]) === 0) {
            b >>= tp[tp_index_t_3 + 1];
            k -= tp[tp_index_t_3 + 1];
            s.win[q++] = /* (byte) */
            tp[tp_index_t_3 + 2];
            m--;
            break;
          }
        } else if ((e2 & 32) !== 0) {
          c = z.avail_in - n;
          c = k >> 3 < c ? k >> 3 : c;
          n += c;
          p -= c;
          k -= c << 3;
          s.bitb = b;
          s.bitk = k;
          z.avail_in = n;
          z.total_in += p - z.next_in_index;
          z.next_in_index = p;
          s.write = q;
          return Z_STREAM_END;
        } else {
          z.msg = "invalid literal/length code";
          c = z.avail_in - n;
          c = k >> 3 < c ? k >> 3 : c;
          n += c;
          p -= c;
          k -= c << 3;
          s.bitb = b;
          s.bitk = k;
          z.avail_in = n;
          z.total_in += p - z.next_in_index;
          z.next_in_index = p;
          s.write = q;
          return Z_DATA_ERROR;
        }
      } while (true);
    } while (m >= 258 && n >= 10);
    c = z.avail_in - n;
    c = k >> 3 < c ? k >> 3 : c;
    n += c;
    p -= c;
    k -= c << 3;
    s.bitb = b;
    s.bitk = k;
    z.avail_in = n;
    z.total_in += p - z.next_in_index;
    z.next_in_index = p;
    s.write = q;
    return Z_OK;
  }
  that.init = function(bl, bd, tl, tl_index, td, td_index) {
    mode2 = START;
    lbits = /* (byte) */
    bl;
    dbits = /* (byte) */
    bd;
    ltree = tl;
    ltree_index = tl_index;
    dtree = td;
    dtree_index = td_index;
    tree = null;
  };
  that.proc = function(s, z, r) {
    let j;
    let tindex;
    let e2;
    let b = 0;
    let k = 0;
    let p = 0;
    let n;
    let q;
    let m;
    let f;
    p = z.next_in_index;
    n = z.avail_in;
    b = s.bitb;
    k = s.bitk;
    q = s.write;
    m = q < s.read ? s.read - q - 1 : s.end - q;
    while (true) {
      switch (mode2) {
        case START:
          if (m >= 258 && n >= 10) {
            s.bitb = b;
            s.bitk = k;
            z.avail_in = n;
            z.total_in += p - z.next_in_index;
            z.next_in_index = p;
            s.write = q;
            r = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);
            p = z.next_in_index;
            n = z.avail_in;
            b = s.bitb;
            k = s.bitk;
            q = s.write;
            m = q < s.read ? s.read - q - 1 : s.end - q;
            if (r != Z_OK) {
              mode2 = r == Z_STREAM_END ? WASH : BADCODE;
              break;
            }
          }
          need = lbits;
          tree = ltree;
          tree_index = ltree_index;
          mode2 = LEN;
        case LEN:
          j = need;
          while (k < j) {
            if (n !== 0)
              r = Z_OK;
            else {
              s.bitb = b;
              s.bitk = k;
              z.avail_in = n;
              z.total_in += p - z.next_in_index;
              z.next_in_index = p;
              s.write = q;
              return s.inflate_flush(z, r);
            }
            n--;
            b |= (z.read_byte(p++) & 255) << k;
            k += 8;
          }
          tindex = (tree_index + (b & inflate_mask[j])) * 3;
          b >>>= tree[tindex + 1];
          k -= tree[tindex + 1];
          e2 = tree[tindex];
          if (e2 === 0) {
            lit = tree[tindex + 2];
            mode2 = LIT;
            break;
          }
          if ((e2 & 16) !== 0) {
            get = e2 & 15;
            len = tree[tindex + 2];
            mode2 = LENEXT;
            break;
          }
          if ((e2 & 64) === 0) {
            need = e2;
            tree_index = tindex / 3 + tree[tindex + 2];
            break;
          }
          if ((e2 & 32) !== 0) {
            mode2 = WASH;
            break;
          }
          mode2 = BADCODE;
          z.msg = "invalid literal/length code";
          r = Z_DATA_ERROR;
          s.bitb = b;
          s.bitk = k;
          z.avail_in = n;
          z.total_in += p - z.next_in_index;
          z.next_in_index = p;
          s.write = q;
          return s.inflate_flush(z, r);
        case LENEXT:
          j = get;
          while (k < j) {
            if (n !== 0)
              r = Z_OK;
            else {
              s.bitb = b;
              s.bitk = k;
              z.avail_in = n;
              z.total_in += p - z.next_in_index;
              z.next_in_index = p;
              s.write = q;
              return s.inflate_flush(z, r);
            }
            n--;
            b |= (z.read_byte(p++) & 255) << k;
            k += 8;
          }
          len += b & inflate_mask[j];
          b >>= j;
          k -= j;
          need = dbits;
          tree = dtree;
          tree_index = dtree_index;
          mode2 = DIST;
        case DIST:
          j = need;
          while (k < j) {
            if (n !== 0)
              r = Z_OK;
            else {
              s.bitb = b;
              s.bitk = k;
              z.avail_in = n;
              z.total_in += p - z.next_in_index;
              z.next_in_index = p;
              s.write = q;
              return s.inflate_flush(z, r);
            }
            n--;
            b |= (z.read_byte(p++) & 255) << k;
            k += 8;
          }
          tindex = (tree_index + (b & inflate_mask[j])) * 3;
          b >>= tree[tindex + 1];
          k -= tree[tindex + 1];
          e2 = tree[tindex];
          if ((e2 & 16) !== 0) {
            get = e2 & 15;
            dist = tree[tindex + 2];
            mode2 = DISTEXT;
            break;
          }
          if ((e2 & 64) === 0) {
            need = e2;
            tree_index = tindex / 3 + tree[tindex + 2];
            break;
          }
          mode2 = BADCODE;
          z.msg = "invalid distance code";
          r = Z_DATA_ERROR;
          s.bitb = b;
          s.bitk = k;
          z.avail_in = n;
          z.total_in += p - z.next_in_index;
          z.next_in_index = p;
          s.write = q;
          return s.inflate_flush(z, r);
        case DISTEXT:
          j = get;
          while (k < j) {
            if (n !== 0)
              r = Z_OK;
            else {
              s.bitb = b;
              s.bitk = k;
              z.avail_in = n;
              z.total_in += p - z.next_in_index;
              z.next_in_index = p;
              s.write = q;
              return s.inflate_flush(z, r);
            }
            n--;
            b |= (z.read_byte(p++) & 255) << k;
            k += 8;
          }
          dist += b & inflate_mask[j];
          b >>= j;
          k -= j;
          mode2 = COPY;
        case COPY:
          f = q - dist;
          while (f < 0) {
            f += s.end;
          }
          while (len !== 0) {
            if (m === 0) {
              if (q == s.end && s.read !== 0) {
                q = 0;
                m = q < s.read ? s.read - q - 1 : s.end - q;
              }
              if (m === 0) {
                s.write = q;
                r = s.inflate_flush(z, r);
                q = s.write;
                m = q < s.read ? s.read - q - 1 : s.end - q;
                if (q == s.end && s.read !== 0) {
                  q = 0;
                  m = q < s.read ? s.read - q - 1 : s.end - q;
                }
                if (m === 0) {
                  s.bitb = b;
                  s.bitk = k;
                  z.avail_in = n;
                  z.total_in += p - z.next_in_index;
                  z.next_in_index = p;
                  s.write = q;
                  return s.inflate_flush(z, r);
                }
              }
            }
            s.win[q++] = s.win[f++];
            m--;
            if (f == s.end)
              f = 0;
            len--;
          }
          mode2 = START;
          break;
        case LIT:
          if (m === 0) {
            if (q == s.end && s.read !== 0) {
              q = 0;
              m = q < s.read ? s.read - q - 1 : s.end - q;
            }
            if (m === 0) {
              s.write = q;
              r = s.inflate_flush(z, r);
              q = s.write;
              m = q < s.read ? s.read - q - 1 : s.end - q;
              if (q == s.end && s.read !== 0) {
                q = 0;
                m = q < s.read ? s.read - q - 1 : s.end - q;
              }
              if (m === 0) {
                s.bitb = b;
                s.bitk = k;
                z.avail_in = n;
                z.total_in += p - z.next_in_index;
                z.next_in_index = p;
                s.write = q;
                return s.inflate_flush(z, r);
              }
            }
          }
          r = Z_OK;
          s.win[q++] = /* (byte) */
          lit;
          m--;
          mode2 = START;
          break;
        case WASH:
          if (k > 7) {
            k -= 8;
            n++;
            p--;
          }
          s.write = q;
          r = s.inflate_flush(z, r);
          q = s.write;
          m = q < s.read ? s.read - q - 1 : s.end - q;
          if (s.read != s.write) {
            s.bitb = b;
            s.bitk = k;
            z.avail_in = n;
            z.total_in += p - z.next_in_index;
            z.next_in_index = p;
            s.write = q;
            return s.inflate_flush(z, r);
          }
          mode2 = END;
        case END:
          r = Z_STREAM_END;
          s.bitb = b;
          s.bitk = k;
          z.avail_in = n;
          z.total_in += p - z.next_in_index;
          z.next_in_index = p;
          s.write = q;
          return s.inflate_flush(z, r);
        case BADCODE:
          r = Z_DATA_ERROR;
          s.bitb = b;
          s.bitk = k;
          z.avail_in = n;
          z.total_in += p - z.next_in_index;
          z.next_in_index = p;
          s.write = q;
          return s.inflate_flush(z, r);
        default:
          r = Z_STREAM_ERROR;
          s.bitb = b;
          s.bitk = k;
          z.avail_in = n;
          z.total_in += p - z.next_in_index;
          z.next_in_index = p;
          s.write = q;
          return s.inflate_flush(z, r);
      }
    }
  };
  that.free = function() {
  };
}
var border = [
  // Order of the bit length code lengths
  16,
  17,
  18,
  0,
  8,
  7,
  9,
  6,
  10,
  5,
  11,
  4,
  12,
  3,
  13,
  2,
  14,
  1,
  15
];
var TYPE = 0;
var LENS = 1;
var STORED = 2;
var TABLE = 3;
var BTREE = 4;
var DTREE = 5;
var CODES = 6;
var DRY = 7;
var DONELOCKS = 8;
var BADBLOCKS = 9;
function InfBlocks(z, w) {
  const that = this;
  let mode2 = TYPE;
  let left = 0;
  let table2 = 0;
  let index = 0;
  let blens;
  const bb = [0];
  const tb = [0];
  const codes = new InfCodes();
  let last = 0;
  let hufts = new Int32Array(MANY * 3);
  const check = 0;
  const inftree = new InfTree();
  that.bitk = 0;
  that.bitb = 0;
  that.win = new Uint8Array(w);
  that.end = w;
  that.read = 0;
  that.write = 0;
  that.reset = function(z2, c) {
    if (c)
      c[0] = check;
    if (mode2 == CODES) {
      codes.free(z2);
    }
    mode2 = TYPE;
    that.bitk = 0;
    that.bitb = 0;
    that.read = that.write = 0;
  };
  that.reset(z, null);
  that.inflate_flush = function(z2, r) {
    let n;
    let p;
    let q;
    p = z2.next_out_index;
    q = that.read;
    n = /* (int) */
    (q <= that.write ? that.write : that.end) - q;
    if (n > z2.avail_out)
      n = z2.avail_out;
    if (n !== 0 && r == Z_BUF_ERROR)
      r = Z_OK;
    z2.avail_out -= n;
    z2.total_out += n;
    z2.next_out.set(that.win.subarray(q, q + n), p);
    p += n;
    q += n;
    if (q == that.end) {
      q = 0;
      if (that.write == that.end)
        that.write = 0;
      n = that.write - q;
      if (n > z2.avail_out)
        n = z2.avail_out;
      if (n !== 0 && r == Z_BUF_ERROR)
        r = Z_OK;
      z2.avail_out -= n;
      z2.total_out += n;
      z2.next_out.set(that.win.subarray(q, q + n), p);
      p += n;
      q += n;
    }
    z2.next_out_index = p;
    that.read = q;
    return r;
  };
  that.proc = function(z2, r) {
    let t;
    let b;
    let k;
    let p;
    let n;
    let q;
    let m;
    let i;
    p = z2.next_in_index;
    n = z2.avail_in;
    b = that.bitb;
    k = that.bitk;
    q = that.write;
    m = /* (int) */
    q < that.read ? that.read - q - 1 : that.end - q;
    while (true) {
      let bl, bd, tl, td, bl_, bd_, tl_, td_;
      switch (mode2) {
        case TYPE:
          while (k < 3) {
            if (n !== 0) {
              r = Z_OK;
            } else {
              that.bitb = b;
              that.bitk = k;
              z2.avail_in = n;
              z2.total_in += p - z2.next_in_index;
              z2.next_in_index = p;
              that.write = q;
              return that.inflate_flush(z2, r);
            }
            n--;
            b |= (z2.read_byte(p++) & 255) << k;
            k += 8;
          }
          t = /* (int) */
          b & 7;
          last = t & 1;
          switch (t >>> 1) {
            case 0:
              b >>>= 3;
              k -= 3;
              t = k & 7;
              b >>>= t;
              k -= t;
              mode2 = LENS;
              break;
            case 1:
              bl = [];
              bd = [];
              tl = [[]];
              td = [[]];
              InfTree.inflate_trees_fixed(bl, bd, tl, td);
              codes.init(bl[0], bd[0], tl[0], 0, td[0], 0);
              b >>>= 3;
              k -= 3;
              mode2 = CODES;
              break;
            case 2:
              b >>>= 3;
              k -= 3;
              mode2 = TABLE;
              break;
            case 3:
              b >>>= 3;
              k -= 3;
              mode2 = BADBLOCKS;
              z2.msg = "invalid block type";
              r = Z_DATA_ERROR;
              that.bitb = b;
              that.bitk = k;
              z2.avail_in = n;
              z2.total_in += p - z2.next_in_index;
              z2.next_in_index = p;
              that.write = q;
              return that.inflate_flush(z2, r);
          }
          break;
        case LENS:
          while (k < 32) {
            if (n !== 0) {
              r = Z_OK;
            } else {
              that.bitb = b;
              that.bitk = k;
              z2.avail_in = n;
              z2.total_in += p - z2.next_in_index;
              z2.next_in_index = p;
              that.write = q;
              return that.inflate_flush(z2, r);
            }
            n--;
            b |= (z2.read_byte(p++) & 255) << k;
            k += 8;
          }
          if ((~b >>> 16 & 65535) != (b & 65535)) {
            mode2 = BADBLOCKS;
            z2.msg = "invalid stored block lengths";
            r = Z_DATA_ERROR;
            that.bitb = b;
            that.bitk = k;
            z2.avail_in = n;
            z2.total_in += p - z2.next_in_index;
            z2.next_in_index = p;
            that.write = q;
            return that.inflate_flush(z2, r);
          }
          left = b & 65535;
          b = k = 0;
          mode2 = left !== 0 ? STORED : last !== 0 ? DRY : TYPE;
          break;
        case STORED:
          if (n === 0) {
            that.bitb = b;
            that.bitk = k;
            z2.avail_in = n;
            z2.total_in += p - z2.next_in_index;
            z2.next_in_index = p;
            that.write = q;
            return that.inflate_flush(z2, r);
          }
          if (m === 0) {
            if (q == that.end && that.read !== 0) {
              q = 0;
              m = /* (int) */
              q < that.read ? that.read - q - 1 : that.end - q;
            }
            if (m === 0) {
              that.write = q;
              r = that.inflate_flush(z2, r);
              q = that.write;
              m = /* (int) */
              q < that.read ? that.read - q - 1 : that.end - q;
              if (q == that.end && that.read !== 0) {
                q = 0;
                m = /* (int) */
                q < that.read ? that.read - q - 1 : that.end - q;
              }
              if (m === 0) {
                that.bitb = b;
                that.bitk = k;
                z2.avail_in = n;
                z2.total_in += p - z2.next_in_index;
                z2.next_in_index = p;
                that.write = q;
                return that.inflate_flush(z2, r);
              }
            }
          }
          r = Z_OK;
          t = left;
          if (t > n)
            t = n;
          if (t > m)
            t = m;
          that.win.set(z2.read_buf(p, t), q);
          p += t;
          n -= t;
          q += t;
          m -= t;
          if ((left -= t) !== 0)
            break;
          mode2 = last !== 0 ? DRY : TYPE;
          break;
        case TABLE:
          while (k < 14) {
            if (n !== 0) {
              r = Z_OK;
            } else {
              that.bitb = b;
              that.bitk = k;
              z2.avail_in = n;
              z2.total_in += p - z2.next_in_index;
              z2.next_in_index = p;
              that.write = q;
              return that.inflate_flush(z2, r);
            }
            n--;
            b |= (z2.read_byte(p++) & 255) << k;
            k += 8;
          }
          table2 = t = b & 16383;
          if ((t & 31) > 29 || (t >> 5 & 31) > 29) {
            mode2 = BADBLOCKS;
            z2.msg = "too many length or distance symbols";
            r = Z_DATA_ERROR;
            that.bitb = b;
            that.bitk = k;
            z2.avail_in = n;
            z2.total_in += p - z2.next_in_index;
            z2.next_in_index = p;
            that.write = q;
            return that.inflate_flush(z2, r);
          }
          t = 258 + (t & 31) + (t >> 5 & 31);
          if (!blens || blens.length < t) {
            blens = [];
          } else {
            for (i = 0; i < t; i++) {
              blens[i] = 0;
            }
          }
          b >>>= 14;
          k -= 14;
          index = 0;
          mode2 = BTREE;
        case BTREE:
          while (index < 4 + (table2 >>> 10)) {
            while (k < 3) {
              if (n !== 0) {
                r = Z_OK;
              } else {
                that.bitb = b;
                that.bitk = k;
                z2.avail_in = n;
                z2.total_in += p - z2.next_in_index;
                z2.next_in_index = p;
                that.write = q;
                return that.inflate_flush(z2, r);
              }
              n--;
              b |= (z2.read_byte(p++) & 255) << k;
              k += 8;
            }
            blens[border[index++]] = b & 7;
            b >>>= 3;
            k -= 3;
          }
          while (index < 19) {
            blens[border[index++]] = 0;
          }
          bb[0] = 7;
          t = inftree.inflate_trees_bits(blens, bb, tb, hufts, z2);
          if (t != Z_OK) {
            r = t;
            if (r == Z_DATA_ERROR) {
              blens = null;
              mode2 = BADBLOCKS;
            }
            that.bitb = b;
            that.bitk = k;
            z2.avail_in = n;
            z2.total_in += p - z2.next_in_index;
            z2.next_in_index = p;
            that.write = q;
            return that.inflate_flush(z2, r);
          }
          index = 0;
          mode2 = DTREE;
        case DTREE:
          while (true) {
            t = table2;
            if (index >= 258 + (t & 31) + (t >> 5 & 31)) {
              break;
            }
            let j, c;
            t = bb[0];
            while (k < t) {
              if (n !== 0) {
                r = Z_OK;
              } else {
                that.bitb = b;
                that.bitk = k;
                z2.avail_in = n;
                z2.total_in += p - z2.next_in_index;
                z2.next_in_index = p;
                that.write = q;
                return that.inflate_flush(z2, r);
              }
              n--;
              b |= (z2.read_byte(p++) & 255) << k;
              k += 8;
            }
            t = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];
            c = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];
            if (c < 16) {
              b >>>= t;
              k -= t;
              blens[index++] = c;
            } else {
              i = c == 18 ? 7 : c - 14;
              j = c == 18 ? 11 : 3;
              while (k < t + i) {
                if (n !== 0) {
                  r = Z_OK;
                } else {
                  that.bitb = b;
                  that.bitk = k;
                  z2.avail_in = n;
                  z2.total_in += p - z2.next_in_index;
                  z2.next_in_index = p;
                  that.write = q;
                  return that.inflate_flush(z2, r);
                }
                n--;
                b |= (z2.read_byte(p++) & 255) << k;
                k += 8;
              }
              b >>>= t;
              k -= t;
              j += b & inflate_mask[i];
              b >>>= i;
              k -= i;
              i = index;
              t = table2;
              if (i + j > 258 + (t & 31) + (t >> 5 & 31) || c == 16 && i < 1) {
                blens = null;
                mode2 = BADBLOCKS;
                z2.msg = "invalid bit length repeat";
                r = Z_DATA_ERROR;
                that.bitb = b;
                that.bitk = k;
                z2.avail_in = n;
                z2.total_in += p - z2.next_in_index;
                z2.next_in_index = p;
                that.write = q;
                return that.inflate_flush(z2, r);
              }
              c = c == 16 ? blens[i - 1] : 0;
              do {
                blens[i++] = c;
              } while (--j !== 0);
              index = i;
            }
          }
          tb[0] = -1;
          bl_ = [];
          bd_ = [];
          tl_ = [];
          td_ = [];
          bl_[0] = 9;
          bd_[0] = 6;
          t = table2;
          t = inftree.inflate_trees_dynamic(257 + (t & 31), 1 + (t >> 5 & 31), blens, bl_, bd_, tl_, td_, hufts, z2);
          if (t != Z_OK) {
            if (t == Z_DATA_ERROR) {
              blens = null;
              mode2 = BADBLOCKS;
            }
            r = t;
            that.bitb = b;
            that.bitk = k;
            z2.avail_in = n;
            z2.total_in += p - z2.next_in_index;
            z2.next_in_index = p;
            that.write = q;
            return that.inflate_flush(z2, r);
          }
          codes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]);
          mode2 = CODES;
        case CODES:
          that.bitb = b;
          that.bitk = k;
          z2.avail_in = n;
          z2.total_in += p - z2.next_in_index;
          z2.next_in_index = p;
          that.write = q;
          if ((r = codes.proc(that, z2, r)) != Z_STREAM_END) {
            return that.inflate_flush(z2, r);
          }
          r = Z_OK;
          codes.free(z2);
          p = z2.next_in_index;
          n = z2.avail_in;
          b = that.bitb;
          k = that.bitk;
          q = that.write;
          m = /* (int) */
          q < that.read ? that.read - q - 1 : that.end - q;
          if (last === 0) {
            mode2 = TYPE;
            break;
          }
          mode2 = DRY;
        case DRY:
          that.write = q;
          r = that.inflate_flush(z2, r);
          q = that.write;
          m = /* (int) */
          q < that.read ? that.read - q - 1 : that.end - q;
          if (that.read != that.write) {
            that.bitb = b;
            that.bitk = k;
            z2.avail_in = n;
            z2.total_in += p - z2.next_in_index;
            z2.next_in_index = p;
            that.write = q;
            return that.inflate_flush(z2, r);
          }
          mode2 = DONELOCKS;
        case DONELOCKS:
          r = Z_STREAM_END;
          that.bitb = b;
          that.bitk = k;
          z2.avail_in = n;
          z2.total_in += p - z2.next_in_index;
          z2.next_in_index = p;
          that.write = q;
          return that.inflate_flush(z2, r);
        case BADBLOCKS:
          r = Z_DATA_ERROR;
          that.bitb = b;
          that.bitk = k;
          z2.avail_in = n;
          z2.total_in += p - z2.next_in_index;
          z2.next_in_index = p;
          that.write = q;
          return that.inflate_flush(z2, r);
        default:
          r = Z_STREAM_ERROR;
          that.bitb = b;
          that.bitk = k;
          z2.avail_in = n;
          z2.total_in += p - z2.next_in_index;
          z2.next_in_index = p;
          that.write = q;
          return that.inflate_flush(z2, r);
      }
    }
  };
  that.free = function(z2) {
    that.reset(z2, null);
    that.win = null;
    hufts = null;
  };
  that.set_dictionary = function(d, start, n) {
    that.win.set(d.subarray(start, start + n), 0);
    that.read = that.write = n;
  };
  that.sync_point = function() {
    return mode2 == LENS ? 1 : 0;
  };
}
var PRESET_DICT = 32;
var Z_DEFLATED = 8;
var METHOD = 0;
var FLAG = 1;
var DICT4 = 2;
var DICT3 = 3;
var DICT2 = 4;
var DICT1 = 5;
var DICT0 = 6;
var BLOCKS = 7;
var DONE = 12;
var BAD = 13;
var mark = [0, 0, 255, 255];
function Inflate() {
  const that = this;
  that.mode = 0;
  that.method = 0;
  that.was = [0];
  that.need = 0;
  that.marker = 0;
  that.wbits = 0;
  function inflateReset(z) {
    if (!z || !z.istate)
      return Z_STREAM_ERROR;
    z.total_in = z.total_out = 0;
    z.msg = null;
    z.istate.mode = BLOCKS;
    z.istate.blocks.reset(z, null);
    return Z_OK;
  }
  that.inflateEnd = function(z) {
    if (that.blocks)
      that.blocks.free(z);
    that.blocks = null;
    return Z_OK;
  };
  that.inflateInit = function(z, w) {
    z.msg = null;
    that.blocks = null;
    if (w < 8 || w > 15) {
      that.inflateEnd(z);
      return Z_STREAM_ERROR;
    }
    that.wbits = w;
    z.istate.blocks = new InfBlocks(z, 1 << w);
    inflateReset(z);
    return Z_OK;
  };
  that.inflate = function(z, f) {
    let r;
    let b;
    if (!z || !z.istate || !z.next_in)
      return Z_STREAM_ERROR;
    const istate = z.istate;
    f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;
    r = Z_BUF_ERROR;
    while (true) {
      switch (istate.mode) {
        case METHOD:
          if (z.avail_in === 0)
            return r;
          r = f;
          z.avail_in--;
          z.total_in++;
          if (((istate.method = z.read_byte(z.next_in_index++)) & 15) != Z_DEFLATED) {
            istate.mode = BAD;
            z.msg = "unknown compression method";
            istate.marker = 5;
            break;
          }
          if ((istate.method >> 4) + 8 > istate.wbits) {
            istate.mode = BAD;
            z.msg = "invalid win size";
            istate.marker = 5;
            break;
          }
          istate.mode = FLAG;
        case FLAG:
          if (z.avail_in === 0)
            return r;
          r = f;
          z.avail_in--;
          z.total_in++;
          b = z.read_byte(z.next_in_index++) & 255;
          if (((istate.method << 8) + b) % 31 !== 0) {
            istate.mode = BAD;
            z.msg = "incorrect header check";
            istate.marker = 5;
            break;
          }
          if ((b & PRESET_DICT) === 0) {
            istate.mode = BLOCKS;
            break;
          }
          istate.mode = DICT4;
        case DICT4:
          if (z.avail_in === 0)
            return r;
          r = f;
          z.avail_in--;
          z.total_in++;
          istate.need = (z.read_byte(z.next_in_index++) & 255) << 24 & 4278190080;
          istate.mode = DICT3;
        case DICT3:
          if (z.avail_in === 0)
            return r;
          r = f;
          z.avail_in--;
          z.total_in++;
          istate.need += (z.read_byte(z.next_in_index++) & 255) << 16 & 16711680;
          istate.mode = DICT2;
        case DICT2:
          if (z.avail_in === 0)
            return r;
          r = f;
          z.avail_in--;
          z.total_in++;
          istate.need += (z.read_byte(z.next_in_index++) & 255) << 8 & 65280;
          istate.mode = DICT1;
        case DICT1:
          if (z.avail_in === 0)
            return r;
          r = f;
          z.avail_in--;
          z.total_in++;
          istate.need += z.read_byte(z.next_in_index++) & 255;
          istate.mode = DICT0;
          return Z_NEED_DICT;
        case DICT0:
          istate.mode = BAD;
          z.msg = "need dictionary";
          istate.marker = 0;
          return Z_STREAM_ERROR;
        case BLOCKS:
          r = istate.blocks.proc(z, r);
          if (r == Z_DATA_ERROR) {
            istate.mode = BAD;
            istate.marker = 0;
            break;
          }
          if (r == Z_OK) {
            r = f;
          }
          if (r != Z_STREAM_END) {
            return r;
          }
          r = f;
          istate.blocks.reset(z, istate.was);
          istate.mode = DONE;
        case DONE:
          z.avail_in = 0;
          return Z_STREAM_END;
        case BAD:
          return Z_DATA_ERROR;
        default:
          return Z_STREAM_ERROR;
      }
    }
  };
  that.inflateSetDictionary = function(z, dictionary, dictLength) {
    let index = 0, length = dictLength;
    if (!z || !z.istate || z.istate.mode != DICT0)
      return Z_STREAM_ERROR;
    const istate = z.istate;
    if (length >= 1 << istate.wbits) {
      length = (1 << istate.wbits) - 1;
      index = dictLength - length;
    }
    istate.blocks.set_dictionary(dictionary, index, length);
    istate.mode = BLOCKS;
    return Z_OK;
  };
  that.inflateSync = function(z) {
    let n;
    let p;
    let m;
    let r, w;
    if (!z || !z.istate)
      return Z_STREAM_ERROR;
    const istate = z.istate;
    if (istate.mode != BAD) {
      istate.mode = BAD;
      istate.marker = 0;
    }
    if ((n = z.avail_in) === 0)
      return Z_BUF_ERROR;
    p = z.next_in_index;
    m = istate.marker;
    while (n !== 0 && m < 4) {
      if (z.read_byte(p) == mark[m]) {
        m++;
      } else if (z.read_byte(p) !== 0) {
        m = 0;
      } else {
        m = 4 - m;
      }
      p++;
      n--;
    }
    z.total_in += p - z.next_in_index;
    z.next_in_index = p;
    z.avail_in = n;
    istate.marker = m;
    if (m != 4) {
      return Z_DATA_ERROR;
    }
    r = z.total_in;
    w = z.total_out;
    inflateReset(z);
    z.total_in = r;
    z.total_out = w;
    istate.mode = BLOCKS;
    return Z_OK;
  };
  that.inflateSyncPoint = function(z) {
    if (!z || !z.istate || !z.istate.blocks)
      return Z_STREAM_ERROR;
    return z.istate.blocks.sync_point();
  };
}
function ZStream() {
}
ZStream.prototype = {
  inflateInit(bits) {
    const that = this;
    that.istate = new Inflate();
    if (!bits)
      bits = MAX_BITS;
    return that.istate.inflateInit(that, bits);
  },
  inflate(f) {
    const that = this;
    if (!that.istate)
      return Z_STREAM_ERROR;
    return that.istate.inflate(that, f);
  },
  inflateEnd() {
    const that = this;
    if (!that.istate)
      return Z_STREAM_ERROR;
    const ret = that.istate.inflateEnd(that);
    that.istate = null;
    return ret;
  },
  inflateSync() {
    const that = this;
    if (!that.istate)
      return Z_STREAM_ERROR;
    return that.istate.inflateSync(that);
  },
  inflateSetDictionary(dictionary, dictLength) {
    const that = this;
    if (!that.istate)
      return Z_STREAM_ERROR;
    return that.istate.inflateSetDictionary(that, dictionary, dictLength);
  },
  read_byte(start) {
    const that = this;
    return that.next_in[start];
  },
  read_buf(start, size) {
    const that = this;
    return that.next_in.subarray(start, start + size);
  }
};
function ZipInflate(options) {
  const that = this;
  const z = new ZStream();
  const bufsize = options && options.chunkSize ? Math.floor(options.chunkSize * 2) : 128 * 1024;
  const flush = Z_NO_FLUSH;
  const buf = new Uint8Array(bufsize);
  let nomoreinput = false;
  z.inflateInit();
  z.next_out = buf;
  that.append = function(data, onprogress) {
    const buffers = [];
    let err, array, lastIndex = 0, bufferIndex = 0, bufferSize = 0;
    if (data.length === 0)
      return;
    z.next_in_index = 0;
    z.next_in = data;
    z.avail_in = data.length;
    do {
      z.next_out_index = 0;
      z.avail_out = bufsize;
      if (z.avail_in === 0 && !nomoreinput) {
        z.next_in_index = 0;
        nomoreinput = true;
      }
      err = z.inflate(flush);
      if (nomoreinput && err === Z_BUF_ERROR) {
        if (z.avail_in !== 0)
          throw new Error("inflating: bad input");
      } else if (err !== Z_OK && err !== Z_STREAM_END)
        throw new Error("inflating: " + z.msg);
      if ((nomoreinput || err === Z_STREAM_END) && z.avail_in === data.length)
        throw new Error("inflating: bad input");
      if (z.next_out_index)
        if (z.next_out_index === bufsize)
          buffers.push(new Uint8Array(buf));
        else
          buffers.push(buf.subarray(0, z.next_out_index));
      bufferSize += z.next_out_index;
      if (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {
        onprogress(z.next_in_index);
        lastIndex = z.next_in_index;
      }
    } while (z.avail_in > 0 || z.avail_out === 0);
    if (buffers.length > 1) {
      array = new Uint8Array(bufferSize);
      buffers.forEach(function(chunk) {
        array.set(chunk, bufferIndex);
        bufferIndex += chunk.length;
      });
    } else {
      array = buffers[0] ? new Uint8Array(buffers[0]) : new Uint8Array();
    }
    return array;
  };
  that.flush = function() {
    z.inflateEnd();
  };
}

// node_modules/@zip.js/zip.js/lib/core/constants.js
var MAX_32_BITS = 4294967295;
var MAX_16_BITS = 65535;
var COMPRESSION_METHOD_DEFLATE = 8;
var COMPRESSION_METHOD_STORE = 0;
var COMPRESSION_METHOD_AES = 99;
var LOCAL_FILE_HEADER_SIGNATURE = 67324752;
var SPLIT_ZIP_FILE_SIGNATURE = 134695760;
var CENTRAL_FILE_HEADER_SIGNATURE = 33639248;
var END_OF_CENTRAL_DIR_SIGNATURE = 101010256;
var ZIP64_END_OF_CENTRAL_DIR_SIGNATURE = 101075792;
var ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE = 117853008;
var END_OF_CENTRAL_DIR_LENGTH = 22;
var ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH = 20;
var ZIP64_END_OF_CENTRAL_DIR_LENGTH = 56;
var ZIP64_END_OF_CENTRAL_DIR_TOTAL_LENGTH = END_OF_CENTRAL_DIR_LENGTH + ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH + ZIP64_END_OF_CENTRAL_DIR_LENGTH;
var EXTRAFIELD_TYPE_ZIP64 = 1;
var EXTRAFIELD_TYPE_AES = 39169;
var EXTRAFIELD_TYPE_NTFS = 10;
var EXTRAFIELD_TYPE_NTFS_TAG1 = 1;
var EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP = 21589;
var EXTRAFIELD_TYPE_UNICODE_PATH = 28789;
var EXTRAFIELD_TYPE_UNICODE_COMMENT = 25461;
var BITFLAG_ENCRYPTED = 1;
var BITFLAG_LEVEL = 6;
var BITFLAG_DATA_DESCRIPTOR = 8;
var BITFLAG_LANG_ENCODING_FLAG = 2048;
var FILE_ATTR_MSDOS_DIR_MASK = 16;
var DIRECTORY_SIGNATURE = "/";
var MAX_DATE = new Date(2107, 11, 31);
var MIN_DATE = new Date(1980, 0, 1);
var UNDEFINED_VALUE = void 0;
var UNDEFINED_TYPE = "undefined";
var FUNCTION_TYPE = "function";

// node_modules/@zip.js/zip.js/lib/core/streams/stream-adapter.js
var StreamAdapter = class {
  constructor(Codec) {
    return class extends TransformStream {
      constructor(_format, options) {
        const codec2 = new Codec(options);
        super({
          transform(chunk, controller) {
            controller.enqueue(codec2.append(chunk));
          },
          flush(controller) {
            const chunk = codec2.flush();
            if (chunk) {
              controller.enqueue(chunk);
            }
          }
        });
      }
    };
  }
};

// node_modules/@zip.js/zip.js/lib/core/configuration.js
var MINIMUM_CHUNK_SIZE = 64;
var maxWorkers = 2;
try {
  if (typeof navigator != UNDEFINED_TYPE && navigator.hardwareConcurrency) {
    maxWorkers = navigator.hardwareConcurrency;
  }
} catch (_error) {
}
var DEFAULT_CONFIGURATION = {
  chunkSize: 512 * 1024,
  maxWorkers,
  terminateWorkerTimeout: 5e3,
  useWebWorkers: true,
  useCompressionStream: true,
  workerScripts: UNDEFINED_VALUE,
  CompressionStreamNative: typeof CompressionStream != UNDEFINED_TYPE && CompressionStream,
  DecompressionStreamNative: typeof DecompressionStream != UNDEFINED_TYPE && DecompressionStream
};
var config = Object.assign({}, DEFAULT_CONFIGURATION);
function getConfiguration() {
  return config;
}
function getChunkSize(config2) {
  return Math.max(config2.chunkSize, MINIMUM_CHUNK_SIZE);
}
function configure(configuration) {
  const {
    baseURL,
    chunkSize,
    maxWorkers: maxWorkers2,
    terminateWorkerTimeout,
    useCompressionStream,
    useWebWorkers,
    Deflate,
    Inflate: Inflate2,
    CompressionStream: CompressionStream2,
    DecompressionStream: DecompressionStream2,
    workerScripts
  } = configuration;
  setIfDefined("baseURL", baseURL);
  setIfDefined("chunkSize", chunkSize);
  setIfDefined("maxWorkers", maxWorkers2);
  setIfDefined("terminateWorkerTimeout", terminateWorkerTimeout);
  setIfDefined("useCompressionStream", useCompressionStream);
  setIfDefined("useWebWorkers", useWebWorkers);
  if (Deflate) {
    config.CompressionStream = new StreamAdapter(Deflate);
  }
  if (Inflate2) {
    config.DecompressionStream = new StreamAdapter(Inflate2);
  }
  setIfDefined("CompressionStream", CompressionStream2);
  setIfDefined("DecompressionStream", DecompressionStream2);
  if (workerScripts !== UNDEFINED_VALUE) {
    const { deflate, inflate } = workerScripts;
    if (deflate || inflate) {
      if (!config.workerScripts) {
        config.workerScripts = {};
      }
    }
    if (deflate) {
      if (!Array.isArray(deflate)) {
        throw new Error("workerScripts.deflate must be an array");
      }
      config.workerScripts.deflate = deflate;
    }
    if (inflate) {
      if (!Array.isArray(inflate)) {
        throw new Error("workerScripts.inflate must be an array");
      }
      config.workerScripts.inflate = inflate;
    }
  }
}
function setIfDefined(propertyName, propertyValue) {
  if (propertyValue !== UNDEFINED_VALUE) {
    config[propertyName] = propertyValue;
  }
}

// node_modules/@zip.js/zip.js/lib/core/streams/codecs/crc32.js
var table = [];
for (let i = 0; i < 256; i++) {
  let t = i;
  for (let j = 0; j < 8; j++) {
    if (t & 1) {
      t = t >>> 1 ^ 3988292384;
    } else {
      t = t >>> 1;
    }
  }
  table[i] = t;
}
var Crc32 = class {
  constructor(crc) {
    this.crc = crc || -1;
  }
  append(data) {
    let crc = this.crc | 0;
    for (let offset = 0, length = data.length | 0; offset < length; offset++) {
      crc = crc >>> 8 ^ table[(crc ^ data[offset]) & 255];
    }
    this.crc = crc;
  }
  get() {
    return ~this.crc;
  }
};

// node_modules/@zip.js/zip.js/lib/core/streams/crc32-stream.js
var Crc32Stream = class extends TransformStream {
  constructor() {
    let stream;
    const crc32 = new Crc32();
    super({
      transform(chunk, controller) {
        crc32.append(chunk);
        controller.enqueue(chunk);
      },
      flush() {
        const value = new Uint8Array(4);
        const dataView = new DataView(value.buffer);
        dataView.setUint32(0, crc32.get());
        stream.value = value;
      }
    });
    stream = this;
  }
};

// node_modules/@zip.js/zip.js/lib/core/util/encode-text.js
function encodeText(value) {
  if (typeof TextEncoder == "undefined") {
    value = unescape(encodeURIComponent(value));
    const result = new Uint8Array(value.length);
    for (let i = 0; i < result.length; i++) {
      result[i] = value.charCodeAt(i);
    }
    return result;
  } else {
    return new TextEncoder().encode(value);
  }
}

// node_modules/@zip.js/zip.js/lib/core/streams/codecs/sjcl.js
var bitArray = {
  /**
   * Concatenate two bit arrays.
   * @param {bitArray} a1 The first array.
   * @param {bitArray} a2 The second array.
   * @return {bitArray} The concatenation of a1 and a2.
   */
  concat(a1, a2) {
    if (a1.length === 0 || a2.length === 0) {
      return a1.concat(a2);
    }
    const last = a1[a1.length - 1], shift = bitArray.getPartial(last);
    if (shift === 32) {
      return a1.concat(a2);
    } else {
      return bitArray._shiftRight(a2, shift, last | 0, a1.slice(0, a1.length - 1));
    }
  },
  /**
   * Find the length of an array of bits.
   * @param {bitArray} a The array.
   * @return {Number} The length of a, in bits.
   */
  bitLength(a) {
    const l = a.length;
    if (l === 0) {
      return 0;
    }
    const x = a[l - 1];
    return (l - 1) * 32 + bitArray.getPartial(x);
  },
  /**
   * Truncate an array.
   * @param {bitArray} a The array.
   * @param {Number} len The length to truncate to, in bits.
   * @return {bitArray} A new array, truncated to len bits.
   */
  clamp(a, len) {
    if (a.length * 32 < len) {
      return a;
    }
    a = a.slice(0, Math.ceil(len / 32));
    const l = a.length;
    len = len & 31;
    if (l > 0 && len) {
      a[l - 1] = bitArray.partial(len, a[l - 1] & 2147483648 >> len - 1, 1);
    }
    return a;
  },
  /**
   * Make a partial word for a bit array.
   * @param {Number} len The number of bits in the word.
   * @param {Number} x The bits.
   * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.
   * @return {Number} The partial word.
   */
  partial(len, x, _end) {
    if (len === 32) {
      return x;
    }
    return (_end ? x | 0 : x << 32 - len) + len * 1099511627776;
  },
  /**
   * Get the number of bits used by a partial word.
   * @param {Number} x The partial word.
   * @return {Number} The number of bits used by the partial word.
   */
  getPartial(x) {
    return Math.round(x / 1099511627776) || 32;
  },
  /** Shift an array right.
   * @param {bitArray} a The array to shift.
   * @param {Number} shift The number of bits to shift.
   * @param {Number} [carry=0] A byte to carry in
   * @param {bitArray} [out=[]] An array to prepend to the output.
   * @private
   */
  _shiftRight(a, shift, carry, out) {
    if (out === void 0) {
      out = [];
    }
    for (; shift >= 32; shift -= 32) {
      out.push(carry);
      carry = 0;
    }
    if (shift === 0) {
      return out.concat(a);
    }
    for (let i = 0; i < a.length; i++) {
      out.push(carry | a[i] >>> shift);
      carry = a[i] << 32 - shift;
    }
    const last2 = a.length ? a[a.length - 1] : 0;
    const shift2 = bitArray.getPartial(last2);
    out.push(bitArray.partial(shift + shift2 & 31, shift + shift2 > 32 ? carry : out.pop(), 1));
    return out;
  }
};
var codec = {
  bytes: {
    /** Convert from a bitArray to an array of bytes. */
    fromBits(arr) {
      const bl = bitArray.bitLength(arr);
      const byteLength = bl / 8;
      const out = new Uint8Array(byteLength);
      let tmp;
      for (let i = 0; i < byteLength; i++) {
        if ((i & 3) === 0) {
          tmp = arr[i / 4];
        }
        out[i] = tmp >>> 24;
        tmp <<= 8;
      }
      return out;
    },
    /** Convert from an array of bytes to a bitArray. */
    toBits(bytes) {
      const out = [];
      let i;
      let tmp = 0;
      for (i = 0; i < bytes.length; i++) {
        tmp = tmp << 8 | bytes[i];
        if ((i & 3) === 3) {
          out.push(tmp);
          tmp = 0;
        }
      }
      if (i & 3) {
        out.push(bitArray.partial(8 * (i & 3), tmp));
      }
      return out;
    }
  }
};
var hash = {};
hash.sha1 = class {
  constructor(hash2) {
    const sha1 = this;
    sha1.blockSize = 512;
    sha1._init = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    sha1._key = [1518500249, 1859775393, 2400959708, 3395469782];
    if (hash2) {
      sha1._h = hash2._h.slice(0);
      sha1._buffer = hash2._buffer.slice(0);
      sha1._length = hash2._length;
    } else {
      sha1.reset();
    }
  }
  /**
   * Reset the hash state.
   * @return this
   */
  reset() {
    const sha1 = this;
    sha1._h = sha1._init.slice(0);
    sha1._buffer = [];
    sha1._length = 0;
    return sha1;
  }
  /**
   * Input several words to the hash.
   * @param {bitArray|String} data the data to hash.
   * @return this
   */
  update(data) {
    const sha1 = this;
    if (typeof data === "string") {
      data = codec.utf8String.toBits(data);
    }
    const b = sha1._buffer = bitArray.concat(sha1._buffer, data);
    const ol = sha1._length;
    const nl = sha1._length = ol + bitArray.bitLength(data);
    if (nl > 9007199254740991) {
      throw new Error("Cannot hash more than 2^53 - 1 bits");
    }
    const c = new Uint32Array(b);
    let j = 0;
    for (let i = sha1.blockSize + ol - (sha1.blockSize + ol & sha1.blockSize - 1); i <= nl; i += sha1.blockSize) {
      sha1._block(c.subarray(16 * j, 16 * (j + 1)));
      j += 1;
    }
    b.splice(0, 16 * j);
    return sha1;
  }
  /**
   * Complete hashing and output the hash value.
   * @return {bitArray} The hash value, an array of 5 big-endian words. TODO
   */
  finalize() {
    const sha1 = this;
    let b = sha1._buffer;
    const h = sha1._h;
    b = bitArray.concat(b, [bitArray.partial(1, 1)]);
    for (let i = b.length + 2; i & 15; i++) {
      b.push(0);
    }
    b.push(Math.floor(sha1._length / 4294967296));
    b.push(sha1._length | 0);
    while (b.length) {
      sha1._block(b.splice(0, 16));
    }
    sha1.reset();
    return h;
  }
  /**
   * The SHA-1 logical functions f(0), f(1), ..., f(79).
   * @private
   */
  _f(t, b, c, d) {
    if (t <= 19) {
      return b & c | ~b & d;
    } else if (t <= 39) {
      return b ^ c ^ d;
    } else if (t <= 59) {
      return b & c | b & d | c & d;
    } else if (t <= 79) {
      return b ^ c ^ d;
    }
  }
  /**
   * Circular left-shift operator.
   * @private
   */
  _S(n, x) {
    return x << n | x >>> 32 - n;
  }
  /**
   * Perform one cycle of SHA-1.
   * @param {Uint32Array|bitArray} words one block of words.
   * @private
   */
  _block(words) {
    const sha1 = this;
    const h = sha1._h;
    const w = Array(80);
    for (let j = 0; j < 16; j++) {
      w[j] = words[j];
    }
    let a = h[0];
    let b = h[1];
    let c = h[2];
    let d = h[3];
    let e2 = h[4];
    for (let t = 0; t <= 79; t++) {
      if (t >= 16) {
        w[t] = sha1._S(1, w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16]);
      }
      const tmp = sha1._S(5, a) + sha1._f(t, b, c, d) + e2 + w[t] + sha1._key[Math.floor(t / 20)] | 0;
      e2 = d;
      d = c;
      c = sha1._S(30, b);
      b = a;
      a = tmp;
    }
    h[0] = h[0] + a | 0;
    h[1] = h[1] + b | 0;
    h[2] = h[2] + c | 0;
    h[3] = h[3] + d | 0;
    h[4] = h[4] + e2 | 0;
  }
};
var cipher = {};
cipher.aes = class {
  constructor(key) {
    const aes = this;
    aes._tables = [[[], [], [], [], []], [[], [], [], [], []]];
    if (!aes._tables[0][0][0]) {
      aes._precompute();
    }
    const sbox = aes._tables[0][4];
    const decTable = aes._tables[1];
    const keyLen = key.length;
    let i, encKey, decKey, rcon = 1;
    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {
      throw new Error("invalid aes key size");
    }
    aes._key = [encKey = key.slice(0), decKey = []];
    for (i = keyLen; i < 4 * keyLen + 28; i++) {
      let tmp = encKey[i - 1];
      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {
        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];
        if (i % keyLen === 0) {
          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;
          rcon = rcon << 1 ^ (rcon >> 7) * 283;
        }
      }
      encKey[i] = encKey[i - keyLen] ^ tmp;
    }
    for (let j = 0; i; j++, i--) {
      const tmp = encKey[j & 3 ? i : i - 4];
      if (i <= 4 || j < 4) {
        decKey[j] = tmp;
      } else {
        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];
      }
    }
  }
  // public
  /* Something like this might appear here eventually
  name: "AES",
  blockSize: 4,
  keySizes: [4,6,8],
  */
  /**
   * Encrypt an array of 4 big-endian words.
   * @param {Array} data The plaintext.
   * @return {Array} The ciphertext.
   */
  encrypt(data) {
    return this._crypt(data, 0);
  }
  /**
   * Decrypt an array of 4 big-endian words.
   * @param {Array} data The ciphertext.
   * @return {Array} The plaintext.
   */
  decrypt(data) {
    return this._crypt(data, 1);
  }
  /**
   * Expand the S-box tables.
   *
   * @private
   */
  _precompute() {
    const encTable = this._tables[0];
    const decTable = this._tables[1];
    const sbox = encTable[4];
    const sboxInv = decTable[4];
    const d = [];
    const th = [];
    let xInv, x2, x4, x8;
    for (let i = 0; i < 256; i++) {
      th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;
    }
    for (let x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {
      let s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;
      s = s >> 8 ^ s & 255 ^ 99;
      sbox[x] = s;
      sboxInv[s] = x;
      x8 = d[x4 = d[x2 = d[x]]];
      let tDec = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
      let tEnc = d[s] * 257 ^ s * 16843008;
      for (let i = 0; i < 4; i++) {
        encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
        decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;
      }
    }
    for (let i = 0; i < 5; i++) {
      encTable[i] = encTable[i].slice(0);
      decTable[i] = decTable[i].slice(0);
    }
  }
  /**
   * Encryption and decryption core.
   * @param {Array} input Four words to be encrypted or decrypted.
   * @param dir The direction, 0 for encrypt and 1 for decrypt.
   * @return {Array} The four encrypted or decrypted words.
   * @private
   */
  _crypt(input, dir) {
    if (input.length !== 4) {
      throw new Error("invalid aes block size");
    }
    const key = this._key[dir];
    const nInnerRounds = key.length / 4 - 2;
    const out = [0, 0, 0, 0];
    const table2 = this._tables[dir];
    const t0 = table2[0];
    const t1 = table2[1];
    const t2 = table2[2];
    const t3 = table2[3];
    const sbox = table2[4];
    let a = input[0] ^ key[0];
    let b = input[dir ? 3 : 1] ^ key[1];
    let c = input[2] ^ key[2];
    let d = input[dir ? 1 : 3] ^ key[3];
    let kIndex = 4;
    let a2, b2, c2;
    for (let i = 0; i < nInnerRounds; i++) {
      a2 = t0[a >>> 24] ^ t1[b >> 16 & 255] ^ t2[c >> 8 & 255] ^ t3[d & 255] ^ key[kIndex];
      b2 = t0[b >>> 24] ^ t1[c >> 16 & 255] ^ t2[d >> 8 & 255] ^ t3[a & 255] ^ key[kIndex + 1];
      c2 = t0[c >>> 24] ^ t1[d >> 16 & 255] ^ t2[a >> 8 & 255] ^ t3[b & 255] ^ key[kIndex + 2];
      d = t0[d >>> 24] ^ t1[a >> 16 & 255] ^ t2[b >> 8 & 255] ^ t3[c & 255] ^ key[kIndex + 3];
      kIndex += 4;
      a = a2;
      b = b2;
      c = c2;
    }
    for (let i = 0; i < 4; i++) {
      out[dir ? 3 & -i : i] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];
      a2 = a;
      a = b;
      b = c;
      c = d;
      d = a2;
    }
    return out;
  }
};
var random = {
  /** 
   * Generate random words with pure js, cryptographically not as strong & safe as native implementation.
   * @param {TypedArray} typedArray The array to fill.
   * @return {TypedArray} The random values.
   */
  getRandomValues(typedArray) {
    const words = new Uint32Array(typedArray.buffer);
    const r = (m_w) => {
      let m_z = 987654321;
      const mask = 4294967295;
      return function() {
        m_z = 36969 * (m_z & 65535) + (m_z >> 16) & mask;
        m_w = 18e3 * (m_w & 65535) + (m_w >> 16) & mask;
        const result = ((m_z << 16) + m_w & mask) / 4294967296 + 0.5;
        return result * (Math.random() > 0.5 ? 1 : -1);
      };
    };
    for (let i = 0, rcache; i < typedArray.length; i += 4) {
      const _r = r((rcache || Math.random()) * 4294967296);
      rcache = _r() * 987654071;
      words[i / 4] = _r() * 4294967296 | 0;
    }
    return typedArray;
  }
};
var mode = {};
mode.ctrGladman = class {
  constructor(prf, iv) {
    this._prf = prf;
    this._initIv = iv;
    this._iv = iv;
  }
  reset() {
    this._iv = this._initIv;
  }
  /** Input some data to calculate.
   * @param {bitArray} data the data to process, it must be intergral multiple of 128 bits unless it's the last.
   */
  update(data) {
    return this.calculate(this._prf, data, this._iv);
  }
  incWord(word) {
    if ((word >> 24 & 255) === 255) {
      let b1 = word >> 16 & 255;
      let b2 = word >> 8 & 255;
      let b3 = word & 255;
      if (b1 === 255) {
        b1 = 0;
        if (b2 === 255) {
          b2 = 0;
          if (b3 === 255) {
            b3 = 0;
          } else {
            ++b3;
          }
        } else {
          ++b2;
        }
      } else {
        ++b1;
      }
      word = 0;
      word += b1 << 16;
      word += b2 << 8;
      word += b3;
    } else {
      word += 1 << 24;
    }
    return word;
  }
  incCounter(counter) {
    if ((counter[0] = this.incWord(counter[0])) === 0) {
      counter[1] = this.incWord(counter[1]);
    }
  }
  calculate(prf, data, iv) {
    let l;
    if (!(l = data.length)) {
      return [];
    }
    const bl = bitArray.bitLength(data);
    for (let i = 0; i < l; i += 4) {
      this.incCounter(iv);
      const e2 = prf.encrypt(iv);
      data[i] ^= e2[0];
      data[i + 1] ^= e2[1];
      data[i + 2] ^= e2[2];
      data[i + 3] ^= e2[3];
    }
    return bitArray.clamp(data, bl);
  }
};
var misc = {
  importKey(password) {
    return new misc.hmacSha1(codec.bytes.toBits(password));
  },
  pbkdf2(prf, salt, count, length) {
    count = count || 1e4;
    if (length < 0 || count < 0) {
      throw new Error("invalid params to pbkdf2");
    }
    const byteLength = (length >> 5) + 1 << 2;
    let u, ui, i, j, k;
    const arrayBuffer = new ArrayBuffer(byteLength);
    const out = new DataView(arrayBuffer);
    let outLength = 0;
    const b = bitArray;
    salt = codec.bytes.toBits(salt);
    for (k = 1; outLength < (byteLength || 1); k++) {
      u = ui = prf.encrypt(b.concat(salt, [k]));
      for (i = 1; i < count; i++) {
        ui = prf.encrypt(ui);
        for (j = 0; j < ui.length; j++) {
          u[j] ^= ui[j];
        }
      }
      for (i = 0; outLength < (byteLength || 1) && i < u.length; i++) {
        out.setInt32(outLength, u[i]);
        outLength += 4;
      }
    }
    return arrayBuffer.slice(0, length / 8);
  }
};
misc.hmacSha1 = class {
  constructor(key) {
    const hmac = this;
    const Hash = hmac._hash = hash.sha1;
    const exKey = [[], []];
    hmac._baseHash = [new Hash(), new Hash()];
    const bs = hmac._baseHash[0].blockSize / 32;
    if (key.length > bs) {
      key = new Hash().update(key).finalize();
    }
    for (let i = 0; i < bs; i++) {
      exKey[0][i] = key[i] ^ 909522486;
      exKey[1][i] = key[i] ^ 1549556828;
    }
    hmac._baseHash[0].update(exKey[0]);
    hmac._baseHash[1].update(exKey[1]);
    hmac._resultHash = new Hash(hmac._baseHash[0]);
  }
  reset() {
    const hmac = this;
    hmac._resultHash = new hmac._hash(hmac._baseHash[0]);
    hmac._updated = false;
  }
  update(data) {
    const hmac = this;
    hmac._updated = true;
    hmac._resultHash.update(data);
  }
  digest() {
    const hmac = this;
    const w = hmac._resultHash.finalize();
    const result = new hmac._hash(hmac._baseHash[1]).update(w).finalize();
    hmac.reset();
    return result;
  }
  encrypt(data) {
    if (!this._updated) {
      this.update(data);
      return this.digest(data);
    } else {
      throw new Error("encrypt on already updated hmac called!");
    }
  }
};

// node_modules/@zip.js/zip.js/lib/core/streams/common-crypto.js
var GET_RANDOM_VALUES_SUPPORTED = typeof crypto != "undefined" && typeof crypto.getRandomValues == "function";
var ERR_INVALID_PASSWORD = "Invalid password";
var ERR_INVALID_SIGNATURE = "Invalid signature";
var ERR_ABORT_CHECK_PASSWORD = "zipjs-abort-check-password";
function getRandomValues(array) {
  if (GET_RANDOM_VALUES_SUPPORTED) {
    return crypto.getRandomValues(array);
  } else {
    return random.getRandomValues(array);
  }
}

// node_modules/@zip.js/zip.js/lib/core/streams/aes-crypto-stream.js
var BLOCK_LENGTH = 16;
var RAW_FORMAT = "raw";
var PBKDF2_ALGORITHM = { name: "PBKDF2" };
var HASH_ALGORITHM = { name: "HMAC" };
var HASH_FUNCTION = "SHA-1";
var BASE_KEY_ALGORITHM = Object.assign({ hash: HASH_ALGORITHM }, PBKDF2_ALGORITHM);
var DERIVED_BITS_ALGORITHM = Object.assign({ iterations: 1e3, hash: { name: HASH_FUNCTION } }, PBKDF2_ALGORITHM);
var DERIVED_BITS_USAGE = ["deriveBits"];
var SALT_LENGTH = [8, 12, 16];
var KEY_LENGTH = [16, 24, 32];
var SIGNATURE_LENGTH = 10;
var COUNTER_DEFAULT_VALUE = [0, 0, 0, 0];
var UNDEFINED_TYPE2 = "undefined";
var FUNCTION_TYPE2 = "function";
var CRYPTO_API_SUPPORTED = typeof crypto != UNDEFINED_TYPE2;
var subtle = CRYPTO_API_SUPPORTED && crypto.subtle;
var SUBTLE_API_SUPPORTED = CRYPTO_API_SUPPORTED && typeof subtle != UNDEFINED_TYPE2;
var codecBytes = codec.bytes;
var Aes = cipher.aes;
var CtrGladman = mode.ctrGladman;
var HmacSha1 = misc.hmacSha1;
var IMPORT_KEY_SUPPORTED = CRYPTO_API_SUPPORTED && SUBTLE_API_SUPPORTED && typeof subtle.importKey == FUNCTION_TYPE2;
var DERIVE_BITS_SUPPORTED = CRYPTO_API_SUPPORTED && SUBTLE_API_SUPPORTED && typeof subtle.deriveBits == FUNCTION_TYPE2;
var AESDecryptionStream = class extends TransformStream {
  constructor({ password, signed, encryptionStrength, checkPasswordOnly }) {
    super({
      start() {
        Object.assign(this, {
          ready: new Promise((resolve) => this.resolveReady = resolve),
          password,
          signed,
          strength: encryptionStrength - 1,
          pending: new Uint8Array()
        });
      },
      async transform(chunk, controller) {
        const aesCrypto = this;
        const {
          password: password2,
          strength,
          resolveReady,
          ready
        } = aesCrypto;
        if (password2) {
          await createDecryptionKeys(aesCrypto, strength, password2, subarray(chunk, 0, SALT_LENGTH[strength] + 2));
          chunk = subarray(chunk, SALT_LENGTH[strength] + 2);
          if (checkPasswordOnly) {
            controller.error(new Error(ERR_ABORT_CHECK_PASSWORD));
          } else {
            resolveReady();
          }
        } else {
          await ready;
        }
        const output = new Uint8Array(chunk.length - SIGNATURE_LENGTH - (chunk.length - SIGNATURE_LENGTH) % BLOCK_LENGTH);
        controller.enqueue(append(aesCrypto, chunk, output, 0, SIGNATURE_LENGTH, true));
      },
      async flush(controller) {
        const {
          signed: signed2,
          ctr,
          hmac,
          pending,
          ready
        } = this;
        await ready;
        const chunkToDecrypt = subarray(pending, 0, pending.length - SIGNATURE_LENGTH);
        const originalSignature = subarray(pending, pending.length - SIGNATURE_LENGTH);
        let decryptedChunkArray = new Uint8Array();
        if (chunkToDecrypt.length) {
          const encryptedChunk = toBits(codecBytes, chunkToDecrypt);
          hmac.update(encryptedChunk);
          const decryptedChunk = ctr.update(encryptedChunk);
          decryptedChunkArray = fromBits(codecBytes, decryptedChunk);
        }
        if (signed2) {
          const signature = subarray(fromBits(codecBytes, hmac.digest()), 0, SIGNATURE_LENGTH);
          for (let indexSignature = 0; indexSignature < SIGNATURE_LENGTH; indexSignature++) {
            if (signature[indexSignature] != originalSignature[indexSignature]) {
              throw new Error(ERR_INVALID_SIGNATURE);
            }
          }
        }
        controller.enqueue(decryptedChunkArray);
      }
    });
  }
};
var AESEncryptionStream = class extends TransformStream {
  constructor({ password, encryptionStrength }) {
    let stream;
    super({
      start() {
        Object.assign(this, {
          ready: new Promise((resolve) => this.resolveReady = resolve),
          password,
          strength: encryptionStrength - 1,
          pending: new Uint8Array()
        });
      },
      async transform(chunk, controller) {
        const aesCrypto = this;
        const {
          password: password2,
          strength,
          resolveReady,
          ready
        } = aesCrypto;
        let preamble = new Uint8Array();
        if (password2) {
          preamble = await createEncryptionKeys(aesCrypto, strength, password2);
          resolveReady();
        } else {
          await ready;
        }
        const output = new Uint8Array(preamble.length + chunk.length - chunk.length % BLOCK_LENGTH);
        output.set(preamble, 0);
        controller.enqueue(append(aesCrypto, chunk, output, preamble.length, 0));
      },
      async flush(controller) {
        const {
          ctr,
          hmac,
          pending,
          ready
        } = this;
        await ready;
        let encryptedChunkArray = new Uint8Array();
        if (pending.length) {
          const encryptedChunk = ctr.update(toBits(codecBytes, pending));
          hmac.update(encryptedChunk);
          encryptedChunkArray = fromBits(codecBytes, encryptedChunk);
        }
        stream.signature = fromBits(codecBytes, hmac.digest()).slice(0, SIGNATURE_LENGTH);
        controller.enqueue(concat(encryptedChunkArray, stream.signature));
      }
    });
    stream = this;
  }
};
function append(aesCrypto, input, output, paddingStart, paddingEnd, verifySignature) {
  const {
    ctr,
    hmac,
    pending
  } = aesCrypto;
  const inputLength = input.length - paddingEnd;
  if (pending.length) {
    input = concat(pending, input);
    output = expand(output, inputLength - inputLength % BLOCK_LENGTH);
  }
  let offset;
  for (offset = 0; offset <= inputLength - BLOCK_LENGTH; offset += BLOCK_LENGTH) {
    const inputChunk = toBits(codecBytes, subarray(input, offset, offset + BLOCK_LENGTH));
    if (verifySignature) {
      hmac.update(inputChunk);
    }
    const outputChunk = ctr.update(inputChunk);
    if (!verifySignature) {
      hmac.update(outputChunk);
    }
    output.set(fromBits(codecBytes, outputChunk), offset + paddingStart);
  }
  aesCrypto.pending = subarray(input, offset);
  return output;
}
async function createDecryptionKeys(decrypt2, strength, password, preamble) {
  const passwordVerificationKey = await createKeys(decrypt2, strength, password, subarray(preamble, 0, SALT_LENGTH[strength]));
  const passwordVerification = subarray(preamble, SALT_LENGTH[strength]);
  if (passwordVerificationKey[0] != passwordVerification[0] || passwordVerificationKey[1] != passwordVerification[1]) {
    throw new Error(ERR_INVALID_PASSWORD);
  }
}
async function createEncryptionKeys(encrypt2, strength, password) {
  const salt = getRandomValues(new Uint8Array(SALT_LENGTH[strength]));
  const passwordVerification = await createKeys(encrypt2, strength, password, salt);
  return concat(salt, passwordVerification);
}
async function createKeys(aesCrypto, strength, password, salt) {
  aesCrypto.password = null;
  const encodedPassword = encodeText(password);
  const baseKey = await importKey(RAW_FORMAT, encodedPassword, BASE_KEY_ALGORITHM, false, DERIVED_BITS_USAGE);
  const derivedBits = await deriveBits(Object.assign({ salt }, DERIVED_BITS_ALGORITHM), baseKey, 8 * (KEY_LENGTH[strength] * 2 + 2));
  const compositeKey = new Uint8Array(derivedBits);
  const key = toBits(codecBytes, subarray(compositeKey, 0, KEY_LENGTH[strength]));
  const authentication = toBits(codecBytes, subarray(compositeKey, KEY_LENGTH[strength], KEY_LENGTH[strength] * 2));
  const passwordVerification = subarray(compositeKey, KEY_LENGTH[strength] * 2);
  Object.assign(aesCrypto, {
    keys: {
      key,
      authentication,
      passwordVerification
    },
    ctr: new CtrGladman(new Aes(key), Array.from(COUNTER_DEFAULT_VALUE)),
    hmac: new HmacSha1(authentication)
  });
  return passwordVerification;
}
async function importKey(format, password, algorithm, extractable, keyUsages) {
  if (IMPORT_KEY_SUPPORTED) {
    try {
      return await subtle.importKey(format, password, algorithm, extractable, keyUsages);
    } catch (_error) {
      IMPORT_KEY_SUPPORTED = false;
      return misc.importKey(password);
    }
  } else {
    return misc.importKey(password);
  }
}
async function deriveBits(algorithm, baseKey, length) {
  if (DERIVE_BITS_SUPPORTED) {
    try {
      return await subtle.deriveBits(algorithm, baseKey, length);
    } catch (_error) {
      DERIVE_BITS_SUPPORTED = false;
      return misc.pbkdf2(baseKey, algorithm.salt, DERIVED_BITS_ALGORITHM.iterations, length);
    }
  } else {
    return misc.pbkdf2(baseKey, algorithm.salt, DERIVED_BITS_ALGORITHM.iterations, length);
  }
}
function concat(leftArray, rightArray) {
  let array = leftArray;
  if (leftArray.length + rightArray.length) {
    array = new Uint8Array(leftArray.length + rightArray.length);
    array.set(leftArray, 0);
    array.set(rightArray, leftArray.length);
  }
  return array;
}
function expand(inputArray, length) {
  if (length && length > inputArray.length) {
    const array = inputArray;
    inputArray = new Uint8Array(length);
    inputArray.set(array, 0);
  }
  return inputArray;
}
function subarray(array, begin, end) {
  return array.subarray(begin, end);
}
function fromBits(codecBytes2, chunk) {
  return codecBytes2.fromBits(chunk);
}
function toBits(codecBytes2, chunk) {
  return codecBytes2.toBits(chunk);
}

// node_modules/@zip.js/zip.js/lib/core/streams/zip-crypto-stream.js
var HEADER_LENGTH = 12;
var ZipCryptoDecryptionStream = class extends TransformStream {
  constructor({ password, passwordVerification, checkPasswordOnly }) {
    super({
      start() {
        Object.assign(this, {
          password,
          passwordVerification
        });
        createKeys2(this, password);
      },
      transform(chunk, controller) {
        const zipCrypto = this;
        if (zipCrypto.password) {
          const decryptedHeader = decrypt(zipCrypto, chunk.subarray(0, HEADER_LENGTH));
          zipCrypto.password = null;
          if (decryptedHeader[HEADER_LENGTH - 1] != zipCrypto.passwordVerification) {
            throw new Error(ERR_INVALID_PASSWORD);
          }
          chunk = chunk.subarray(HEADER_LENGTH);
        }
        if (checkPasswordOnly) {
          controller.error(new Error(ERR_ABORT_CHECK_PASSWORD));
        } else {
          controller.enqueue(decrypt(zipCrypto, chunk));
        }
      }
    });
  }
};
var ZipCryptoEncryptionStream = class extends TransformStream {
  constructor({ password, passwordVerification }) {
    super({
      start() {
        Object.assign(this, {
          password,
          passwordVerification
        });
        createKeys2(this, password);
      },
      transform(chunk, controller) {
        const zipCrypto = this;
        let output;
        let offset;
        if (zipCrypto.password) {
          zipCrypto.password = null;
          const header = getRandomValues(new Uint8Array(HEADER_LENGTH));
          header[HEADER_LENGTH - 1] = zipCrypto.passwordVerification;
          output = new Uint8Array(chunk.length + header.length);
          output.set(encrypt(zipCrypto, header), 0);
          offset = HEADER_LENGTH;
        } else {
          output = new Uint8Array(chunk.length);
          offset = 0;
        }
        output.set(encrypt(zipCrypto, chunk), offset);
        controller.enqueue(output);
      }
    });
  }
};
function decrypt(target, input) {
  const output = new Uint8Array(input.length);
  for (let index = 0; index < input.length; index++) {
    output[index] = getByte(target) ^ input[index];
    updateKeys(target, output[index]);
  }
  return output;
}
function encrypt(target, input) {
  const output = new Uint8Array(input.length);
  for (let index = 0; index < input.length; index++) {
    output[index] = getByte(target) ^ input[index];
    updateKeys(target, input[index]);
  }
  return output;
}
function createKeys2(target, password) {
  const keys = [305419896, 591751049, 878082192];
  Object.assign(target, {
    keys,
    crcKey0: new Crc32(keys[0]),
    crcKey2: new Crc32(keys[2])
  });
  for (let index = 0; index < password.length; index++) {
    updateKeys(target, password.charCodeAt(index));
  }
}
function updateKeys(target, byte) {
  let [key0, key1, key2] = target.keys;
  target.crcKey0.append([byte]);
  key0 = ~target.crcKey0.get();
  key1 = getInt32(Math.imul(getInt32(key1 + getInt8(key0)), 134775813) + 1);
  target.crcKey2.append([key1 >>> 24]);
  key2 = ~target.crcKey2.get();
  target.keys = [key0, key1, key2];
}
function getByte(target) {
  const temp = target.keys[2] | 2;
  return getInt8(Math.imul(temp, temp ^ 1) >>> 8);
}
function getInt8(number) {
  return number & 255;
}
function getInt32(number) {
  return number & 4294967295;
}

// node_modules/@zip.js/zip.js/lib/core/streams/zip-entry-stream.js
var COMPRESSION_FORMAT = "deflate-raw";
var DeflateStream = class extends TransformStream {
  constructor(options, { chunkSize, CompressionStream: CompressionStream2, CompressionStreamNative }) {
    super({});
    const { compressed, encrypted, useCompressionStream, zipCrypto, signed, level } = options;
    const stream = this;
    let crc32Stream, encryptionStream;
    let readable = filterEmptyChunks(super.readable);
    if ((!encrypted || zipCrypto) && signed) {
      crc32Stream = new Crc32Stream();
      readable = pipeThrough(readable, crc32Stream);
    }
    if (compressed) {
      readable = pipeThroughCommpressionStream(readable, useCompressionStream, { level, chunkSize }, CompressionStreamNative, CompressionStream2);
    }
    if (encrypted) {
      if (zipCrypto) {
        readable = pipeThrough(readable, new ZipCryptoEncryptionStream(options));
      } else {
        encryptionStream = new AESEncryptionStream(options);
        readable = pipeThrough(readable, encryptionStream);
      }
    }
    setReadable(stream, readable, async () => {
      let signature;
      if (encrypted && !zipCrypto) {
        signature = encryptionStream.signature;
      }
      if ((!encrypted || zipCrypto) && signed) {
        signature = new DataView(crc32Stream.value.buffer).getUint32(0);
      }
      stream.signature = signature;
    });
  }
};
var InflateStream = class extends TransformStream {
  constructor(options, { chunkSize, DecompressionStream: DecompressionStream2, DecompressionStreamNative }) {
    super({});
    const { zipCrypto, encrypted, signed, signature, compressed, useCompressionStream } = options;
    let crc32Stream, decryptionStream;
    let readable = filterEmptyChunks(super.readable);
    if (encrypted) {
      if (zipCrypto) {
        readable = pipeThrough(readable, new ZipCryptoDecryptionStream(options));
      } else {
        decryptionStream = new AESDecryptionStream(options);
        readable = pipeThrough(readable, decryptionStream);
      }
    }
    if (compressed) {
      readable = pipeThroughCommpressionStream(readable, useCompressionStream, { chunkSize }, DecompressionStreamNative, DecompressionStream2);
    }
    if ((!encrypted || zipCrypto) && signed) {
      crc32Stream = new Crc32Stream();
      readable = pipeThrough(readable, crc32Stream);
    }
    setReadable(this, readable, async () => {
      if ((!encrypted || zipCrypto) && signed) {
        const dataViewSignature = new DataView(crc32Stream.value.buffer);
        if (signature != dataViewSignature.getUint32(0, false)) {
          throw new Error(ERR_INVALID_SIGNATURE);
        }
      }
    });
  }
};
function filterEmptyChunks(readable) {
  return pipeThrough(readable, new TransformStream({
    transform(chunk, controller) {
      if (chunk && chunk.length) {
        controller.enqueue(chunk);
      }
    }
  }));
}
function setReadable(stream, readable, flush) {
  readable = pipeThrough(readable, new TransformStream({ flush }));
  Object.defineProperty(stream, "readable", {
    get() {
      return readable;
    }
  });
}
function pipeThroughCommpressionStream(readable, useCompressionStream, options, CodecStreamNative, CodecStream2) {
  try {
    const CompressionStream2 = useCompressionStream && CodecStreamNative ? CodecStreamNative : CodecStream2;
    readable = pipeThrough(readable, new CompressionStream2(COMPRESSION_FORMAT, options));
  } catch (error) {
    if (useCompressionStream) {
      readable = pipeThrough(readable, new CodecStream2(COMPRESSION_FORMAT, options));
    } else {
      throw error;
    }
  }
  return readable;
}
function pipeThrough(readable, transformStream) {
  return readable.pipeThrough(transformStream);
}

// node_modules/@zip.js/zip.js/lib/core/streams/codec-stream.js
var MESSAGE_EVENT_TYPE = "message";
var MESSAGE_START = "start";
var MESSAGE_PULL = "pull";
var MESSAGE_DATA = "data";
var MESSAGE_ACK_DATA = "ack";
var MESSAGE_CLOSE = "close";
var CODEC_DEFLATE = "deflate";
var CODEC_INFLATE = "inflate";
var CodecStream = class extends TransformStream {
  constructor(options, config2) {
    super({});
    const codec2 = this;
    const { codecType } = options;
    let Stream2;
    if (codecType.startsWith(CODEC_DEFLATE)) {
      Stream2 = DeflateStream;
    } else if (codecType.startsWith(CODEC_INFLATE)) {
      Stream2 = InflateStream;
    }
    let size = 0;
    const stream = new Stream2(options, config2);
    const readable = super.readable;
    const transformStream = new TransformStream({
      transform(chunk, controller) {
        if (chunk && chunk.length) {
          size += chunk.length;
          controller.enqueue(chunk);
        }
      },
      flush() {
        const { signature } = stream;
        Object.assign(codec2, {
          signature,
          size
        });
      }
    });
    Object.defineProperty(codec2, "readable", {
      get() {
        return readable.pipeThrough(stream).pipeThrough(transformStream);
      }
    });
  }
};

// node_modules/@zip.js/zip.js/lib/core/codec-worker.js
var WEB_WORKERS_SUPPORTED = typeof Worker != UNDEFINED_TYPE;
var CodecWorker = class {
  constructor(workerData, { readable, writable }, { options, config: config2, streamOptions, useWebWorkers, transferStreams, scripts }, onTaskFinished) {
    const { signal } = streamOptions;
    Object.assign(workerData, {
      busy: true,
      readable: readable.pipeThrough(new ProgressWatcherStream(readable, streamOptions, config2), { signal }),
      writable,
      options: Object.assign({}, options),
      scripts,
      transferStreams,
      terminate() {
        const { worker, busy } = workerData;
        if (worker && !busy) {
          worker.terminate();
          workerData.interface = null;
        }
      },
      onTaskFinished() {
        workerData.busy = false;
        onTaskFinished(workerData);
      }
    });
    return (useWebWorkers && WEB_WORKERS_SUPPORTED ? createWebWorkerInterface : createWorkerInterface)(workerData, config2);
  }
};
var ProgressWatcherStream = class extends TransformStream {
  constructor(readableSource, { onstart, onprogress, size, onend }, { chunkSize }) {
    let chunkOffset = 0;
    super({
      start() {
        if (onstart) {
          callHandler(onstart, size);
        }
      },
      async transform(chunk, controller) {
        chunkOffset += chunk.length;
        if (onprogress) {
          await callHandler(onprogress, chunkOffset, size);
        }
        controller.enqueue(chunk);
      },
      flush() {
        readableSource.size = chunkOffset;
        if (onend) {
          callHandler(onend, chunkOffset);
        }
      }
    }, { highWaterMark: 1, size: () => chunkSize });
  }
};
async function callHandler(handler, ...parameters) {
  try {
    await handler(...parameters);
  } catch (_error) {
  }
}
function createWorkerInterface(workerData, config2) {
  return {
    run: () => runWorker(workerData, config2)
  };
}
function createWebWorkerInterface(workerData, { baseURL, chunkSize }) {
  if (!workerData.interface) {
    Object.assign(workerData, {
      worker: getWebWorker(workerData.scripts[0], baseURL, workerData),
      interface: {
        run: () => runWebWorker(workerData, { chunkSize })
      }
    });
  }
  return workerData.interface;
}
async function runWorker({ options, readable, writable, onTaskFinished }, config2) {
  const codecStream = new CodecStream(options, config2);
  try {
    await readable.pipeThrough(codecStream).pipeTo(writable, { preventClose: true, preventAbort: true });
    const {
      signature,
      size
    } = codecStream;
    return {
      signature,
      size
    };
  } finally {
    onTaskFinished();
  }
}
async function runWebWorker(workerData, config2) {
  let resolveResult, rejectResult;
  const result = new Promise((resolve, reject) => {
    resolveResult = resolve;
    rejectResult = reject;
  });
  Object.assign(workerData, {
    reader: null,
    writer: null,
    resolveResult,
    rejectResult,
    result
  });
  const { readable, options, scripts } = workerData;
  const { writable, closed } = watchClosedStream(workerData.writable);
  const streamsTransferred = sendMessage({
    type: MESSAGE_START,
    scripts: scripts.slice(1),
    options,
    config: config2,
    readable,
    writable
  }, workerData);
  if (!streamsTransferred) {
    Object.assign(workerData, {
      reader: readable.getReader(),
      writer: writable.getWriter()
    });
  }
  const resultValue = await result;
  try {
    await writable.getWriter().close();
  } catch (_error) {
  }
  await closed;
  return resultValue;
}
function watchClosedStream(writableSource) {
  const writer = writableSource.getWriter();
  let resolveStreamClosed;
  const closed = new Promise((resolve) => resolveStreamClosed = resolve);
  const writable = new WritableStream({
    async write(chunk) {
      await writer.ready;
      await writer.write(chunk);
    },
    close() {
      writer.releaseLock();
      resolveStreamClosed();
    },
    abort(reason) {
      return writer.abort(reason);
    }
  });
  return { writable, closed };
}
var classicWorkersSupported = true;
var transferStreamsSupported = true;
function getWebWorker(url2, baseURL, workerData) {
  const workerOptions = { type: "module" };
  let scriptUrl, worker;
  if (typeof url2 == FUNCTION_TYPE) {
    url2 = url2();
  }
  try {
    scriptUrl = new URL(url2, baseURL);
  } catch (_error) {
    scriptUrl = url2;
  }
  if (classicWorkersSupported) {
    try {
      worker = new Worker(scriptUrl);
    } catch (_error) {
      classicWorkersSupported = false;
      worker = new Worker(scriptUrl, workerOptions);
    }
  } else {
    worker = new Worker(scriptUrl, workerOptions);
  }
  worker.addEventListener(MESSAGE_EVENT_TYPE, (event) => onMessage(event, workerData));
  return worker;
}
function sendMessage(message, { worker, writer, onTaskFinished, transferStreams }) {
  try {
    let { value, readable, writable } = message;
    const transferables = [];
    if (value) {
      message.value = value.buffer;
      transferables.push(message.value);
    }
    if (transferStreams && transferStreamsSupported) {
      if (readable) {
        transferables.push(readable);
      }
      if (writable) {
        transferables.push(writable);
      }
    } else {
      message.readable = message.writable = null;
    }
    if (transferables.length) {
      try {
        worker.postMessage(message, transferables);
        return true;
      } catch (_error) {
        transferStreamsSupported = false;
        message.readable = message.writable = null;
        worker.postMessage(message);
      }
    } else {
      worker.postMessage(message);
    }
  } catch (error) {
    if (writer) {
      writer.releaseLock();
    }
    onTaskFinished();
    throw error;
  }
}
async function onMessage({ data }, workerData) {
  const { type, value, messageId, result, error } = data;
  const { reader, writer, resolveResult, rejectResult, onTaskFinished } = workerData;
  try {
    if (error) {
      const { message, stack, code, name } = error;
      const responseError = new Error(message);
      Object.assign(responseError, { stack, code, name });
      close(responseError);
    } else {
      if (type == MESSAGE_PULL) {
        const { value: value2, done } = await reader.read();
        sendMessage({ type: MESSAGE_DATA, value: value2, done, messageId }, workerData);
      }
      if (type == MESSAGE_DATA) {
        await writer.ready;
        await writer.write(new Uint8Array(value));
        sendMessage({ type: MESSAGE_ACK_DATA, messageId }, workerData);
      }
      if (type == MESSAGE_CLOSE) {
        close(null, result);
      }
    }
  } catch (error2) {
    close(error2);
  }
  function close(error2, result2) {
    if (error2) {
      rejectResult(error2);
    } else {
      resolveResult(result2);
    }
    if (writer) {
      writer.releaseLock();
    }
    onTaskFinished();
  }
}

// node_modules/@zip.js/zip.js/lib/core/codec-pool.js
var pool = [];
var pendingRequests = [];
var indexWorker = 0;
async function runWorker2(stream, workerOptions) {
  const { options, config: config2 } = workerOptions;
  const { transferStreams, useWebWorkers, useCompressionStream, codecType, compressed, signed, encrypted } = options;
  const { workerScripts, maxWorkers: maxWorkers2, terminateWorkerTimeout } = config2;
  workerOptions.transferStreams = transferStreams || transferStreams === UNDEFINED_VALUE;
  const streamCopy = !compressed && !signed && !encrypted && !workerOptions.transferStreams;
  workerOptions.useWebWorkers = !streamCopy && (useWebWorkers || useWebWorkers === UNDEFINED_VALUE && config2.useWebWorkers);
  workerOptions.scripts = workerOptions.useWebWorkers && workerScripts ? workerScripts[codecType] : [];
  options.useCompressionStream = useCompressionStream || useCompressionStream === UNDEFINED_VALUE && config2.useCompressionStream;
  let worker;
  const workerData = pool.find((workerData2) => !workerData2.busy);
  if (workerData) {
    clearTerminateTimeout(workerData);
    worker = new CodecWorker(workerData, stream, workerOptions, onTaskFinished);
  } else if (pool.length < maxWorkers2) {
    const workerData2 = { indexWorker };
    indexWorker++;
    pool.push(workerData2);
    worker = new CodecWorker(workerData2, stream, workerOptions, onTaskFinished);
  } else {
    worker = await new Promise((resolve) => pendingRequests.push({ resolve, stream, workerOptions }));
  }
  return worker.run();
  function onTaskFinished(workerData2) {
    if (pendingRequests.length) {
      const [{ resolve, stream: stream2, workerOptions: workerOptions2 }] = pendingRequests.splice(0, 1);
      resolve(new CodecWorker(workerData2, stream2, workerOptions2, onTaskFinished));
    } else if (workerData2.worker) {
      clearTerminateTimeout(workerData2);
      if (Number.isFinite(terminateWorkerTimeout) && terminateWorkerTimeout >= 0) {
        workerData2.terminateTimeout = setTimeout(() => {
          pool = pool.filter((data) => data != workerData2);
          workerData2.terminate();
        }, terminateWorkerTimeout);
      }
    } else {
      pool = pool.filter((data) => data != workerData2);
    }
  }
}
function clearTerminateTimeout(workerData) {
  const { terminateTimeout } = workerData;
  if (terminateTimeout) {
    clearTimeout(terminateTimeout);
    workerData.terminateTimeout = null;
  }
}

// node_modules/@zip.js/zip.js/lib/core/io.js
var ERR_ITERATOR_COMPLETED_TOO_SOON = "Writer iterator completed too soon";
var HTTP_HEADER_CONTENT_TYPE = "Content-Type";
var DEFAULT_CHUNK_SIZE = 64 * 1024;
var PROPERTY_NAME_WRITABLE = "writable";
var Stream = class {
  constructor() {
    this.size = 0;
  }
  init() {
    this.initialized = true;
  }
};
var Reader = class extends Stream {
  get readable() {
    const reader = this;
    const { chunkSize = DEFAULT_CHUNK_SIZE } = reader;
    const readable = new ReadableStream({
      start() {
        this.chunkOffset = 0;
      },
      async pull(controller) {
        const { offset = 0, size, diskNumberStart } = readable;
        const { chunkOffset } = this;
        controller.enqueue(await readUint8Array(reader, offset + chunkOffset, Math.min(chunkSize, size - chunkOffset), diskNumberStart));
        if (chunkOffset + chunkSize > size) {
          controller.close();
        } else {
          this.chunkOffset += chunkSize;
        }
      }
    });
    return readable;
  }
};
var BlobReader = class extends Reader {
  constructor(blob) {
    super();
    Object.assign(this, {
      blob,
      size: blob.size
    });
  }
  async readUint8Array(offset, length) {
    const reader = this;
    const offsetEnd = offset + length;
    const blob = offset || offsetEnd < reader.size ? reader.blob.slice(offset, offsetEnd) : reader.blob;
    let arrayBuffer = await blob.arrayBuffer();
    if (arrayBuffer.byteLength > length) {
      arrayBuffer = arrayBuffer.slice(offset, offsetEnd);
    }
    return new Uint8Array(arrayBuffer);
  }
};
var BlobWriter = class extends Stream {
  constructor(contentType) {
    super();
    const writer = this;
    const transformStream = new TransformStream();
    const headers = [];
    if (contentType) {
      headers.push([HTTP_HEADER_CONTENT_TYPE, contentType]);
    }
    Object.defineProperty(writer, PROPERTY_NAME_WRITABLE, {
      get() {
        return transformStream.writable;
      }
    });
    writer.blob = new Response(transformStream.readable, { headers }).blob();
  }
  getData() {
    return this.blob;
  }
};
var TextWriter = class extends BlobWriter {
  constructor(encoding) {
    super(encoding);
    Object.assign(this, {
      encoding,
      utf8: !encoding || encoding.toLowerCase() == "utf-8"
    });
  }
  async getData() {
    const {
      encoding,
      utf8
    } = this;
    const blob = await super.getData();
    if (blob.text && utf8) {
      return blob.text();
    } else {
      const reader = new FileReader();
      return new Promise((resolve, reject) => {
        Object.assign(reader, {
          onload: ({ target }) => resolve(target.result),
          onerror: () => reject(reader.error)
        });
        reader.readAsText(blob, encoding);
      });
    }
  }
};
var SplitDataReader = class extends Reader {
  constructor(readers) {
    super();
    this.readers = readers;
  }
  async init() {
    const reader = this;
    const { readers } = reader;
    reader.lastDiskNumber = 0;
    reader.lastDiskOffset = 0;
    await Promise.all(readers.map(async (diskReader, indexDiskReader) => {
      await diskReader.init();
      if (indexDiskReader != readers.length - 1) {
        reader.lastDiskOffset += diskReader.size;
      }
      reader.size += diskReader.size;
    }));
    super.init();
  }
  async readUint8Array(offset, length, diskNumber = 0) {
    const reader = this;
    const { readers } = this;
    let result;
    let currentDiskNumber = diskNumber;
    if (currentDiskNumber == -1) {
      currentDiskNumber = readers.length - 1;
    }
    let currentReaderOffset = offset;
    while (currentReaderOffset >= readers[currentDiskNumber].size) {
      currentReaderOffset -= readers[currentDiskNumber].size;
      currentDiskNumber++;
    }
    const currentReader = readers[currentDiskNumber];
    const currentReaderSize = currentReader.size;
    if (currentReaderOffset + length <= currentReaderSize) {
      result = await readUint8Array(currentReader, currentReaderOffset, length);
    } else {
      const chunkLength = currentReaderSize - currentReaderOffset;
      result = new Uint8Array(length);
      result.set(await readUint8Array(currentReader, currentReaderOffset, chunkLength));
      result.set(await reader.readUint8Array(offset + chunkLength, length - chunkLength, diskNumber), chunkLength);
    }
    reader.lastDiskNumber = Math.max(currentDiskNumber, reader.lastDiskNumber);
    return result;
  }
};
var SplitDataWriter = class extends Stream {
  constructor(writerGenerator, maxSize = 4294967295) {
    super();
    const zipWriter = this;
    Object.assign(zipWriter, {
      diskNumber: 0,
      diskOffset: 0,
      size: 0,
      maxSize,
      availableSize: maxSize
    });
    let diskSourceWriter, diskWritable, diskWriter;
    const writable = new WritableStream({
      async write(chunk) {
        const { availableSize } = zipWriter;
        if (!diskWriter) {
          const { value, done } = await writerGenerator.next();
          if (done && !value) {
            throw new Error(ERR_ITERATOR_COMPLETED_TOO_SOON);
          } else {
            diskSourceWriter = value;
            diskSourceWriter.size = 0;
            if (diskSourceWriter.maxSize) {
              zipWriter.maxSize = diskSourceWriter.maxSize;
            }
            zipWriter.availableSize = zipWriter.maxSize;
            await initStream(diskSourceWriter);
            diskWritable = value.writable;
            diskWriter = diskWritable.getWriter();
          }
          await this.write(chunk);
        } else if (chunk.length >= availableSize) {
          await writeChunk(chunk.slice(0, availableSize));
          await closeDisk();
          zipWriter.diskOffset += diskSourceWriter.size;
          zipWriter.diskNumber++;
          diskWriter = null;
          await this.write(chunk.slice(availableSize));
        } else {
          await writeChunk(chunk);
        }
      },
      async close() {
        await diskWriter.ready;
        await closeDisk();
      }
    });
    Object.defineProperty(zipWriter, PROPERTY_NAME_WRITABLE, {
      get() {
        return writable;
      }
    });
    async function writeChunk(chunk) {
      const chunkLength = chunk.length;
      if (chunkLength) {
        await diskWriter.ready;
        await diskWriter.write(chunk);
        diskSourceWriter.size += chunkLength;
        zipWriter.size += chunkLength;
        zipWriter.availableSize -= chunkLength;
      }
    }
    async function closeDisk() {
      diskWritable.size = diskSourceWriter.size;
      await diskWriter.close();
    }
  }
};
async function initStream(stream, initSize) {
  if (stream.init && !stream.initialized) {
    await stream.init(initSize);
  }
}
function initReader(reader) {
  if (Array.isArray(reader)) {
    reader = new SplitDataReader(reader);
  }
  if (reader instanceof ReadableStream) {
    reader = {
      readable: reader
    };
  }
  return reader;
}
function initWriter(writer) {
  if (writer.writable === UNDEFINED_VALUE && typeof writer.next == FUNCTION_TYPE) {
    writer = new SplitDataWriter(writer);
  }
  if (writer instanceof WritableStream) {
    writer = {
      writable: writer
    };
  }
  const { writable } = writer;
  if (writable.size === UNDEFINED_VALUE) {
    writable.size = 0;
  }
  const splitZipFile = writer instanceof SplitDataWriter;
  if (!splitZipFile) {
    Object.assign(writer, {
      diskNumber: 0,
      diskOffset: 0,
      availableSize: Infinity,
      maxSize: Infinity
    });
  }
  return writer;
}
function readUint8Array(reader, offset, size, diskNumber) {
  return reader.readUint8Array(offset, size, diskNumber);
}

// node_modules/@zip.js/zip.js/lib/core/util/cp437-decode.js
var CP437 = "\0\u263A\u263B\u2665\u2666\u2663\u2660\u2022\u25D8\u25CB\u25D9\u2642\u2640\u266A\u266B\u263C\u25BA\u25C4\u2195\u203C\xB6\xA7\u25AC\u21A8\u2191\u2193\u2192\u2190\u221F\u2194\u25B2\u25BC !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u2302\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0 ".split("");
var VALID_CP437 = CP437.length == 256;
function decodeCP437(stringValue) {
  if (VALID_CP437) {
    let result = "";
    for (let indexCharacter = 0; indexCharacter < stringValue.length; indexCharacter++) {
      result += CP437[stringValue[indexCharacter]];
    }
    return result;
  } else {
    return new TextDecoder().decode(stringValue);
  }
}

// node_modules/@zip.js/zip.js/lib/core/util/decode-text.js
function decodeText(value, encoding) {
  if (encoding && encoding.trim().toLowerCase() == "cp437") {
    return decodeCP437(value);
  } else {
    return new TextDecoder(encoding).decode(value);
  }
}

// node_modules/@zip.js/zip.js/lib/core/zip-entry.js
var PROPERTY_NAME_FILENAME = "filename";
var PROPERTY_NAME_RAW_FILENAME = "rawFilename";
var PROPERTY_NAME_COMMENT = "comment";
var PROPERTY_NAME_RAW_COMMENT = "rawComment";
var PROPERTY_NAME_UNCOMPPRESSED_SIZE = "uncompressedSize";
var PROPERTY_NAME_COMPPRESSED_SIZE = "compressedSize";
var PROPERTY_NAME_OFFSET = "offset";
var PROPERTY_NAME_DISK_NUMBER_START = "diskNumberStart";
var PROPERTY_NAME_LAST_MODIFICATION_DATE = "lastModDate";
var PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE = "rawLastModDate";
var PROPERTY_NAME_LAST_ACCESS_DATE = "lastAccessDate";
var PROPERTY_NAME_RAW_LAST_ACCESS_DATE = "rawLastAccessDate";
var PROPERTY_NAME_CREATION_DATE = "creationDate";
var PROPERTY_NAME_RAW_CREATION_DATE = "rawCreationDate";
var PROPERTY_NAME_INTERNAL_FILE_ATTRIBUTE = "internalFileAttribute";
var PROPERTY_NAME_EXTERNAL_FILE_ATTRIBUTE = "externalFileAttribute";
var PROPERTY_NAME_MS_DOS_COMPATIBLE = "msDosCompatible";
var PROPERTY_NAME_ZIP64 = "zip64";
var PROPERTY_NAMES = [
  PROPERTY_NAME_FILENAME,
  PROPERTY_NAME_RAW_FILENAME,
  PROPERTY_NAME_COMPPRESSED_SIZE,
  PROPERTY_NAME_UNCOMPPRESSED_SIZE,
  PROPERTY_NAME_LAST_MODIFICATION_DATE,
  PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE,
  PROPERTY_NAME_COMMENT,
  PROPERTY_NAME_RAW_COMMENT,
  PROPERTY_NAME_LAST_ACCESS_DATE,
  PROPERTY_NAME_CREATION_DATE,
  PROPERTY_NAME_OFFSET,
  PROPERTY_NAME_DISK_NUMBER_START,
  PROPERTY_NAME_DISK_NUMBER_START,
  PROPERTY_NAME_INTERNAL_FILE_ATTRIBUTE,
  PROPERTY_NAME_EXTERNAL_FILE_ATTRIBUTE,
  PROPERTY_NAME_MS_DOS_COMPATIBLE,
  PROPERTY_NAME_ZIP64,
  "directory",
  "bitFlag",
  "encrypted",
  "signature",
  "filenameUTF8",
  "commentUTF8",
  "compressionMethod",
  "version",
  "versionMadeBy",
  "extraField",
  "rawExtraField",
  "extraFieldZip64",
  "extraFieldUnicodePath",
  "extraFieldUnicodeComment",
  "extraFieldAES",
  "extraFieldNTFS",
  "extraFieldExtendedTimestamp"
];
var Entry = class {
  constructor(data) {
    PROPERTY_NAMES.forEach((name) => this[name] = data[name]);
  }
};

// node_modules/@zip.js/zip.js/lib/core/zip-reader.js
var ERR_BAD_FORMAT = "File format is not recognized";
var ERR_EOCDR_NOT_FOUND = "End of central directory not found";
var ERR_EOCDR_ZIP64_NOT_FOUND = "End of Zip64 central directory not found";
var ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND = "End of Zip64 central directory locator not found";
var ERR_CENTRAL_DIRECTORY_NOT_FOUND = "Central directory header not found";
var ERR_LOCAL_FILE_HEADER_NOT_FOUND = "Local file header not found";
var ERR_EXTRAFIELD_ZIP64_NOT_FOUND = "Zip64 extra field not found";
var ERR_ENCRYPTED = "File contains encrypted entry";
var ERR_UNSUPPORTED_ENCRYPTION = "Encryption method not supported";
var ERR_UNSUPPORTED_COMPRESSION = "Compression method not supported";
var ERR_SPLIT_ZIP_FILE = "Split zip file";
var CHARSET_UTF8 = "utf-8";
var CHARSET_CP437 = "cp437";
var ZIP64_PROPERTIES = [
  [PROPERTY_NAME_UNCOMPPRESSED_SIZE, MAX_32_BITS],
  [PROPERTY_NAME_COMPPRESSED_SIZE, MAX_32_BITS],
  [PROPERTY_NAME_OFFSET, MAX_32_BITS],
  [PROPERTY_NAME_DISK_NUMBER_START, MAX_16_BITS]
];
var ZIP64_EXTRACTION = {
  [MAX_16_BITS]: {
    getValue: getUint32,
    bytes: 4
  },
  [MAX_32_BITS]: {
    getValue: getBigUint64,
    bytes: 8
  }
};
var ZipReader = class {
  constructor(reader, options = {}) {
    Object.assign(this, {
      reader: initReader(reader),
      options,
      config: getConfiguration()
    });
  }
  async *getEntriesGenerator(options = {}) {
    const zipReader = this;
    let { reader } = zipReader;
    const { config: config2 } = zipReader;
    await initStream(reader);
    if (reader.size === UNDEFINED_VALUE || !reader.readUint8Array) {
      reader = new BlobReader(await new Response(reader.readable).blob());
      await initStream(reader);
    }
    if (reader.size < END_OF_CENTRAL_DIR_LENGTH) {
      throw new Error(ERR_BAD_FORMAT);
    }
    reader.chunkSize = getChunkSize(config2);
    const endOfDirectoryInfo = await seekSignature(reader, END_OF_CENTRAL_DIR_SIGNATURE, reader.size, END_OF_CENTRAL_DIR_LENGTH, MAX_16_BITS * 16);
    if (!endOfDirectoryInfo) {
      const signatureArray = await readUint8Array(reader, 0, 4);
      const signatureView = getDataView(signatureArray);
      if (getUint32(signatureView) == SPLIT_ZIP_FILE_SIGNATURE) {
        throw new Error(ERR_SPLIT_ZIP_FILE);
      } else {
        throw new Error(ERR_EOCDR_NOT_FOUND);
      }
    }
    const endOfDirectoryView = getDataView(endOfDirectoryInfo);
    let directoryDataLength = getUint32(endOfDirectoryView, 12);
    let directoryDataOffset = getUint32(endOfDirectoryView, 16);
    const commentOffset = endOfDirectoryInfo.offset;
    const commentLength = getUint16(endOfDirectoryView, 20);
    const appendedDataOffset = commentOffset + END_OF_CENTRAL_DIR_LENGTH + commentLength;
    let lastDiskNumber = getUint16(endOfDirectoryView, 4);
    const expectedLastDiskNumber = reader.lastDiskNumber || 0;
    let diskNumber = getUint16(endOfDirectoryView, 6);
    let filesLength = getUint16(endOfDirectoryView, 8);
    let prependedDataLength = 0;
    let startOffset = 0;
    if (directoryDataOffset == MAX_32_BITS || directoryDataLength == MAX_32_BITS || filesLength == MAX_16_BITS || diskNumber == MAX_16_BITS) {
      const endOfDirectoryLocatorArray = await readUint8Array(reader, endOfDirectoryInfo.offset - ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH);
      const endOfDirectoryLocatorView = getDataView(endOfDirectoryLocatorArray);
      if (getUint32(endOfDirectoryLocatorView, 0) != ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE) {
        throw new Error(ERR_EOCDR_ZIP64_NOT_FOUND);
      }
      directoryDataOffset = getBigUint64(endOfDirectoryLocatorView, 8);
      let endOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, ZIP64_END_OF_CENTRAL_DIR_LENGTH, -1);
      let endOfDirectoryView2 = getDataView(endOfDirectoryArray);
      const expectedDirectoryDataOffset = endOfDirectoryInfo.offset - ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH - ZIP64_END_OF_CENTRAL_DIR_LENGTH;
      if (getUint32(endOfDirectoryView2, 0) != ZIP64_END_OF_CENTRAL_DIR_SIGNATURE && directoryDataOffset != expectedDirectoryDataOffset) {
        const originalDirectoryDataOffset = directoryDataOffset;
        directoryDataOffset = expectedDirectoryDataOffset;
        prependedDataLength = directoryDataOffset - originalDirectoryDataOffset;
        endOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, ZIP64_END_OF_CENTRAL_DIR_LENGTH, -1);
        endOfDirectoryView2 = getDataView(endOfDirectoryArray);
      }
      if (getUint32(endOfDirectoryView2, 0) != ZIP64_END_OF_CENTRAL_DIR_SIGNATURE) {
        throw new Error(ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND);
      }
      if (lastDiskNumber == MAX_16_BITS) {
        lastDiskNumber = getUint32(endOfDirectoryView2, 16);
      }
      if (diskNumber == MAX_16_BITS) {
        diskNumber = getUint32(endOfDirectoryView2, 20);
      }
      if (filesLength == MAX_16_BITS) {
        filesLength = getBigUint64(endOfDirectoryView2, 32);
      }
      if (directoryDataLength == MAX_32_BITS) {
        directoryDataLength = getBigUint64(endOfDirectoryView2, 40);
      }
      directoryDataOffset -= directoryDataLength;
    }
    if (expectedLastDiskNumber != lastDiskNumber) {
      throw new Error(ERR_SPLIT_ZIP_FILE);
    }
    if (directoryDataOffset < 0 || directoryDataOffset >= reader.size) {
      throw new Error(ERR_BAD_FORMAT);
    }
    let offset = 0;
    let directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);
    let directoryView = getDataView(directoryArray);
    if (directoryDataLength) {
      const expectedDirectoryDataOffset = endOfDirectoryInfo.offset - directoryDataLength;
      if (getUint32(directoryView, offset) != CENTRAL_FILE_HEADER_SIGNATURE && directoryDataOffset != expectedDirectoryDataOffset) {
        const originalDirectoryDataOffset = directoryDataOffset;
        directoryDataOffset = expectedDirectoryDataOffset;
        prependedDataLength = directoryDataOffset - originalDirectoryDataOffset;
        directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);
        directoryView = getDataView(directoryArray);
      }
    }
    const expectedDirectoryDataLength = endOfDirectoryInfo.offset - directoryDataOffset - (reader.lastDiskOffset || 0);
    if (directoryDataLength != expectedDirectoryDataLength && expectedDirectoryDataLength >= 0) {
      directoryDataLength = expectedDirectoryDataLength;
      directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);
      directoryView = getDataView(directoryArray);
    }
    if (directoryDataOffset < 0 || directoryDataOffset >= reader.size) {
      throw new Error(ERR_BAD_FORMAT);
    }
    const filenameEncoding = getOptionValue(zipReader, options, "filenameEncoding");
    const commentEncoding = getOptionValue(zipReader, options, "commentEncoding");
    for (let indexFile = 0; indexFile < filesLength; indexFile++) {
      const fileEntry = new ZipEntry(reader, config2, zipReader.options);
      if (getUint32(directoryView, offset) != CENTRAL_FILE_HEADER_SIGNATURE) {
        throw new Error(ERR_CENTRAL_DIRECTORY_NOT_FOUND);
      }
      readCommonHeader(fileEntry, directoryView, offset + 6);
      const languageEncodingFlag = Boolean(fileEntry.bitFlag.languageEncodingFlag);
      const filenameOffset = offset + 46;
      const extraFieldOffset = filenameOffset + fileEntry.filenameLength;
      const commentOffset2 = extraFieldOffset + fileEntry.extraFieldLength;
      const versionMadeBy = getUint16(directoryView, offset + 4);
      const msDosCompatible = (versionMadeBy & 0) == 0;
      const rawFilename = directoryArray.subarray(filenameOffset, extraFieldOffset);
      const commentLength2 = getUint16(directoryView, offset + 32);
      const endOffset = commentOffset2 + commentLength2;
      const rawComment = directoryArray.subarray(commentOffset2, endOffset);
      const filenameUTF8 = languageEncodingFlag;
      const commentUTF8 = languageEncodingFlag;
      const directory = msDosCompatible && (getUint8(directoryView, offset + 38) & FILE_ATTR_MSDOS_DIR_MASK) == FILE_ATTR_MSDOS_DIR_MASK;
      const offsetFileEntry = getUint32(directoryView, offset + 42) + prependedDataLength;
      Object.assign(fileEntry, {
        versionMadeBy,
        msDosCompatible,
        compressedSize: 0,
        uncompressedSize: 0,
        commentLength: commentLength2,
        directory,
        offset: offsetFileEntry,
        diskNumberStart: getUint16(directoryView, offset + 34),
        internalFileAttribute: getUint16(directoryView, offset + 36),
        externalFileAttribute: getUint32(directoryView, offset + 38),
        rawFilename,
        filenameUTF8,
        commentUTF8,
        rawExtraField: directoryArray.subarray(extraFieldOffset, commentOffset2)
      });
      const [filename, comment] = await Promise.all([
        decodeText(rawFilename, filenameUTF8 ? CHARSET_UTF8 : filenameEncoding || CHARSET_CP437),
        decodeText(rawComment, commentUTF8 ? CHARSET_UTF8 : commentEncoding || CHARSET_CP437)
      ]);
      Object.assign(fileEntry, {
        rawComment,
        filename,
        comment,
        directory: directory || filename.endsWith(DIRECTORY_SIGNATURE)
      });
      startOffset = Math.max(offsetFileEntry, startOffset);
      await readCommonFooter(fileEntry, fileEntry, directoryView, offset + 6);
      const entry = new Entry(fileEntry);
      entry.getData = (writer, options2) => fileEntry.getData(writer, entry, options2);
      offset = endOffset;
      const { onprogress } = options;
      if (onprogress) {
        try {
          await onprogress(indexFile + 1, filesLength, new Entry(fileEntry));
        } catch (_error) {
        }
      }
      yield entry;
    }
    const extractPrependedData = getOptionValue(zipReader, options, "extractPrependedData");
    const extractAppendedData = getOptionValue(zipReader, options, "extractAppendedData");
    if (extractPrependedData) {
      zipReader.prependedData = startOffset > 0 ? await readUint8Array(reader, 0, startOffset) : new Uint8Array();
    }
    zipReader.comment = commentLength ? await readUint8Array(reader, commentOffset + END_OF_CENTRAL_DIR_LENGTH, commentLength) : new Uint8Array();
    if (extractAppendedData) {
      zipReader.appendedData = appendedDataOffset < reader.size ? await readUint8Array(reader, appendedDataOffset, reader.size - appendedDataOffset) : new Uint8Array();
    }
    return true;
  }
  async getEntries(options = {}) {
    const entries = [];
    for await (const entry of this.getEntriesGenerator(options)) {
      entries.push(entry);
    }
    return entries;
  }
  async close() {
  }
};
var ZipEntry = class {
  constructor(reader, config2, options) {
    Object.assign(this, {
      reader,
      config: config2,
      options
    });
  }
  async getData(writer, fileEntry, options = {}) {
    const zipEntry = this;
    const {
      reader,
      offset,
      diskNumberStart,
      extraFieldAES,
      compressionMethod,
      config: config2,
      bitFlag,
      signature,
      rawLastModDate,
      uncompressedSize,
      compressedSize
    } = zipEntry;
    const localDirectory = zipEntry.localDirectory = {};
    const dataArray = await readUint8Array(reader, offset, 30, diskNumberStart);
    const dataView = getDataView(dataArray);
    let password = getOptionValue(zipEntry, options, "password");
    password = password && password.length && password;
    if (extraFieldAES) {
      if (extraFieldAES.originalCompressionMethod != COMPRESSION_METHOD_AES) {
        throw new Error(ERR_UNSUPPORTED_COMPRESSION);
      }
    }
    if (compressionMethod != COMPRESSION_METHOD_STORE && compressionMethod != COMPRESSION_METHOD_DEFLATE) {
      throw new Error(ERR_UNSUPPORTED_COMPRESSION);
    }
    if (getUint32(dataView, 0) != LOCAL_FILE_HEADER_SIGNATURE) {
      throw new Error(ERR_LOCAL_FILE_HEADER_NOT_FOUND);
    }
    readCommonHeader(localDirectory, dataView, 4);
    localDirectory.rawExtraField = localDirectory.extraFieldLength ? await readUint8Array(reader, offset + 30 + localDirectory.filenameLength, localDirectory.extraFieldLength, diskNumberStart) : new Uint8Array();
    await readCommonFooter(zipEntry, localDirectory, dataView, 4);
    Object.assign(fileEntry, {
      lastAccessDate: localDirectory.lastAccessDate,
      creationDate: localDirectory.creationDate
    });
    const encrypted = zipEntry.encrypted && localDirectory.encrypted;
    const zipCrypto = encrypted && !extraFieldAES;
    if (encrypted) {
      if (!zipCrypto && extraFieldAES.strength === UNDEFINED_VALUE) {
        throw new Error(ERR_UNSUPPORTED_ENCRYPTION);
      } else if (!password) {
        throw new Error(ERR_ENCRYPTED);
      }
    }
    const dataOffset = offset + 30 + localDirectory.filenameLength + localDirectory.extraFieldLength;
    const size = compressedSize;
    const readable = reader.readable;
    Object.assign(readable, {
      diskNumberStart,
      offset: dataOffset,
      size
    });
    const signal = getOptionValue(zipEntry, options, "signal");
    const checkPasswordOnly = getOptionValue(zipEntry, options, "checkPasswordOnly");
    if (checkPasswordOnly) {
      writer = new WritableStream();
    }
    writer = initWriter(writer);
    await initStream(writer, uncompressedSize);
    const { writable } = writer;
    const { onstart, onprogress, onend } = options;
    const workerOptions = {
      options: {
        codecType: CODEC_INFLATE,
        password,
        zipCrypto,
        encryptionStrength: extraFieldAES && extraFieldAES.strength,
        signed: getOptionValue(zipEntry, options, "checkSignature"),
        passwordVerification: zipCrypto && (bitFlag.dataDescriptor ? rawLastModDate >>> 8 & 255 : signature >>> 24 & 255),
        signature,
        compressed: compressionMethod != 0,
        encrypted,
        useWebWorkers: getOptionValue(zipEntry, options, "useWebWorkers"),
        useCompressionStream: getOptionValue(zipEntry, options, "useCompressionStream"),
        transferStreams: getOptionValue(zipEntry, options, "transferStreams"),
        checkPasswordOnly
      },
      config: config2,
      streamOptions: { signal, size, onstart, onprogress, onend }
    };
    let outputSize = 0;
    try {
      ({ outputSize } = await runWorker2({ readable, writable }, workerOptions));
    } catch (error) {
      if (!checkPasswordOnly || error.message != ERR_ABORT_CHECK_PASSWORD) {
        throw error;
      }
    } finally {
      const preventClose = getOptionValue(zipEntry, options, "preventClose");
      writable.size += outputSize;
      if (!preventClose && !writable.locked) {
        await writable.getWriter().close();
      }
    }
    return checkPasswordOnly ? void 0 : writer.getData ? writer.getData() : writable;
  }
};
function readCommonHeader(directory, dataView, offset) {
  const rawBitFlag = directory.rawBitFlag = getUint16(dataView, offset + 2);
  const encrypted = (rawBitFlag & BITFLAG_ENCRYPTED) == BITFLAG_ENCRYPTED;
  const rawLastModDate = getUint32(dataView, offset + 6);
  Object.assign(directory, {
    encrypted,
    version: getUint16(dataView, offset),
    bitFlag: {
      level: (rawBitFlag & BITFLAG_LEVEL) >> 1,
      dataDescriptor: (rawBitFlag & BITFLAG_DATA_DESCRIPTOR) == BITFLAG_DATA_DESCRIPTOR,
      languageEncodingFlag: (rawBitFlag & BITFLAG_LANG_ENCODING_FLAG) == BITFLAG_LANG_ENCODING_FLAG
    },
    rawLastModDate,
    lastModDate: getDate(rawLastModDate),
    filenameLength: getUint16(dataView, offset + 22),
    extraFieldLength: getUint16(dataView, offset + 24)
  });
}
async function readCommonFooter(fileEntry, directory, dataView, offset) {
  const { rawExtraField } = directory;
  const extraField = directory.extraField = /* @__PURE__ */ new Map();
  const rawExtraFieldView = getDataView(new Uint8Array(rawExtraField));
  let offsetExtraField = 0;
  try {
    while (offsetExtraField < rawExtraField.length) {
      const type = getUint16(rawExtraFieldView, offsetExtraField);
      const size = getUint16(rawExtraFieldView, offsetExtraField + 2);
      extraField.set(type, {
        type,
        data: rawExtraField.slice(offsetExtraField + 4, offsetExtraField + 4 + size)
      });
      offsetExtraField += 4 + size;
    }
  } catch (_error) {
  }
  const compressionMethod = getUint16(dataView, offset + 4);
  Object.assign(directory, {
    signature: getUint32(dataView, offset + 10),
    uncompressedSize: getUint32(dataView, offset + 18),
    compressedSize: getUint32(dataView, offset + 14)
  });
  const extraFieldZip64 = extraField.get(EXTRAFIELD_TYPE_ZIP64);
  if (extraFieldZip64) {
    readExtraFieldZip64(extraFieldZip64, directory);
    directory.extraFieldZip64 = extraFieldZip64;
  }
  const extraFieldUnicodePath = extraField.get(EXTRAFIELD_TYPE_UNICODE_PATH);
  if (extraFieldUnicodePath) {
    await readExtraFieldUnicode(extraFieldUnicodePath, PROPERTY_NAME_FILENAME, PROPERTY_NAME_RAW_FILENAME, directory, fileEntry);
    directory.extraFieldUnicodePath = extraFieldUnicodePath;
  }
  const extraFieldUnicodeComment = extraField.get(EXTRAFIELD_TYPE_UNICODE_COMMENT);
  if (extraFieldUnicodeComment) {
    await readExtraFieldUnicode(extraFieldUnicodeComment, PROPERTY_NAME_COMMENT, PROPERTY_NAME_RAW_COMMENT, directory, fileEntry);
    directory.extraFieldUnicodeComment = extraFieldUnicodeComment;
  }
  const extraFieldAES = extraField.get(EXTRAFIELD_TYPE_AES);
  if (extraFieldAES) {
    readExtraFieldAES(extraFieldAES, directory, compressionMethod);
    directory.extraFieldAES = extraFieldAES;
  } else {
    directory.compressionMethod = compressionMethod;
  }
  const extraFieldNTFS = extraField.get(EXTRAFIELD_TYPE_NTFS);
  if (extraFieldNTFS) {
    readExtraFieldNTFS(extraFieldNTFS, directory);
    directory.extraFieldNTFS = extraFieldNTFS;
  }
  const extraFieldExtendedTimestamp = extraField.get(EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP);
  if (extraFieldExtendedTimestamp) {
    readExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory);
    directory.extraFieldExtendedTimestamp = extraFieldExtendedTimestamp;
  }
}
function readExtraFieldZip64(extraFieldZip64, directory) {
  directory.zip64 = true;
  const extraFieldView = getDataView(extraFieldZip64.data);
  const missingProperties = ZIP64_PROPERTIES.filter(([propertyName, max]) => directory[propertyName] == max);
  for (let indexMissingProperty = 0, offset = 0; indexMissingProperty < missingProperties.length; indexMissingProperty++) {
    const [propertyName, max] = missingProperties[indexMissingProperty];
    if (directory[propertyName] == max) {
      const extraction = ZIP64_EXTRACTION[max];
      directory[propertyName] = extraFieldZip64[propertyName] = extraction.getValue(extraFieldView, offset);
      offset += extraction.bytes;
    } else if (extraFieldZip64[propertyName]) {
      throw new Error(ERR_EXTRAFIELD_ZIP64_NOT_FOUND);
    }
  }
}
async function readExtraFieldUnicode(extraFieldUnicode, propertyName, rawPropertyName, directory, fileEntry) {
  const extraFieldView = getDataView(extraFieldUnicode.data);
  const crc32 = new Crc32();
  crc32.append(fileEntry[rawPropertyName]);
  const dataViewSignature = getDataView(new Uint8Array(4));
  dataViewSignature.setUint32(0, crc32.get(), true);
  const signature = getUint32(extraFieldView, 1);
  Object.assign(extraFieldUnicode, {
    version: getUint8(extraFieldView, 0),
    [propertyName]: decodeText(extraFieldUnicode.data.subarray(5)),
    valid: !fileEntry.bitFlag.languageEncodingFlag && signature == getUint32(dataViewSignature, 0)
  });
  if (extraFieldUnicode.valid) {
    directory[propertyName] = extraFieldUnicode[propertyName];
    directory[propertyName + "UTF8"] = true;
  }
}
function readExtraFieldAES(extraFieldAES, directory, compressionMethod) {
  const extraFieldView = getDataView(extraFieldAES.data);
  const strength = getUint8(extraFieldView, 4);
  Object.assign(extraFieldAES, {
    vendorVersion: getUint8(extraFieldView, 0),
    vendorId: getUint8(extraFieldView, 2),
    strength,
    originalCompressionMethod: compressionMethod,
    compressionMethod: getUint16(extraFieldView, 5)
  });
  directory.compressionMethod = extraFieldAES.compressionMethod;
}
function readExtraFieldNTFS(extraFieldNTFS, directory) {
  const extraFieldView = getDataView(extraFieldNTFS.data);
  let offsetExtraField = 4;
  let tag1Data;
  try {
    while (offsetExtraField < extraFieldNTFS.data.length && !tag1Data) {
      const tagValue = getUint16(extraFieldView, offsetExtraField);
      const attributeSize = getUint16(extraFieldView, offsetExtraField + 2);
      if (tagValue == EXTRAFIELD_TYPE_NTFS_TAG1) {
        tag1Data = extraFieldNTFS.data.slice(offsetExtraField + 4, offsetExtraField + 4 + attributeSize);
      }
      offsetExtraField += 4 + attributeSize;
    }
  } catch (_error) {
  }
  try {
    if (tag1Data && tag1Data.length == 24) {
      const tag1View = getDataView(tag1Data);
      const rawLastModDate = tag1View.getBigUint64(0, true);
      const rawLastAccessDate = tag1View.getBigUint64(8, true);
      const rawCreationDate = tag1View.getBigUint64(16, true);
      Object.assign(extraFieldNTFS, {
        rawLastModDate,
        rawLastAccessDate,
        rawCreationDate
      });
      const lastModDate = getDateNTFS(rawLastModDate);
      const lastAccessDate = getDateNTFS(rawLastAccessDate);
      const creationDate = getDateNTFS(rawCreationDate);
      const extraFieldData = { lastModDate, lastAccessDate, creationDate };
      Object.assign(extraFieldNTFS, extraFieldData);
      Object.assign(directory, extraFieldData);
    }
  } catch (_error) {
  }
}
function readExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory) {
  const extraFieldView = getDataView(extraFieldExtendedTimestamp.data);
  const flags = getUint8(extraFieldView, 0);
  const timeProperties = [];
  const timeRawProperties = [];
  if ((flags & 1) == 1) {
    timeProperties.push(PROPERTY_NAME_LAST_MODIFICATION_DATE);
    timeRawProperties.push(PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE);
  }
  if ((flags & 2) == 2) {
    timeProperties.push(PROPERTY_NAME_LAST_ACCESS_DATE);
    timeRawProperties.push(PROPERTY_NAME_RAW_LAST_ACCESS_DATE);
  }
  if ((flags & 4) == 4) {
    timeProperties.push(PROPERTY_NAME_CREATION_DATE);
    timeRawProperties.push(PROPERTY_NAME_RAW_CREATION_DATE);
  }
  let offset = 1;
  timeProperties.forEach((propertyName, indexProperty) => {
    if (extraFieldExtendedTimestamp.data.length >= offset + 4) {
      const time = getUint32(extraFieldView, offset);
      directory[propertyName] = extraFieldExtendedTimestamp[propertyName] = new Date(time * 1e3);
      const rawPropertyName = timeRawProperties[indexProperty];
      extraFieldExtendedTimestamp[rawPropertyName] = time;
    }
    offset += 4;
  });
}
async function seekSignature(reader, signature, startOffset, minimumBytes, maximumLength) {
  const signatureArray = new Uint8Array(4);
  const signatureView = getDataView(signatureArray);
  setUint32(signatureView, 0, signature);
  const maximumBytes = minimumBytes + maximumLength;
  return await seek(minimumBytes) || await seek(Math.min(maximumBytes, startOffset));
  async function seek(length) {
    const offset = startOffset - length;
    const bytes = await readUint8Array(reader, offset, length);
    for (let indexByte = bytes.length - minimumBytes; indexByte >= 0; indexByte--) {
      if (bytes[indexByte] == signatureArray[0] && bytes[indexByte + 1] == signatureArray[1] && bytes[indexByte + 2] == signatureArray[2] && bytes[indexByte + 3] == signatureArray[3]) {
        return {
          offset: offset + indexByte,
          buffer: bytes.slice(indexByte, indexByte + minimumBytes).buffer
        };
      }
    }
  }
}
function getOptionValue(zipReader, options, name) {
  return options[name] === UNDEFINED_VALUE ? zipReader.options[name] : options[name];
}
function getDate(timeRaw) {
  const date = (timeRaw & 4294901760) >> 16, time = timeRaw & 65535;
  try {
    return new Date(1980 + ((date & 65024) >> 9), ((date & 480) >> 5) - 1, date & 31, (time & 63488) >> 11, (time & 2016) >> 5, (time & 31) * 2, 0);
  } catch (_error) {
  }
}
function getDateNTFS(timeRaw) {
  return new Date(Number(timeRaw / BigInt(1e4) - BigInt(116444736e5)));
}
function getUint8(view, offset) {
  return view.getUint8(offset);
}
function getUint16(view, offset) {
  return view.getUint16(offset, true);
}
function getUint32(view, offset) {
  return view.getUint32(offset, true);
}
function getBigUint64(view, offset) {
  return Number(view.getBigUint64(offset, true));
}
function setUint32(view, offset, value) {
  view.setUint32(offset, value, true);
}
function getDataView(array) {
  return new DataView(array.buffer);
}

// node_modules/@zip.js/zip.js/lib/zip-no-worker-inflate.js
configure({ Inflate: ZipInflate });

// src/filesystem.ts
var import_obsidian = require("obsidian");

// src/z-worker-inline.js
function e(e2) {
  const t = () => URL.createObjectURL(new Blob(['const{Array:e,Object:t,Number:n,Math:r,Error:s,Uint8Array:i,Uint16Array:o,Uint32Array:c,Int32Array:f,Map:a,DataView:l,Promise:u,TextEncoder:w,crypto:h,postMessage:d,TransformStream:p,ReadableStream:y,WritableStream:m,CompressionStream:b,DecompressionStream:g}=self;class k{constructor(e){return class extends p{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}const v=[];for(let e=0;256>e;e++){let t=e;for(let e=0;8>e;e++)1&t?t=t>>>1^3988292384:t>>>=1;v[e]=t}class S{constructor(e){this.t=e||-1}append(e){let t=0|this.t;for(let n=0,r=0|e.length;r>n;n++)t=t>>>8^v[255&(t^e[n])];this.t=t}get(){return~this.t}}class z extends p{constructor(){let e;const t=new S;super({transform(e,n){t.append(e),n.enqueue(e)},flush(){const n=new i(4);new l(n.buffer).setUint32(0,t.get()),e.value=n}}),e=this}}const C={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=C.i(n);return 32===r?e.concat(t):C.o(t,r,0|n,e.slice(0,e.length-1))},l(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+C.i(n)},u(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,r.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=C.h(t,e[n-1]&2147483648>>t-1,1)),e},h:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,i:e=>r.round(e/1099511627776)||32,o(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let s=0;s<e.length;s++)r.push(n|e[s]>>>t),n=e[s]<<32-t;const s=e.length?e[e.length-1]:0,i=C.i(s);return r.push(C.h(t+i&31,t+i>32?n:r.pop(),1)),r}},x={p:{m(e){const t=C.l(e)/8,n=new i(t);let r;for(let s=0;t>s;s++)0==(3&s)&&(r=e[s/4]),n[s]=r>>>24,r<<=8;return n},g(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3==(3&n)&&(t.push(r),r=0);return 3&n&&t.push(C.h(8*(3&n),r)),t}}},_=class{constructor(e){const t=this;t.blockSize=512,t.k=[1732584193,4023233417,2562383102,271733878,3285377520],t.v=[1518500249,1859775393,2400959708,3395469782],e?(t.S=e.S.slice(0),t.C=e.C.slice(0),t._=e._):t.reset()}reset(){const e=this;return e.S=e.k.slice(0),e.C=[],e._=0,e}update(e){const t=this;"string"==typeof e&&(e=x.A.g(e));const n=t.C=C.concat(t.C,e),r=t._,i=t._=r+C.l(e);if(i>9007199254740991)throw new s("Cannot hash more than 2^53 - 1 bits");const o=new c(n);let f=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);i>=e;e+=t.blockSize)t.I(o.subarray(16*f,16*(f+1))),f+=1;return n.splice(0,16*f),t}D(){const e=this;let t=e.C;const n=e.S;t=C.concat(t,[C.h(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(r.floor(e._/4294967296)),t.push(0|e._);t.length;)e.I(t.splice(0,16));return e.reset(),n}V(e,t,n,r){return e>19?e>39?e>59?e>79?void 0:t^n^r:t&n|t&r|n&r:t^n^r:t&n|~t&r}P(e,t){return t<<e|t>>>32-e}I(t){const n=this,s=n.S,i=e(80);for(let e=0;16>e;e++)i[e]=t[e];let o=s[0],c=s[1],f=s[2],a=s[3],l=s[4];for(let e=0;79>=e;e++){16>e||(i[e]=n.P(1,i[e-3]^i[e-8]^i[e-14]^i[e-16]));const t=n.P(5,o)+n.V(e,c,f,a)+l+i[e]+n.v[r.floor(e/20)]|0;l=a,a=f,f=n.P(30,c),c=o,o=t}s[0]=s[0]+o|0,s[1]=s[1]+c|0,s[2]=s[2]+f|0,s[3]=s[3]+a|0,s[4]=s[4]+l|0}},A={getRandomValues(e){const t=new c(e.buffer),n=e=>{let t=987654321;const n=4294967295;return()=>(t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(r.random()>.5?1:-1))};for(let s,i=0;i<e.length;i+=4){const e=n(4294967296*(s||r.random()));s=987654071*e(),t[i/4]=4294967296*e()|0}return e}},I={importKey:e=>new I.R(x.p.g(e)),B(e,t,n,r){if(n=n||1e4,0>r||0>n)throw new s("invalid params to pbkdf2");const i=1+(r>>5)<<2;let o,c,f,a,u;const w=new ArrayBuffer(i),h=new l(w);let d=0;const p=C;for(t=x.p.g(t),u=1;(i||1)>d;u++){for(o=c=e.encrypt(p.concat(t,[u])),f=1;n>f;f++)for(c=e.encrypt(c),a=0;a<c.length;a++)o[a]^=c[a];for(f=0;(i||1)>d&&f<o.length;f++)h.setInt32(d,o[f]),d+=4}return w.slice(0,r/8)},R:class{constructor(e){const t=this,n=t.M=_,r=[[],[]];t.K=[new n,new n];const s=t.K[0].blockSize/32;e.length>s&&(e=(new n).update(e).D());for(let t=0;s>t;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t.K[0].update(r[0]),t.K[1].update(r[1]),t.U=new n(t.K[0])}reset(){const e=this;e.U=new e.M(e.K[0]),e.N=!1}update(e){this.N=!0,this.U.update(e)}digest(){const e=this,t=e.U.D(),n=new e.M(e.K[1]).update(t).D();return e.reset(),n}encrypt(e){if(this.N)throw new s("encrypt on already updated hmac called!");return this.update(e),this.digest(e)}}},D=void 0!==h&&"function"==typeof h.getRandomValues,V="Invalid password",P="Invalid signature",R="zipjs-abort-check-password";function B(e){return D?h.getRandomValues(e):A.getRandomValues(e)}const E=16,M={name:"PBKDF2"},K=t.assign({hash:{name:"HMAC"}},M),U=t.assign({iterations:1e3,hash:{name:"SHA-1"}},M),N=["deriveBits"],O=[8,12,16],T=[16,24,32],W=10,j=[0,0,0,0],H="undefined",L="function",F=typeof h!=H,q=F&&h.subtle,G=F&&typeof q!=H,J=x.p,Q=class{constructor(e){const t=this;t.O=[[[],[],[],[],[]],[[],[],[],[],[]]],t.O[0][0][0]||t.T();const n=t.O[0][4],r=t.O[1],i=e.length;let o,c,f,a=1;if(4!==i&&6!==i&&8!==i)throw new s("invalid aes key size");for(t.v=[c=e.slice(0),f=[]],o=i;4*i+28>o;o++){let e=c[o-1];(o%i==0||8===i&&o%i==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],o%i==0&&(e=e<<8^e>>>24^a<<24,a=a<<1^283*(a>>7))),c[o]=c[o-i]^e}for(let e=0;o;e++,o--){const t=c[3&e?o:o-4];f[e]=4>=o||4>e?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this.W(e,0)}decrypt(e){return this.W(e,1)}T(){const e=this.O[0],t=this.O[1],n=e[4],r=t[4],s=[],i=[];let o,c,f,a;for(let e=0;256>e;e++)i[(s[e]=e<<1^283*(e>>7))^e]=e;for(let l=o=0;!n[l];l^=c||1,o=i[o]||1){let i=o^o<<1^o<<2^o<<3^o<<4;i=i>>8^255&i^99,n[l]=i,r[i]=l,a=s[f=s[c=s[l]]];let u=16843009*a^65537*f^257*c^16843008*l,w=257*s[i]^16843008*i;for(let n=0;4>n;n++)e[n][l]=w=w<<24^w>>>8,t[n][i]=u=u<<24^u>>>8}for(let n=0;5>n;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}W(e,t){if(4!==e.length)throw new s("invalid aes block size");const n=this.v[t],r=n.length/4-2,i=[0,0,0,0],o=this.O[t],c=o[0],f=o[1],a=o[2],l=o[3],u=o[4];let w,h,d,p=e[0]^n[0],y=e[t?3:1]^n[1],m=e[2]^n[2],b=e[t?1:3]^n[3],g=4;for(let e=0;r>e;e++)w=c[p>>>24]^f[y>>16&255]^a[m>>8&255]^l[255&b]^n[g],h=c[y>>>24]^f[m>>16&255]^a[b>>8&255]^l[255&p]^n[g+1],d=c[m>>>24]^f[b>>16&255]^a[p>>8&255]^l[255&y]^n[g+2],b=c[b>>>24]^f[p>>16&255]^a[y>>8&255]^l[255&m]^n[g+3],g+=4,p=w,y=h,m=d;for(let e=0;4>e;e++)i[t?3&-e:e]=u[p>>>24]<<24^u[y>>16&255]<<16^u[m>>8&255]<<8^u[255&b]^n[g++],w=p,p=y,y=m,m=b,b=w;return i}},X=class{constructor(e,t){this.j=e,this.H=t,this.L=t}reset(){this.L=this.H}update(e){return this.F(this.j,e,this.L)}q(e){if(255==(e>>24&255)){let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}else e+=1<<24;return e}G(e){0===(e[0]=this.q(e[0]))&&(e[1]=this.q(e[1]))}F(e,t,n){let r;if(!(r=t.length))return[];const s=C.l(t);for(let s=0;r>s;s+=4){this.G(n);const r=e.encrypt(n);t[s]^=r[0],t[s+1]^=r[1],t[s+2]^=r[2],t[s+3]^=r[3]}return C.u(t,s)}},Y=I.R;let Z=F&&G&&typeof q.importKey==L,$=F&&G&&typeof q.deriveBits==L;class ee extends p{constructor({password:e,signed:n,encryptionStrength:r,checkPasswordOnly:o}){super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:e,signed:n,X:r-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:c,J:f,ready:a}=n;r?(await(async(e,t,n,r)=>{const i=await re(e,t,n,ie(r,0,O[t])),o=ie(r,O[t]);if(i[0]!=o[0]||i[1]!=o[1])throw new s(V)})(n,c,r,ie(e,0,O[c]+2)),e=ie(e,O[c]+2),o?t.error(new s(R)):f()):await a;const l=new i(e.length-W-(e.length-W)%E);t.enqueue(ne(n,e,l,0,W,!0))},async flush(e){const{signed:t,Y:n,Z:r,pending:o,ready:c}=this;await c;const f=ie(o,0,o.length-W),a=ie(o,o.length-W);let l=new i;if(f.length){const e=ce(J,f);r.update(e);const t=n.update(e);l=oe(J,t)}if(t){const e=ie(oe(J,r.digest()),0,W);for(let t=0;W>t;t++)if(e[t]!=a[t])throw new s(P)}e.enqueue(l)}})}}class te extends p{constructor({password:e,encryptionStrength:n}){let r;super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:e,X:n-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:s,J:o,ready:c}=n;let f=new i;r?(f=await(async(e,t,n)=>{const r=B(new i(O[t]));return se(r,await re(e,t,n,r))})(n,s,r),o()):await c;const a=new i(f.length+e.length-e.length%E);a.set(f,0),t.enqueue(ne(n,e,a,f.length,0))},async flush(e){const{Y:t,Z:n,pending:s,ready:o}=this;await o;let c=new i;if(s.length){const e=t.update(ce(J,s));n.update(e),c=oe(J,e)}r.signature=oe(J,n.digest()).slice(0,W),e.enqueue(se(c,r.signature))}}),r=this}}function ne(e,t,n,r,s,o){const{Y:c,Z:f,pending:a}=e,l=t.length-s;let u;for(a.length&&(t=se(a,t),n=((e,t)=>{if(t&&t>e.length){const n=e;(e=new i(t)).set(n,0)}return e})(n,l-l%E)),u=0;l-E>=u;u+=E){const e=ce(J,ie(t,u,u+E));o&&f.update(e);const s=c.update(e);o||f.update(s),n.set(oe(J,s),u+r)}return e.pending=ie(t,u),n}async function re(n,r,s,o){n.password=null;const c=(e=>{if(void 0===w){const t=new i((e=unescape(encodeURIComponent(e))).length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new w).encode(e)})(s),f=await(async(e,t,n,r,s)=>{if(!Z)return I.importKey(t);try{return await q.importKey("raw",t,n,!1,s)}catch(e){return Z=!1,I.importKey(t)}})(0,c,K,0,N),a=await(async(e,t,n)=>{if(!$)return I.B(t,e.salt,U.iterations,n);try{return await q.deriveBits(e,t,n)}catch(r){return $=!1,I.B(t,e.salt,U.iterations,n)}})(t.assign({salt:o},U),f,8*(2*T[r]+2)),l=new i(a),u=ce(J,ie(l,0,T[r])),h=ce(J,ie(l,T[r],2*T[r])),d=ie(l,2*T[r]);return t.assign(n,{keys:{key:u,$:h,passwordVerification:d},Y:new X(new Q(u),e.from(j)),Z:new Y(h)}),d}function se(e,t){let n=e;return e.length+t.length&&(n=new i(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function ie(e,t,n){return e.subarray(t,n)}function oe(e,t){return e.m(t)}function ce(e,t){return e.g(t)}class fe extends p{constructor({password:e,passwordVerification:n,checkPasswordOnly:r}){super({start(){t.assign(this,{password:e,passwordVerification:n}),we(this,e)},transform(e,t){const n=this;if(n.password){const t=le(n,e.subarray(0,12));if(n.password=null,t[11]!=n.passwordVerification)throw new s(V);e=e.subarray(12)}r?t.error(new s(R)):t.enqueue(le(n,e))}})}}class ae extends p{constructor({password:e,passwordVerification:n}){super({start(){t.assign(this,{password:e,passwordVerification:n}),we(this,e)},transform(e,t){const n=this;let r,s;if(n.password){n.password=null;const t=B(new i(12));t[11]=n.passwordVerification,r=new i(e.length+t.length),r.set(ue(n,t),0),s=12}else r=new i(e.length),s=0;r.set(ue(n,e),s),t.enqueue(r)}})}}function le(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=de(e)^t[r],he(e,n[r]);return n}function ue(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=de(e)^t[r],he(e,t[r]);return n}function we(e,n){const r=[305419896,591751049,878082192];t.assign(e,{keys:r,ee:new S(r[0]),te:new S(r[2])});for(let t=0;t<n.length;t++)he(e,n.charCodeAt(t))}function he(e,t){let[n,s,i]=e.keys;e.ee.append([t]),n=~e.ee.get(),s=ye(r.imul(ye(s+pe(n)),134775813)+1),e.te.append([s>>>24]),i=~e.te.get(),e.keys=[n,s,i]}function de(e){const t=2|e.keys[2];return pe(r.imul(t,1^t)>>>8)}function pe(e){return 255&e}function ye(e){return 4294967295&e}const me="deflate-raw";class be extends p{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:s,encrypted:i,useCompressionStream:o,zipCrypto:c,signed:f,level:a}=e,u=this;let w,h,d=ke(super.readable);i&&!c||!f||(w=new z,d=ze(d,w)),s&&(d=Se(d,o,{level:a,chunkSize:t},r,n)),i&&(c?d=ze(d,new ae(e)):(h=new te(e),d=ze(d,h))),ve(u,d,(async()=>{let e;i&&!c&&(e=h.signature),i&&!c||!f||(e=new l(w.value.buffer).getUint32(0)),u.signature=e}))}}class ge extends p{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:o,signed:c,signature:f,compressed:a,useCompressionStream:u}=e;let w,h,d=ke(super.readable);o&&(i?d=ze(d,new fe(e)):(h=new ee(e),d=ze(d,h))),a&&(d=Se(d,u,{chunkSize:t},r,n)),o&&!i||!c||(w=new z,d=ze(d,w)),ve(this,d,(async()=>{if((!o||i)&&c){const e=new l(w.value.buffer);if(f!=e.getUint32(0,!1))throw new s(P)}}))}}function ke(e){return ze(e,new p({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function ve(e,n,r){n=ze(n,new p({flush:r})),t.defineProperty(e,"readable",{get:()=>n})}function Se(e,t,n,r,s){try{e=ze(e,new(t&&r?r:s)(me,n))}catch(r){if(!t)throw r;e=ze(e,new s(me,n))}return e}function ze(e,t){return e.pipeThrough(t)}const Ce="data";class xe extends p{constructor(e,n){super({});const r=this,{codecType:s}=e;let i;s.startsWith("deflate")?i=be:s.startsWith("inflate")&&(i=ge);let o=0;const c=new i(e,n),f=super.readable,a=new p({transform(e,t){e&&e.length&&(o+=e.length,t.enqueue(e))},flush(){const{signature:e}=c;t.assign(r,{signature:e,size:o})}});t.defineProperty(r,"readable",{get:()=>f.pipeThrough(c).pipeThrough(a)})}}const _e=new a,Ae=new a;let Ie=0;async function De(e){try{const{options:t,scripts:r,config:s}=e;r&&r.length&&importScripts.apply(void 0,r),self.initCodec&&self.initCodec(),s.CompressionStreamNative=self.CompressionStream,s.DecompressionStreamNative=self.DecompressionStream,self.Deflate&&(s.CompressionStream=new k(self.Deflate)),self.Inflate&&(s.DecompressionStream=new k(self.Inflate));const i={highWaterMark:1,size:()=>s.chunkSize},o=e.readable||new y({async pull(e){const t=new u((e=>_e.set(Ie,e)));Ve({type:"pull",messageId:Ie}),Ie=(Ie+1)%n.MAX_SAFE_INTEGER;const{value:r,done:s}=await t;e.enqueue(r),s&&e.close()}},i),c=e.writable||new m({async write(e){let t;const r=new u((e=>t=e));Ae.set(Ie,t),Ve({type:Ce,value:e,messageId:Ie}),Ie=(Ie+1)%n.MAX_SAFE_INTEGER,await r}},i),f=new xe(t,s);await o.pipeThrough(f).pipeTo(c,{preventClose:!0,preventAbort:!0});try{await c.getWriter().close()}catch(e){}const{signature:a,size:l}=f;Ve({type:"close",result:{signature:a,size:l}})}catch(e){Pe(e)}}function Ve(e){let{value:t}=e;if(t)if(t.length)try{t=new i(t),e.value=t.buffer,d(e,[e.value])}catch(t){d(e)}else d(e);else d(e)}function Pe(e){const{message:t,stack:n,code:r,name:s}=e;d({error:{message:t,stack:n,code:r,name:s}})}addEventListener("message",(({data:e})=>{const{type:t,messageId:n,value:r,done:s}=e;try{if("start"==t&&De(e),t==Ce){const e=_e.get(n);_e.delete(n),e({value:new i(r),done:s})}if("ack"==t){const e=Ae.get(n);Ae.delete(n),e()}}catch(e){Pe(e)}}));const Re=-2;function Be(t){return Ee(t.map((([t,n])=>new e(t).fill(n,0,t))))}function Ee(t){return t.reduce(((t,n)=>t.concat(e.isArray(n)?Ee(n):n)),[])}const Me=[0,1,2,3].concat(...Be([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function Ke(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.ne=n=>{const s=e.re,i=e.ie.se,o=e.ie.oe;let c,f,a,l=-1;for(n.ce=0,n.fe=573,c=0;o>c;c++)0!==s[2*c]?(n.ae[++n.ce]=l=c,n.le[c]=0):s[2*c+1]=0;for(;2>n.ce;)a=n.ae[++n.ce]=2>l?++l:0,s[2*a]=1,n.le[a]=0,n.ue--,i&&(n.we-=i[2*a+1]);for(e.he=l,c=r.floor(n.ce/2);c>=1;c--)n.de(s,c);a=o;do{c=n.ae[1],n.ae[1]=n.ae[n.ce--],n.de(s,1),f=n.ae[1],n.ae[--n.fe]=c,n.ae[--n.fe]=f,s[2*a]=s[2*c]+s[2*f],n.le[a]=r.max(n.le[c],n.le[f])+1,s[2*c+1]=s[2*f+1]=a,n.ae[1]=a++,n.de(s,1)}while(n.ce>=2);n.ae[--n.fe]=n.ae[1],(t=>{const n=e.re,r=e.ie.se,s=e.ie.pe,i=e.ie.ye,o=e.ie.me;let c,f,a,l,u,w,h=0;for(l=0;15>=l;l++)t.be[l]=0;for(n[2*t.ae[t.fe]+1]=0,c=t.fe+1;573>c;c++)f=t.ae[c],l=n[2*n[2*f+1]+1]+1,l>o&&(l=o,h++),n[2*f+1]=l,f>e.he||(t.be[l]++,u=0,i>f||(u=s[f-i]),w=n[2*f],t.ue+=w*(l+u),r&&(t.we+=w*(r[2*f+1]+u)));if(0!==h){do{for(l=o-1;0===t.be[l];)l--;t.be[l]--,t.be[l+1]+=2,t.be[o]--,h-=2}while(h>0);for(l=o;0!==l;l--)for(f=t.be[l];0!==f;)a=t.ae[--c],a>e.he||(n[2*a+1]!=l&&(t.ue+=(l-n[2*a+1])*n[2*a],n[2*a+1]=l),f--)}})(n),((e,n,r)=>{const s=[];let i,o,c,f=0;for(i=1;15>=i;i++)s[i]=f=f+r[i-1]<<1;for(o=0;n>=o;o++)c=e[2*o+1],0!==c&&(e[2*o]=t(s[c]++,c))})(s,e.he,n.be)}}function Ue(e,t,n,r,s){const i=this;i.se=e,i.pe=t,i.ye=n,i.oe=r,i.me=s}Ke.ge=[0,1,2,3,4,5,6,7].concat(...Be([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),Ke.ke=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],Ke.ve=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],Ke.Se=e=>256>e?Me[e]:Me[256+(e>>>7)],Ke.ze=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],Ke.Ce=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Ke.xe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Ke._e=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const Ne=Be([[144,8],[112,9],[24,7],[8,8]]);Ue.Ae=Ee([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,Ne[t]])));const Oe=Be([[30,5]]);function Te(e,t,n,r,s){const i=this;i.Ie=e,i.De=t,i.Ve=n,i.Pe=r,i.Re=s}Ue.Be=Ee([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,Oe[t]]))),Ue.Ee=new Ue(Ue.Ae,Ke.ze,257,286,15),Ue.Me=new Ue(Ue.Be,Ke.Ce,0,30,15),Ue.Ke=new Ue(null,Ke.xe,0,19,7);const We=[new Te(0,0,0,0,0),new Te(4,4,8,4,1),new Te(4,5,16,8,1),new Te(4,6,32,32,1),new Te(4,4,16,16,2),new Te(8,16,32,32,2),new Te(8,16,128,128,2),new Te(8,32,128,256,2),new Te(32,128,258,1024,2),new Te(32,258,258,4096,2)],je=["need dictionary","stream end","","","stream error","data error","","buffer error","",""],He=113,Le=666,Fe=262;function qe(e,t,n,r){const s=e[2*t],i=e[2*n];return i>s||s==i&&r[t]<=r[n]}function Ge(){const e=this;let t,n,s,c,f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z,C,x,_,A,I,D,V,P,R,B,E,M,K;const U=new Ke,N=new Ke,O=new Ke;let T,W,j,H,L,F;function q(){let t;for(t=0;286>t;t++)E[2*t]=0;for(t=0;30>t;t++)M[2*t]=0;for(t=0;19>t;t++)K[2*t]=0;E[512]=1,e.ue=e.we=0,W=j=0}function G(e,t){let n,r=-1,s=e[1],i=0,o=7,c=4;0===s&&(o=138,c=3),e[2*(t+1)+1]=65535;for(let f=0;t>=f;f++)n=s,s=e[2*(f+1)+1],++i<o&&n==s||(c>i?K[2*n]+=i:0!==n?(n!=r&&K[2*n]++,K[32]++):i>10?K[36]++:K[34]++,i=0,r=n,0===s?(o=138,c=3):n==s?(o=6,c=3):(o=7,c=4))}function J(t){e.Ue[e.pending++]=t}function Q(e){J(255&e),J(e>>>8&255)}function X(e,t){let n;const r=t;F>16-r?(n=e,L|=n<<F&65535,Q(L),L=n>>>16-F,F+=r-16):(L|=e<<F&65535,F+=r)}function Y(e,t){const n=2*e;X(65535&t[n],65535&t[n+1])}function Z(e,t){let n,r,s=-1,i=e[1],o=0,c=7,f=4;for(0===i&&(c=138,f=3),n=0;t>=n;n++)if(r=i,i=e[2*(n+1)+1],++o>=c||r!=i){if(f>o)do{Y(r,K)}while(0!=--o);else 0!==r?(r!=s&&(Y(r,K),o--),Y(16,K),X(o-3,2)):o>10?(Y(18,K),X(o-11,7)):(Y(17,K),X(o-3,3));o=0,s=r,0===i?(c=138,f=3):r==i?(c=6,f=3):(c=7,f=4)}}function $(){16==F?(Q(L),L=0,F=0):8>F||(J(255&L),L>>>=8,F-=8)}function ee(t,n){let s,i,o;if(e.Ne[W]=t,e.Oe[W]=255&n,W++,0===t?E[2*n]++:(j++,t--,E[2*(Ke.ge[n]+256+1)]++,M[2*Ke.Se(t)]++),0==(8191&W)&&V>2){for(s=8*W,i=C-k,o=0;30>o;o++)s+=M[2*o]*(5+Ke.Ce[o]);if(s>>>=3,j<r.floor(W/2)&&s<r.floor(i/2))return!0}return W==T-1}function te(t,n){let r,s,i,o,c=0;if(0!==W)do{r=e.Ne[c],s=e.Oe[c],c++,0===r?Y(s,t):(i=Ke.ge[s],Y(i+256+1,t),o=Ke.ze[i],0!==o&&(s-=Ke.ke[i],X(s,o)),r--,i=Ke.Se(r),Y(i,n),o=Ke.Ce[i],0!==o&&(r-=Ke.ve[i],X(r,o)))}while(W>c);Y(256,t),H=t[513]}function ne(){F>8?Q(L):F>0&&J(255&L),L=0,F=0}function re(t,n,r){X(0+(r?1:0),3),((t,n)=>{ne(),H=8,Q(n),Q(~n),e.Ue.set(u.subarray(t,t+n),e.pending),e.pending+=n})(t,n)}function se(n){((t,n,r)=>{let s,i,o=0;V>0?(U.ne(e),N.ne(e),o=(()=>{let t;for(G(E,U.he),G(M,N.he),O.ne(e),t=18;t>=3&&0===K[2*Ke._e[t]+1];t--);return e.ue+=14+3*(t+1),t})(),s=e.ue+3+7>>>3,i=e.we+3+7>>>3,i>s||(s=i)):s=i=n+5,n+4>s||-1==t?i==s?(X(2+(r?1:0),3),te(Ue.Ae,Ue.Be)):(X(4+(r?1:0),3),((e,t,n)=>{let r;for(X(e-257,5),X(t-1,5),X(n-4,4),r=0;n>r;r++)X(K[2*Ke._e[r]+1],3);Z(E,e-1),Z(M,t-1)})(U.he+1,N.he+1,o+1),te(E,M)):re(t,n,r),q(),r&&ne()})(0>k?-1:k,C-k,n),k=C,t.Te()}function ie(){let e,n,r,s;do{if(s=w-_-C,0===s&&0===C&&0===_)s=f;else if(-1==s)s--;else if(C>=f+f-Fe){u.set(u.subarray(f,f+f),0),x-=f,C-=f,k-=f,e=y,r=e;do{n=65535&d[--r],d[r]=f>n?0:n-f}while(0!=--e);e=f,r=e;do{n=65535&h[--r],h[r]=f>n?0:n-f}while(0!=--e);s+=f}if(0===t.We)return;e=t.je(u,C+_,s),_+=e,3>_||(p=255&u[C],p=(p<<g^255&u[C+1])&b)}while(Fe>_&&0!==t.We)}function oe(e){let t,n,r=I,s=C,i=A;const o=C>f-Fe?C-(f-Fe):0;let c=B;const a=l,w=C+258;let d=u[s+i-1],p=u[s+i];R>A||(r>>=2),c>_&&(c=_);do{if(t=e,u[t+i]==p&&u[t+i-1]==d&&u[t]==u[s]&&u[++t]==u[s+1]){s+=2,t++;do{}while(u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&w>s);if(n=258-(w-s),s=w-258,n>i){if(x=e,i=n,n>=c)break;d=u[s+i-1],p=u[s+i]}}}while((e=65535&h[e&a])>o&&0!=--r);return i>_?_:i}e.le=[],e.be=[],e.ae=[],E=[],M=[],K=[],e.de=(t,n)=>{const r=e.ae,s=r[n];let i=n<<1;for(;i<=e.ce&&(i<e.ce&&qe(t,r[i+1],r[i],e.le)&&i++,!qe(t,s,r[i],e.le));)r[n]=r[i],n=i,i<<=1;r[n]=s},e.He=(t,S,x,W,j,G)=>(W||(W=8),j||(j=8),G||(G=0),t.Le=null,-1==S&&(S=6),1>j||j>9||8!=W||9>x||x>15||0>S||S>9||0>G||G>2?Re:(t.Fe=e,a=x,f=1<<a,l=f-1,m=j+7,y=1<<m,b=y-1,g=r.floor((m+3-1)/3),u=new i(2*f),h=[],d=[],T=1<<j+6,e.Ue=new i(4*T),s=4*T,e.Ne=new o(T),e.Oe=new i(T),V=S,P=G,(t=>(t.qe=t.Ge=0,t.Le=null,e.pending=0,e.Je=0,n=He,c=0,U.re=E,U.ie=Ue.Ee,N.re=M,N.ie=Ue.Me,O.re=K,O.ie=Ue.Ke,L=0,F=0,H=8,q(),(()=>{w=2*f,d[y-1]=0;for(let e=0;y-1>e;e++)d[e]=0;D=We[V].De,R=We[V].Ie,B=We[V].Ve,I=We[V].Pe,C=0,k=0,_=0,v=A=2,z=0,p=0})(),0))(t))),e.Qe=()=>42!=n&&n!=He&&n!=Le?Re:(e.Oe=null,e.Ne=null,e.Ue=null,d=null,h=null,u=null,e.Fe=null,n==He?-3:0),e.Xe=(e,t,n)=>{let r=0;return-1==t&&(t=6),0>t||t>9||0>n||n>2?Re:(We[V].Re!=We[t].Re&&0!==e.qe&&(r=e.Ye(1)),V!=t&&(V=t,D=We[V].De,R=We[V].Ie,B=We[V].Ve,I=We[V].Pe),P=n,r)},e.Ze=(e,t,r)=>{let s,i=r,o=0;if(!t||42!=n)return Re;if(3>i)return 0;for(i>f-Fe&&(i=f-Fe,o=r-i),u.set(t.subarray(o,o+i),0),C=i,k=i,p=255&u[0],p=(p<<g^255&u[1])&b,s=0;i-3>=s;s++)p=(p<<g^255&u[s+2])&b,h[s&l]=d[p],d[p]=s;return 0},e.Ye=(r,i)=>{let o,w,m,I,R;if(i>4||0>i)return Re;if(!r.$e||!r.et&&0!==r.We||n==Le&&4!=i)return r.Le=je[4],Re;if(0===r.tt)return r.Le=je[7],-5;var B;if(t=r,I=c,c=i,42==n&&(w=8+(a-8<<4)<<8,m=(V-1&255)>>1,m>3&&(m=3),w|=m<<6,0!==C&&(w|=32),w+=31-w%31,n=He,J((B=w)>>8&255),J(255&B)),0!==e.pending){if(t.Te(),0===t.tt)return c=-1,0}else if(0===t.We&&I>=i&&4!=i)return t.Le=je[7],-5;if(n==Le&&0!==t.We)return r.Le=je[7],-5;if(0!==t.We||0!==_||0!=i&&n!=Le){switch(R=-1,We[V].Re){case 0:R=(e=>{let n,r=65535;for(r>s-5&&(r=s-5);;){if(1>=_){if(ie(),0===_&&0==e)return 0;if(0===_)break}if(C+=_,_=0,n=k+r,(0===C||C>=n)&&(_=C-n,C=n,se(!1),0===t.tt))return 0;if(C-k>=f-Fe&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 1:R=(e=>{let n,r=0;for(;;){if(Fe>_){if(ie(),Fe>_&&0==e)return 0;if(0===_)break}if(3>_||(p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C),0===r||(C-r&65535)>f-Fe||2!=P&&(v=oe(r)),3>v)n=ee(0,255&u[C]),_--,C++;else if(n=ee(C-x,v-3),_-=v,v>D||3>_)C+=v,v=0,p=255&u[C],p=(p<<g^255&u[C+1])&b;else{v--;do{C++,p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C}while(0!=--v);C++}if(n&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 2:R=(e=>{let n,r,s=0;for(;;){if(Fe>_){if(ie(),Fe>_&&0==e)return 0;if(0===_)break}if(3>_||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C),A=v,S=x,v=2,0!==s&&D>A&&f-Fe>=(C-s&65535)&&(2!=P&&(v=oe(s)),5>=v&&(1==P||3==v&&C-x>4096)&&(v=2)),3>A||v>A)if(0!==z){if(n=ee(0,255&u[C-1]),n&&se(!1),C++,_--,0===t.tt)return 0}else z=1,C++,_--;else{r=C+_-3,n=ee(C-1-S,A-3),_-=A-1,A-=2;do{++C>r||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C)}while(0!=--A);if(z=0,v=2,C++,n&&(se(!1),0===t.tt))return 0}}return 0!==z&&(n=ee(0,255&u[C-1]),z=0),se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i)}if(2!=R&&3!=R||(n=Le),0==R||2==R)return 0===t.tt&&(c=-1),0;if(1==R){if(1==i)X(2,3),Y(256,Ue.Ae),$(),9>1+H+10-F&&(X(2,3),Y(256,Ue.Ae),$()),H=7;else if(re(0,0,!1),3==i)for(o=0;y>o;o++)d[o]=0;if(t.Te(),0===t.tt)return c=-1,0}}return 4!=i?0:1}}function Je(){const e=this;e.nt=0,e.rt=0,e.We=0,e.qe=0,e.tt=0,e.Ge=0}function Qe(e){const t=new Je,n=(o=e&&e.chunkSize?e.chunkSize:65536)+5*(r.floor(o/16383)+1);var o;const c=new i(n);let f=e?e.level:-1;void 0===f&&(f=-1),t.He(f),t.$e=c,this.append=(e,r)=>{let o,f,a=0,l=0,u=0;const w=[];if(e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,o=t.Ye(0),0!=o)throw new s("deflating: "+t.Le);t.rt&&(t.rt==n?w.push(new i(c)):w.push(c.subarray(0,t.rt))),u+=t.rt,r&&t.nt>0&&t.nt!=a&&(r(t.nt),a=t.nt)}while(t.We>0||0===t.tt);return w.length>1?(f=new i(u),w.forEach((e=>{f.set(e,l),l+=e.length}))):f=w[0]?new i(w[0]):new i,f}},this.flush=()=>{let e,r,o=0,f=0;const a=[];do{if(t.rt=0,t.tt=n,e=t.Ye(4),1!=e&&0!=e)throw new s("deflating: "+t.Le);n-t.tt>0&&a.push(c.slice(0,t.rt)),f+=t.rt}while(t.We>0||0===t.tt);return t.Qe(),r=new i(f),a.forEach((e=>{r.set(e,o),o+=e.length})),r}}Je.prototype={He(e,t){const n=this;return n.Fe=new Ge,t||(t=15),n.Fe.He(n,e,t)},Ye(e){const t=this;return t.Fe?t.Fe.Ye(t,e):Re},Qe(){const e=this;if(!e.Fe)return Re;const t=e.Fe.Qe();return e.Fe=null,t},Xe(e,t){const n=this;return n.Fe?n.Fe.Xe(n,e,t):Re},Ze(e,t){const n=this;return n.Fe?n.Fe.Ze(n,e,t):Re},je(e,t,n){const r=this;let s=r.We;return s>n&&(s=n),0===s?0:(r.We-=s,e.set(r.et.subarray(r.nt,r.nt+s),t),r.nt+=s,r.qe+=s,s)},Te(){const e=this;let t=e.Fe.pending;t>e.tt&&(t=e.tt),0!==t&&(e.$e.set(e.Fe.Ue.subarray(e.Fe.Je,e.Fe.Je+t),e.rt),e.rt+=t,e.Fe.Je+=t,e.Ge+=t,e.tt-=t,e.Fe.pending-=t,0===e.Fe.pending&&(e.Fe.Je=0))}};const Xe=-2,Ye=-3,Ze=-5,$e=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],et=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],tt=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],nt=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],rt=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],st=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],it=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];function ot(){let e,t,n,r,s,i;function o(e,t,o,c,f,a,l,u,w,h,d){let p,y,m,b,g,k,v,S,z,C,x,_,A,I,D;C=0,g=o;do{n[e[t+C]]++,C++,g--}while(0!==g);if(n[0]==o)return l[0]=-1,u[0]=0,0;for(S=u[0],k=1;15>=k&&0===n[k];k++);for(v=k,k>S&&(S=k),g=15;0!==g&&0===n[g];g--);for(m=g,S>g&&(S=g),u[0]=S,I=1<<k;g>k;k++,I<<=1)if(0>(I-=n[k]))return Ye;if(0>(I-=n[g]))return Ye;for(n[g]+=I,i[1]=k=0,C=1,A=2;0!=--g;)i[A]=k+=n[C],A++,C++;g=0,C=0;do{0!==(k=e[t+C])&&(d[i[k]++]=g),C++}while(++g<o);for(o=i[m],i[0]=g=0,C=0,b=-1,_=-S,s[0]=0,x=0,D=0;m>=v;v++)for(p=n[v];0!=p--;){for(;v>_+S;){if(b++,_+=S,D=m-_,D=D>S?S:D,(y=1<<(k=v-_))>p+1&&(y-=p+1,A=v,D>k))for(;++k<D&&(y<<=1)>n[++A];)y-=n[A];if(D=1<<k,h[0]+D>1440)return Ye;s[b]=x=h[0],h[0]+=D,0!==b?(i[b]=g,r[0]=k,r[1]=S,k=g>>>_-S,r[2]=x-s[b-1]-k,w.set(r,3*(s[b-1]+k))):l[0]=x}for(r[1]=v-_,o>C?d[C]<c?(r[0]=256>d[C]?0:96,r[2]=d[C++]):(r[0]=a[d[C]-c]+16+64,r[2]=f[d[C++]-c]):r[0]=192,y=1<<v-_,k=g>>>_;D>k;k+=y)w.set(r,3*(x+k));for(k=1<<v-1;0!=(g&k);k>>>=1)g^=k;for(g^=k,z=(1<<_)-1;(g&z)!=i[b];)b--,_-=S,z=(1<<_)-1}return 0!==I&&1!=m?Ze:0}function c(o){let c;for(e||(e=[],t=[],n=new f(16),r=[],s=new f(15),i=new f(16)),t.length<o&&(t=[]),c=0;o>c;c++)t[c]=0;for(c=0;16>c;c++)n[c]=0;for(c=0;3>c;c++)r[c]=0;s.set(n.subarray(0,15),0),i.set(n.subarray(0,16),0)}this.st=(n,r,s,i,f)=>{let a;return c(19),e[0]=0,a=o(n,0,19,19,null,null,s,r,i,e,t),a==Ye?f.Le="oversubscribed dynamic bit lengths tree":a!=Ze&&0!==r[0]||(f.Le="incomplete dynamic bit lengths tree",a=Ye),a},this.it=(n,r,s,i,f,a,l,u,w)=>{let h;return c(288),e[0]=0,h=o(s,0,n,257,nt,rt,a,i,u,e,t),0!=h||0===i[0]?(h==Ye?w.Le="oversubscribed literal/length tree":-4!=h&&(w.Le="incomplete literal/length tree",h=Ye),h):(c(288),h=o(s,n,r,0,st,it,l,f,u,e,t),0!=h||0===f[0]&&n>257?(h==Ye?w.Le="oversubscribed distance tree":h==Ze?(w.Le="incomplete distance tree",h=Ye):-4!=h&&(w.Le="empty distance tree with lengths",h=Ye),h):0)}}function ct(){const e=this;let t,n,r,s,i=0,o=0,c=0,f=0,a=0,l=0,u=0,w=0,h=0,d=0;function p(e,t,n,r,s,i,o,c){let f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z;d=c.nt,p=c.We,w=o.ot,h=o.ct,y=o.write,m=y<o.read?o.read-y-1:o.end-y,b=$e[e],g=$e[t];do{for(;20>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(f=w&b,a=n,l=r,z=3*(l+f),0!==(u=a[z]))for(;;){if(w>>=a[z+1],h-=a[z+1],0!=(16&u)){for(u&=15,k=a[z+2]+(w&$e[u]),w>>=u,h-=u;15>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;for(f=w&g,a=s,l=i,z=3*(l+f),u=a[z];;){if(w>>=a[z+1],h-=a[z+1],0!=(16&u)){for(u&=15;u>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(v=a[z+2]+(w&$e[u]),w>>=u,h-=u,m-=k,v>y){S=y-v;do{S+=o.end}while(0>S);if(u=o.end-S,k>u){if(k-=u,y-S>0&&u>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--u);else o.lt.set(o.lt.subarray(S,S+u),y),y+=u,S+=u,u=0;S=0}}else S=y-v,y-S>0&&2>y-S?(o.lt[y++]=o.lt[S++],o.lt[y++]=o.lt[S++],k-=2):(o.lt.set(o.lt.subarray(S,S+2),y),y+=2,S+=2,k-=2);if(y-S>0&&k>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--k);else o.lt.set(o.lt.subarray(S,S+k),y),y+=k,S+=k,k=0;break}if(0!=(64&u))return c.Le="invalid distance code",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,Ye;f+=a[z+2],f+=w&$e[u],z=3*(l+f),u=a[z]}break}if(0!=(64&u))return 0!=(32&u)?(k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,1):(c.Le="invalid literal/length code",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,Ye);if(f+=a[z+2],f+=w&$e[u],z=3*(l+f),0===(u=a[z])){w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--;break}}else w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--}while(m>=258&&p>=10);return k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,0}e.init=(e,i,o,c,f,a)=>{t=0,u=e,w=i,r=o,h=c,s=f,d=a,n=null},e.ut=(e,y,m)=>{let b,g,k,v,S,z,C,x=0,_=0,A=0;for(A=y.nt,v=y.We,x=e.ot,_=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S;;)switch(t){case 0:if(z>=258&&v>=10&&(e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,m=p(u,w,r,h,s,d,e,y),A=y.nt,v=y.We,x=e.ot,_=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S,0!=m)){t=1==m?7:9;break}c=u,n=r,o=h,t=1;case 1:for(b=c;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}if(g=3*(o+(x&$e[b])),x>>>=n[g+1],_-=n[g+1],k=n[g],0===k){f=n[g+2],t=6;break}if(0!=(16&k)){a=15&k,i=n[g+2],t=2;break}if(0==(64&k)){c=k,o=g/3+n[g+2];break}if(0!=(32&k)){t=7;break}return t=9,y.Le="invalid literal/length code",m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 2:for(b=a;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}i+=x&$e[b],x>>=b,_-=b,c=w,n=s,o=d,t=3;case 3:for(b=c;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}if(g=3*(o+(x&$e[b])),x>>=n[g+1],_-=n[g+1],k=n[g],0!=(16&k)){a=15&k,l=n[g+2],t=4;break}if(0==(64&k)){c=k,o=g/3+n[g+2];break}return t=9,y.Le="invalid distance code",m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 4:for(b=a;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}l+=x&$e[b],x>>=b,_-=b,t=5;case 5:for(C=S-l;0>C;)C+=e.end;for(;0!==i;){if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);e.lt[S++]=e.lt[C++],z--,C==e.end&&(C=0),i--}t=0;break;case 6:if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,e.lt[S++]=f,z--,t=0;break;case 7:if(_>7&&(_-=8,v++,A--),e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,e.read!=e.write)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);t=8;case 8:return m=1,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 9:return m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);default:return m=Xe,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m)}},e.ht=()=>{}}ot.dt=(e,t,n,r)=>(e[0]=9,t[0]=5,n[0]=et,r[0]=tt,0);const ft=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];function at(e,t){const n=this;let r,s=0,o=0,c=0,a=0;const l=[0],u=[0],w=new ct;let h=0,d=new f(4320);const p=new ot;n.ct=0,n.ot=0,n.lt=new i(t),n.end=t,n.read=0,n.write=0,n.reset=(e,t)=>{t&&(t[0]=0),6==s&&w.ht(e),s=0,n.ct=0,n.ot=0,n.read=n.write=0},n.reset(e,null),n.wt=(e,t)=>{let r,s,i;return s=e.rt,i=n.read,r=(i>n.write?n.end:n.write)-i,r>e.tt&&(r=e.tt),0!==r&&t==Ze&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r,i==n.end&&(i=0,n.write==n.end&&(n.write=0),r=n.write-i,r>e.tt&&(r=e.tt),0!==r&&t==Ze&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r),e.rt=s,n.read=i,t},n.ut=(e,t)=>{let i,f,y,m,b,g,k,v;for(m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g;;){let S,z,C,x,_,A,I,D;switch(s){case 0:for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}switch(i=7&f,h=1&i,i>>>1){case 0:f>>>=3,y-=3,i=7&y,f>>>=i,y-=i,s=1;break;case 1:S=[],z=[],C=[[]],x=[[]],ot.dt(S,z,C,x),w.init(S[0],z[0],C[0],0,x[0],0),f>>>=3,y-=3,s=6;break;case 2:f>>>=3,y-=3,s=3;break;case 3:return f>>>=3,y-=3,s=9,e.Le="invalid block type",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}break;case 1:for(;32>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if((~f>>>16&65535)!=(65535&f))return s=9,e.Le="invalid stored block lengths",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);o=65535&f,f=y=0,s=0!==o?2:0!==h?7:0;break;case 2:if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(0===k&&(g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k&&(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k)))return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(t=0,i=o,i>b&&(i=b),i>k&&(i=k),n.lt.set(e.je(m,i),g),m+=i,b-=i,g+=i,k-=i,0!=(o-=i))break;s=0!==h?7:0;break;case 3:for(;14>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(c=i=16383&f,(31&i)>29||(i>>5&31)>29)return s=9,e.Le="too many length or distance symbols",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(i=258+(31&i)+(i>>5&31),!r||r.length<i)r=[];else for(v=0;i>v;v++)r[v]=0;f>>>=14,y-=14,a=0,s=4;case 4:for(;4+(c>>>10)>a;){for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}r[ft[a++]]=7&f,f>>>=3,y-=3}for(;19>a;)r[ft[a++]]=0;if(l[0]=7,i=p.st(r,l,u,d,e),0!=i)return(t=i)==Ye&&(r=null,s=9),n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);a=0,s=5;case 5:for(;i=c,258+(31&i)+(i>>5&31)>a;){let o,w;for(i=l[0];i>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(i=d[3*(u[0]+(f&$e[i]))+1],w=d[3*(u[0]+(f&$e[i]))+2],16>w)f>>>=i,y-=i,r[a++]=w;else{for(v=18==w?7:w-14,o=18==w?11:3;i+v>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(f>>>=i,y-=i,o+=f&$e[v],f>>>=v,y-=v,v=a,i=c,v+o>258+(31&i)+(i>>5&31)||16==w&&1>v)return r=null,s=9,e.Le="invalid bit length repeat",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w=16==w?r[v-1]:0;do{r[v++]=w}while(0!=--o);a=v}}if(u[0]=-1,_=[],A=[],I=[],D=[],_[0]=9,A[0]=6,i=c,i=p.it(257+(31&i),1+(i>>5&31),r,_,A,I,D,d,e),0!=i)return i==Ye&&(r=null,s=9),t=i,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w.init(_[0],A[0],d,I[0],d,D[0]),s=6;case 6:if(n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,1!=(t=w.ut(n,e,t)))return n.wt(e,t);if(t=0,w.ht(e),m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g,0===h){s=0;break}s=7;case 7:if(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,n.read!=n.write)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);s=8;case 8:return t=1,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);case 9:return t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);default:return t=Xe,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}}},n.ht=e=>{n.reset(e,null),n.lt=null,d=null},n.yt=(e,t,r)=>{n.lt.set(e.subarray(t,t+r),0),n.read=n.write=r},n.bt=()=>1==s?1:0}const lt=13,ut=[0,0,255,255];function wt(){const e=this;function t(e){return e&&e.gt?(e.qe=e.Ge=0,e.Le=null,e.gt.mode=7,e.gt.kt.reset(e,null),0):Xe}e.mode=0,e.method=0,e.vt=[0],e.St=0,e.marker=0,e.zt=0,e.Ct=t=>(e.kt&&e.kt.ht(t),e.kt=null,0),e.xt=(n,r)=>(n.Le=null,e.kt=null,8>r||r>15?(e.Ct(n),Xe):(e.zt=r,n.gt.kt=new at(n,1<<r),t(n),0)),e._t=(e,t)=>{let n,r;if(!e||!e.gt||!e.et)return Xe;const s=e.gt;for(t=4==t?Ze:0,n=Ze;;)switch(s.mode){case 0:if(0===e.We)return n;if(n=t,e.We--,e.qe++,8!=(15&(s.method=e.ft(e.nt++)))){s.mode=lt,e.Le="unknown compression method",s.marker=5;break}if(8+(s.method>>4)>s.zt){s.mode=lt,e.Le="invalid win size",s.marker=5;break}s.mode=1;case 1:if(0===e.We)return n;if(n=t,e.We--,e.qe++,r=255&e.ft(e.nt++),((s.method<<8)+r)%31!=0){s.mode=lt,e.Le="incorrect header check",s.marker=5;break}if(0==(32&r)){s.mode=7;break}s.mode=2;case 2:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St=(255&e.ft(e.nt++))<<24&4278190080,s.mode=3;case 3:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<16&16711680,s.mode=4;case 4:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<8&65280,s.mode=5;case 5:return 0===e.We?n:(n=t,e.We--,e.qe++,s.St+=255&e.ft(e.nt++),s.mode=6,2);case 6:return s.mode=lt,e.Le="need dictionary",s.marker=0,Xe;case 7:if(n=s.kt.ut(e,n),n==Ye){s.mode=lt,s.marker=0;break}if(0==n&&(n=t),1!=n)return n;n=t,s.kt.reset(e,s.vt),s.mode=12;case 12:return e.We=0,1;case lt:return Ye;default:return Xe}},e.At=(e,t,n)=>{let r=0,s=n;if(!e||!e.gt||6!=e.gt.mode)return Xe;const i=e.gt;return s<1<<i.zt||(s=(1<<i.zt)-1,r=n-s),i.kt.yt(t,r,s),i.mode=7,0},e.It=e=>{let n,r,s,i,o;if(!e||!e.gt)return Xe;const c=e.gt;if(c.mode!=lt&&(c.mode=lt,c.marker=0),0===(n=e.We))return Ze;for(r=e.nt,s=c.marker;0!==n&&4>s;)e.ft(r)==ut[s]?s++:s=0!==e.ft(r)?0:4-s,r++,n--;return e.qe+=r-e.nt,e.nt=r,e.We=n,c.marker=s,4!=s?Ye:(i=e.qe,o=e.Ge,t(e),e.qe=i,e.Ge=o,c.mode=7,0)},e.Dt=e=>e&&e.gt&&e.gt.kt?e.gt.kt.bt():Xe}function ht(){}function dt(e){const t=new ht,n=e&&e.chunkSize?r.floor(2*e.chunkSize):131072,o=new i(n);let c=!1;t.xt(),t.$e=o,this.append=(e,r)=>{const f=[];let a,l,u=0,w=0,h=0;if(0!==e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,0!==t.We||c||(t.nt=0,c=!0),a=t._t(0),c&&a===Ze){if(0!==t.We)throw new s("inflating: bad input")}else if(0!==a&&1!==a)throw new s("inflating: "+t.Le);if((c||1===a)&&t.We===e.length)throw new s("inflating: bad input");t.rt&&(t.rt===n?f.push(new i(o)):f.push(o.subarray(0,t.rt))),h+=t.rt,r&&t.nt>0&&t.nt!=u&&(r(t.nt),u=t.nt)}while(t.We>0||0===t.tt);return f.length>1?(l=new i(h),f.forEach((e=>{l.set(e,w),w+=e.length}))):l=f[0]?new i(f[0]):new i,l}},this.flush=()=>{t.Ct()}}ht.prototype={xt(e){const t=this;return t.gt=new wt,e||(e=15),t.gt.xt(t,e)},_t(e){const t=this;return t.gt?t.gt._t(t,e):Xe},Ct(){const e=this;if(!e.gt)return Xe;const t=e.gt.Ct(e);return e.gt=null,t},It(){const e=this;return e.gt?e.gt.It(e):Xe},At(e,t){const n=this;return n.gt?n.gt.At(n,e,t):Xe},ft(e){return this.et[e]},je(e,t){return this.et.subarray(e,e+t)}},self.initCodec=()=>{self.Deflate=Qe,self.Inflate=dt};\n'], { type: "text/javascript" }));
  e2({ workerScripts: { inflate: [t], deflate: [t] } });
}

// src/filesystem.ts
e(configure);
var fs = import_obsidian.Platform.isDesktopApp ? window.require("node:original-fs") : null;
var fsPromises = import_obsidian.Platform.isDesktopApp ? fs.promises : null;
var path = import_obsidian.Platform.isDesktopApp ? window.require("node:path") : null;
var url = import_obsidian.Platform.isDesktopApp ? window.require("node:url") : null;
function nodeBufferToArrayBuffer(buffer, offset = 0, length = buffer.byteLength) {
  return buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
}
var NodePickedFile = class {
  constructor(filepath) {
    this.type = "file";
    this.filepath = filepath;
    let name = this.name = path.basename(filepath);
    this.fullpath = name;
    let extension = path.extname(name);
    this.extension = extension.substring(1).toLowerCase();
    this.basename = path.basename(name, extension);
  }
  async readText() {
    return fsPromises.readFile(this.filepath, "utf8");
  }
  async read() {
    let buffer = await fsPromises.readFile(this.filepath);
    return nodeBufferToArrayBuffer(buffer);
  }
  async readZip(callback) {
    let fd = null;
    try {
      fd = await fsPromises.open(this.filepath, "r");
      let stat = await fd.stat();
      return await callback(new ZipReader(new FSReader(fd, stat.size)));
    } finally {
      await (fd == null ? void 0 : fd.close());
    }
  }
  createReadStream() {
    return fs.createReadStream(this.filepath);
  }
  toString() {
    return this.filepath;
  }
};
var NodePickedFolder = class {
  constructor(filepath) {
    this.type = "folder";
    this.filepath = filepath;
    this.name = path.basename(filepath);
  }
  async list() {
    let { filepath } = this;
    let files = await fsPromises.readdir(filepath, { withFileTypes: true });
    let results = [];
    for (let file of files) {
      if (file.isFile()) {
        results.push(new NodePickedFile(path.join(filepath, file.name)));
      } else if (file.isDirectory()) {
        results.push(new NodePickedFolder(path.join(filepath, file.name)));
      }
    }
    return results;
  }
  toString() {
    return this.filepath;
  }
};
var WebPickedFile = class {
  constructor(file) {
    this.type = "file";
    this.file = file;
    let name = this.name = file.name;
    this.fullpath = name;
    let { basename, extension } = parseFilePath(name);
    this.basename = basename;
    this.extension = extension;
  }
  readText() {
    let { file } = this;
    if (file.text) {
      return file.text();
    }
    return new Promise((resolve, reject) => {
      let reader = new FileReader();
      reader.addEventListener("load", () => resolve(reader.result));
      reader.addEventListener("error", reject);
      reader.readAsText(this.file);
    });
  }
  async read() {
    let { file } = this;
    if (file.arrayBuffer) {
      return file.arrayBuffer();
    }
    return new Promise((resolve, reject) => {
      let reader = new FileReader();
      reader.addEventListener("load", () => resolve(reader.result));
      reader.addEventListener("error", reject);
      reader.readAsArrayBuffer(this.file);
    });
  }
  async readZip(callback) {
    return callback(new ZipReader(new BlobReader(this.file)));
  }
  toString() {
    return this.file.toString();
  }
};
async function getAllFiles(files, filter) {
  let results = [];
  for (let file of files) {
    if (file.type === "folder") {
      results.push(...await getAllFiles(await file.list(), filter));
    } else if (file.type === "file") {
      if (!filter || filter(file)) {
        results.push(file);
      }
    }
  }
  return results;
}
function parseFilePath(filepath) {
  let lastIndex = Math.max(filepath.lastIndexOf("/"), filepath.lastIndexOf("\\"));
  let name = filepath;
  let parent = "";
  if (lastIndex >= 0) {
    name = filepath.substring(lastIndex + 1);
    parent = filepath.substring(0, lastIndex);
  }
  let dotIndex = name.lastIndexOf(".");
  let basename = name;
  let extension = "";
  if (dotIndex > 0) {
    basename = name.substring(0, dotIndex);
    extension = name.substring(dotIndex + 1).toLowerCase();
  }
  return { parent, name, basename, extension };
}
var FSReader = class extends Reader {
  constructor(fd, size) {
    super(fd);
    this.fd = fd;
    this.size = size;
  }
  async readUint8Array(offset, length) {
    let buffer = Buffer.alloc(length);
    let result = await this.fd.read(buffer, 0, length, offset);
    return new Uint8Array(nodeBufferToArrayBuffer(buffer, 0, result.bytesRead));
  }
};

// src/format-importer.ts
var import_obsidian3 = require("obsidian");

// src/util.ts
var import_obsidian2 = require("obsidian");
var illegalRe = /[\/\?<>\\:\*\|"]/g;
var controlRe = /[\x00-\x1f\x80-\x9f]/g;
var reservedRe = /^\.+$/;
var windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i;
var windowsTrailingRe = /[\. ]+$/;
var startsWithDotRe = /^\./;
var squareBracketOpenRe = /\[/g;
var squareBracketCloseRe = /\]/g;
function sanitizeFileName(name) {
  return name.replace(illegalRe, "").replace(controlRe, "").replace(reservedRe, "").replace(windowsReservedRe, "").replace(windowsTrailingRe, "").replace(squareBracketOpenRe, "").replace(squareBracketCloseRe, "").replace(startsWithDotRe, "");
}
function genUid(length) {
  let array = [];
  for (let i = 0; i < length; i++) {
    array.push((Math.random() * 16 | 0).toString(16));
  }
  return array.join("");
}
function parseHTML(html) {
  return new DOMParser().parseFromString(html, "text/html").documentElement;
}
function uint8arrayToArrayBuffer(input) {
  return input.buffer.slice(input.byteOffset, input.byteOffset + input.byteLength);
}
function stringToUtf8(text) {
  return uint8arrayToArrayBuffer(new TextEncoder().encode(text));
}
function serializeFrontMatter(frontMatter) {
  if (!Object.isEmpty(frontMatter)) {
    return "---\n" + (0, import_obsidian2.stringifyYaml)(frontMatter) + "---\n";
  }
  return "";
}
function truncateText(text, limit, ellipses = "...") {
  if (text.length < limit) {
    return text;
  }
  return text.substring(0, limit) + ellipses;
}

// src/format-importer.ts
var MAX_PATH_DESCRIPTION_LENGTH = 300;
var FormatImporter = class {
  constructor(app, modal) {
    this.files = [];
    this.outputLocation = "";
    this.app = app;
    this.vault = app.vault;
    this.modal = modal;
    this.init();
  }
  /**
   * Register a function to be called when the `obsidian://importer-auth/` open
   * event is received by Obsidian.
   *
   * Note: The callback will be cleared after being called. It must be
   * reregistered if a subsequent auth event is expected.
   */
  registerAuthCallback(callback) {
    this.modal.plugin.registerAuthCallback(callback);
  }
  addFileChooserSetting(name, extensions2, allowMultiple = false) {
    let fileLocationSetting = new import_obsidian3.Setting(this.modal.contentEl).setName("Files to import").setDesc("Pick the files that you want to import.").addButton((button) => button.setButtonText(allowMultiple ? "Choose files" : "Choose file").onClick(async () => {
      if (import_obsidian3.Platform.isDesktopApp) {
        let properties = ["openFile", "dontAddToRecent"];
        if (allowMultiple) {
          properties.push("multiSelections");
        }
        let filePaths = window.electron.remote.dialog.showOpenDialogSync({
          title: "Pick files to import",
          properties,
          filters: [{ name, extensions: extensions2 }]
        });
        if (filePaths && filePaths.length > 0) {
          this.files = filePaths.map((filepath) => new NodePickedFile(filepath));
          updateFiles();
        }
      } else {
        let inputEl = createEl("input");
        inputEl.type = "file";
        inputEl.accept = extensions2.map((e2) => "." + e2.toLowerCase()).join(",");
        inputEl.addEventListener("change", () => {
          if (!inputEl.files)
            return;
          let files = Array.from(inputEl.files);
          if (files.length > 0) {
            this.files = files.map((file) => new WebPickedFile(file)).filter((file) => extensions2.contains(file.extension));
            updateFiles();
          }
        });
        inputEl.click();
      }
    }));
    if (allowMultiple && import_obsidian3.Platform.isDesktopApp) {
      fileLocationSetting.addButton((button) => button.setButtonText("Choose folders").onClick(async () => {
        if (import_obsidian3.Platform.isDesktopApp) {
          let filePaths = window.electron.remote.dialog.showOpenDialogSync({
            title: "Pick folders to import",
            properties: ["openDirectory", "multiSelections", "dontAddToRecent"]
          });
          if (filePaths && filePaths.length > 0) {
            fileLocationSetting.setDesc("Reading folders...");
            let folders = filePaths.map((filepath) => new NodePickedFolder(filepath));
            this.files = await getAllFiles(folders, (file) => extensions2.contains(file.extension));
            updateFiles();
          }
        }
      }));
    }
    let updateFiles = () => {
      let descriptionFragment = document.createDocumentFragment();
      let fileCount = this.files.length;
      let pathText = this.files.map((f) => f.name).join(", ");
      if (pathText.length > MAX_PATH_DESCRIPTION_LENGTH) {
        pathText = pathText.substring(0, MAX_PATH_DESCRIPTION_LENGTH) + "...";
      }
      descriptionFragment.createEl("span", { text: `These ${fileCount} files will be imported: ` });
      descriptionFragment.createEl("br");
      descriptionFragment.createEl("span", { cls: "u-pop", text: pathText });
      fileLocationSetting.setDesc(descriptionFragment);
    };
  }
  addOutputLocationSetting(defaultExportFolderName) {
    this.outputLocation = defaultExportFolderName;
    new import_obsidian3.Setting(this.modal.contentEl).setName("Output folder").setDesc("Choose a folder in the vault to put the imported files. Leave empty to output to vault root.").addText((text) => text.setValue(defaultExportFolderName).onChange((value) => this.outputLocation = value));
  }
  async getOutputFolder() {
    let { vault } = this.app;
    let folderPath = this.outputLocation;
    if (folderPath === "") {
      folderPath = "/";
    }
    let folder = vault.getAbstractFileByPath(folderPath);
    if (folder === null || !(folder instanceof import_obsidian3.TFolder)) {
      await vault.createFolder(folderPath);
      folder = vault.getAbstractFileByPath(folderPath);
    }
    if (folder instanceof import_obsidian3.TFolder) {
      return folder;
    }
    return null;
  }
  // Utility functions for vault
  /**
   * Recursively create folders, if they don't exist.
   */
  async createFolders(path2) {
    let normalizedPath = (0, import_obsidian3.normalizePath)(path2);
    let folder = this.vault.getAbstractFileByPathInsensitive(normalizedPath);
    if (folder && folder instanceof import_obsidian3.TFolder) {
      return folder;
    }
    await this.vault.createFolder(normalizedPath);
    folder = this.vault.getAbstractFileByPathInsensitive(normalizedPath);
    if (!(folder instanceof import_obsidian3.TFolder)) {
      throw new Error(`Failed to create folder at "${path2}"`);
    }
    return folder;
  }
  async saveAsMarkdownFile(folder, title, content) {
    let sanitizedName = sanitizeFileName(title);
    return await this.app.fileManager.createNewMarkdownFile(folder, sanitizedName, content);
  }
};

// src/zip.ts
var ZipEntryFile = class {
  constructor(zip, entry) {
    this.type = "file";
    this.entry = entry;
    this.fullpath = zip.fullpath + "/" + entry.filename;
    let { parent, name, basename, extension } = parseFilePath(entry.filename);
    this.parent = parent;
    this.name = name;
    this.basename = basename;
    this.extension = extension;
  }
  async readText() {
    return this.entry.getData(new TextWriter());
  }
  async read() {
    return (await this.entry.getData(new BlobWriter())).arrayBuffer();
  }
  get filepath() {
    return this.entry.filename;
  }
  get size() {
    return this.entry.uncompressedSize;
  }
  get ctime() {
    return this.entry.creationDate;
  }
  get mtime() {
    return this.entry.lastModDate;
  }
  async readZip(callback) {
    return callback(new ZipReader(new BlobReader(new Blob([await this.read()]))));
  }
};
async function readZip(file, callback) {
  await file.readZip(async (zip) => {
    let entries = await zip.getEntries();
    let files = entries.filter((entry) => !entry.directory && !!entry.getData).map((entry) => new ZipEntryFile(file, entry));
    return callback(zip, files);
  });
}

// src/formats/bear-bear2bk.ts
var Bear2bkImporter = class extends FormatImporter {
  init() {
    this.addFileChooserSetting("Bear2bk", ["bear2bk"]);
    this.addOutputLocationSetting("Bear");
  }
  async import(ctx) {
    let { files } = this;
    if (files.length === 0) {
      new import_obsidian4.Notice("Please pick at least one file to import.");
      return;
    }
    let folder = await this.getOutputFolder();
    if (!folder) {
      new import_obsidian4.Notice("Please select a location to export to.");
      return;
    }
    let outputFolder = folder;
    const attachmentsFolderPath = await this.createFolders(`${folder.path}/assets`);
    const assetMatcher = /!\[\]\(assets\//g;
    for (let file of files) {
      if (ctx.isCancelled())
        return;
      ctx.status("Processing " + file.name);
      await readZip(file, async (zip, entries) => {
        for (let entry of entries) {
          if (ctx.isCancelled())
            return;
          let { fullpath, filepath, parent, name, extension } = entry;
          ctx.status("Processing " + name);
          try {
            if (extension === "md" || extension === "markdown") {
              const mdFilename = parseFilePath(parent).basename;
              ctx.status("Importing note " + mdFilename);
              let mdContent = await entry.readText();
              if (mdContent.match(assetMatcher)) {
                mdContent = mdContent.replace(assetMatcher, `![](${attachmentsFolderPath.path}/`);
              }
              let filePath = (0, import_obsidian4.normalizePath)(mdFilename);
              await this.saveAsMarkdownFile(outputFolder, filePath, mdContent);
              ctx.reportNoteSuccess(mdFilename);
            } else if (filepath.match(/\/assets\//g)) {
              ctx.status("Importing asset " + name);
              const assetFileVaultPath = `${attachmentsFolderPath.path}/${name}`;
              const existingFile = this.vault.getAbstractFileByPath(assetFileVaultPath);
              if (existingFile) {
                ctx.reportSkipped(fullpath);
              } else {
                const assetData = await entry.read();
                await this.vault.createBinary(assetFileVaultPath, assetData);
                ctx.reportAttachmentSuccess(fullpath);
              }
            } else {
              ctx.reportSkipped(fullpath);
            }
          } catch (e2) {
            ctx.reportFailed(fullpath, e2);
          }
        }
      });
    }
  }
};

// src/formats/evernote-enex.ts
var import_obsidian10 = require("obsidian");

// src/formats/yarle/yarle.ts
var import_obsidian9 = require("obsidian");

// src/formats/yarle/models/EvernoteTask.ts
var import_obsidian5 = require("obsidian");
var mapEvernoteTask = (pureTask) => {
  return {
    ...pureTask,
    created: getDateFromProperty(pureTask.created),
    statusupdated: getDateFromProperty(pureTask.statusupdated),
    updated: getDateFromProperty(pureTask.updated),
    duedate: getDateFromProperty(pureTask.duedate),
    taskflag: pureTask.taskflag === "true",
    reminderdate: pureTask.reminder ? getDateFromProperty(pureTask.reminder.reminderdate) : void 0,
    sortweight: pureTask.sortweight
  };
};
var getDateFromProperty = (property) => {
  return property ? (0, import_obsidian5.moment)(property, "YYYYMMDDThhmmssZ").toDate() : void 0;
};

// node_modules/joplin-turndown-plugin-gfm/lib/turndown-plugin-gfm.es.js
var highlightRegExp = /highlight-(?:text|source)-([a-z0-9]+)/;
function highlightedCodeBlock(turndownService) {
  turndownService.addRule("highlightedCodeBlock", {
    filter: function(node) {
      var firstChild = node.firstChild;
      return node.nodeName === "DIV" && highlightRegExp.test(node.className) && firstChild && firstChild.nodeName === "PRE";
    },
    replacement: function(content, node, options) {
      var className = node.className || "";
      var language = (className.match(highlightRegExp) || [null, ""])[1];
      return "\n\n" + options.fence + language + "\n" + node.firstChild.textContent + "\n" + options.fence + "\n\n";
    }
  });
}
function strikethrough(turndownService) {
  turndownService.addRule("strikethrough", {
    filter: ["del", "s", "strike"],
    replacement: function(content) {
      return "~" + content + "~";
    }
  });
}
var indexOf = Array.prototype.indexOf;
var every = Array.prototype.every;
var rules = {};
rules.tableCell = {
  filter: ["th", "td"],
  replacement: function(content, node) {
    if (tableShouldBeSkipped(nodeParentTable(node)))
      return content;
    return cell(content, node);
  }
};
rules.tableRow = {
  filter: "tr",
  replacement: function(content, node) {
    const parentTable = nodeParentTable(node);
    if (tableShouldBeSkipped(parentTable))
      return content;
    var borderCells = "";
    var alignMap = { left: ":--", right: "--:", center: ":-:" };
    if (isHeadingRow(node)) {
      const colCount = tableColCount(parentTable);
      for (var i = 0; i < colCount; i++) {
        const childNode = colCount >= node.childNodes.length ? null : node.childNodes[i];
        var border2 = "---";
        var align = childNode ? (childNode.getAttribute("align") || "").toLowerCase() : "";
        if (align)
          border2 = alignMap[align] || border2;
        if (childNode) {
          borderCells += cell(border2, node.childNodes[i]);
        } else {
          borderCells += cell(border2, null, i);
        }
      }
    }
    return "\n" + content + (borderCells ? "\n" + borderCells : "");
  }
};
rules.table = {
  // Only convert tables with a heading row.
  // Tables with no heading row are kept using `keep` (see below).
  filter: function(node) {
    return node.nodeName === "TABLE";
  },
  replacement: function(content, node) {
    if (tableShouldBeSkipped(node))
      return content;
    content = content.replace(/\n+/g, "\n");
    var secondLine = content.trim().split("\n");
    if (secondLine.length >= 2)
      secondLine = secondLine[1];
    var secondLineIsDivider = secondLine.indexOf("| ---") === 0;
    var columnCount = tableColCount(node);
    var emptyHeader = "";
    if (columnCount && !secondLineIsDivider) {
      emptyHeader = "|" + "     |".repeat(columnCount) + "\n|" + " --- |".repeat(columnCount);
    }
    return "\n\n" + emptyHeader + content + "\n\n";
  }
};
rules.tableSection = {
  filter: ["thead", "tbody", "tfoot"],
  replacement: function(content) {
    return content;
  }
};
function isHeadingRow(tr) {
  var parentNode = tr.parentNode;
  return parentNode.nodeName === "THEAD" || parentNode.firstChild === tr && (parentNode.nodeName === "TABLE" || isFirstTbody(parentNode)) && every.call(tr.childNodes, function(n) {
    return n.nodeName === "TH";
  });
}
function isFirstTbody(element) {
  var previousSibling = element.previousSibling;
  return element.nodeName === "TBODY" && (!previousSibling || previousSibling.nodeName === "THEAD" && /^\s*$/i.test(previousSibling.textContent));
}
function cell(content, node = null, index = null) {
  if (index === null)
    index = indexOf.call(node.parentNode.childNodes, node);
  var prefix = " ";
  if (index === 0)
    prefix = "| ";
  let filteredContent = content.trim().replace(/\n\r/g, "<br>").replace(/\n/g, "<br>");
  filteredContent = filteredContent.replace(/\|+/g, "\\|");
  while (filteredContent.length < 3)
    filteredContent += " ";
  if (node)
    filteredContent = handleColSpan(filteredContent, node, " ");
  return prefix + filteredContent + " |";
}
function nodeContainsTable(node) {
  if (!node.childNodes)
    return false;
  for (let i = 0; i < node.childNodes.length; i++) {
    const child = node.childNodes[i];
    if (child.nodeName === "TABLE")
      return true;
    if (nodeContainsTable(child))
      return true;
  }
  return false;
}
function tableShouldBeSkipped(tableNode) {
  if (!tableNode)
    return true;
  if (!tableNode.rows)
    return true;
  if (tableNode.rows.length === 1 && tableNode.rows[0].childNodes.length <= 1)
    return true;
  if (nodeContainsTable(tableNode))
    return true;
  return false;
}
function nodeParentTable(node) {
  let parent = node.parentNode;
  while (parent.nodeName !== "TABLE") {
    parent = parent.parentNode;
    if (!parent)
      return null;
  }
  return parent;
}
function handleColSpan(content, node, emptyChar) {
  const colspan = node.getAttribute("colspan") || 1;
  for (let i = 1; i < colspan; i++) {
    content += " | " + emptyChar.repeat(3);
  }
  return content;
}
function tableColCount(node) {
  let maxColCount = 0;
  for (let i = 0; i < node.rows.length; i++) {
    const row = node.rows[i];
    const colCount = row.childNodes.length;
    if (colCount > maxColCount)
      maxColCount = colCount;
  }
  return maxColCount;
}
function tables(turndownService) {
  turndownService.keep(function(node) {
    return node.nodeName === "TABLE";
  });
  for (var key in rules)
    turndownService.addRule(key, rules[key]);
}
function taskListItems(turndownService) {
  turndownService.addRule("taskListItems", {
    filter: function(node) {
      return node.type === "checkbox" && node.parentNode.nodeName === "LI";
    },
    replacement: function(content, node) {
      return (node.checked ? "[x]" : "[ ]") + " ";
    }
  });
}
function gfm(turndownService) {
  turndownService.use([
    highlightedCodeBlock,
    strikethrough,
    tables,
    taskListItems
  ]);
}

// src/formats/yarle/utils/turndown-rules/filter-by-nodename.ts
var filterByNodeName = (nodename) => {
  return (node) => {
    return node.nodeName === nodename || node.nodeName.toLowerCase() === nodename;
  };
};

// src/formats/yarle/utils/turndown-rules/get-attribute-proxy.ts
var getAttributeProxy = (node) => {
  const handler = {
    get(target, key) {
      return target[key];
    }
  };
  return new Proxy(node.attributes, handler);
};

// src/formats/yarle/utils/turndown-rules/replace-code-block.ts
var markdownBlock = "\n```\n";
var isCodeBlock = (node) => {
  const nodeProxy = getAttributeProxy(node);
  const codeBlockFlag2 = "-en-codeblock:true";
  return nodeProxy.style && nodeProxy.style.value.indexOf(codeBlockFlag2) >= 0;
};
var getIntendNumber = (node) => {
  const nodeProxy = getAttributeProxy(node);
  const paddingAttr = "padding-left:";
  let intendNumber = 0;
  if (nodeProxy.style && nodeProxy.style.value.indexOf(paddingAttr) >= 0) {
    intendNumber = Math.floor(nodeProxy.style.value.split(paddingAttr)[1].split("px")[0] / 20);
  }
  return intendNumber;
};
var unescapeMarkdown = (s) => s.replace(/\\(.)/g, "$1");
var codeBlockRule = {
  filter: filterByNodeName("DIV"),
  replacement: (content, node) => {
    return replaceCodeBlock(content, node);
  }
};
var replaceCodeBlock = (content, node) => {
  const nodeProxy = getAttributeProxy(node);
  const intend = getIntendNumber(node);
  content = `${"	".repeat(intend)}${content}`;
  if (isCodeBlock(node)) {
    content = unescapeMarkdown(content);
    return `${markdownBlock}${content}${markdownBlock}`;
  }
  if (node.parentElement && isCodeBlock(node.parentElement) && node.parentElement.firstElementChild === node) {
    return `${content}`;
  }
  if (node.parentElement && isCodeBlock(node.parentElement)) {
    return `
${content}`;
  }
  const childHtml = node.innerHTML;
  return node.isBlock ? `
${content}
` : content;
};

// src/formats/yarle/utils/turndown-rules/replace-monospace-code-block.ts
var markdownBlock2 = "\n```\n";
var codeBlockFlag = "-en-codeblock:true";
var reMonospaceFont = /\b(Courier|Mono|Consolas|Console|Inconsolata|Pitch|Monaco|monospace)\b/;
var deepestFont = (node) => {
  var _a, _b;
  if (node.nodeType !== 1) {
    return null;
  }
  const children = node.childNodes;
  const numChildren = children.length;
  if (numChildren > 1) {
    return "mixed";
  }
  if (numChildren === 1) {
    const font = deepestFont(children[0]);
    if (font) {
      return font;
    }
  }
  const nodeProxy = getAttributeProxy(node);
  if (node.tagName === "FONT") {
    return (_a = nodeProxy.face) == null ? void 0 : _a.value;
  }
  const style = (_b = nodeProxy.style) == null ? void 0 : _b.value;
  if (style) {
    const match = style.match(/font-family:([^;]+)/);
    if (match) {
      return match[1];
    }
  }
  return null;
};
var isMonospaceCodeBlock = (node) => {
  var _a;
  const nodeProxy = getAttributeProxy(node);
  const style = (_a = nodeProxy.style) == null ? void 0 : _a.value;
  if (style && style.includes(codeBlockFlag)) {
    return true;
  }
  const font = deepestFont(node);
  return !!font && reMonospaceFont.test(font);
};
var replaceMonospaceCodeBlock = (content, node) => {
  if (isMonospaceCodeBlock(node)) {
    const previous = node.previousSibling;
    const previousIsBlock = previous && previous.tagName === node.tagName && isMonospaceCodeBlock(previous);
    const next = node.nextSibling;
    const nextIsBlock = next && next.tagName === node.tagName && isMonospaceCodeBlock(next);
    if (previousIsBlock || nextIsBlock) {
      content = previousIsBlock ? `
${content}` : `${markdownBlock2}${content}`;
      content = nextIsBlock ? `${content}
` : `${content}${markdownBlock2}`;
      return content;
    }
    content = unescapeMarkdown(content);
    return content.trim() ? `${markdownBlock2}${content}${markdownBlock2}` : content;
  }
  if (node.parentElement && isMonospaceCodeBlock(node.parentElement) && node.parentElement.firstElementChild === node) {
    return content;
  }
  if (node.parentElement && isMonospaceCodeBlock(node.parentElement)) {
    return `
${content}`;
  }
  return node.isBlock ? `
${content}
` : content;
};

// src/formats/yarle/utils/turndown-rules/images-rule.ts
var imagesRule = {
  filter: filterByNodeName("IMG"),
  replacement: (content, node) => {
    const nodeProxy = getAttributeProxy(node);
    if (!nodeProxy.src) {
      return "";
    }
    const value = nodeProxy.src.value;
    const widthParam = node.width || "";
    const heightParam = node.height || "";
    let realValue = value;
    if (yarleOptions.sanitizeResourceNameSpaces) {
      realValue = realValue.replace(/ /g, yarleOptions.replacementChar);
    } else if (yarleOptions.urlEncodeFileNamesAndLinks) {
      realValue = encodeURI(realValue);
    }
    let sizeString = widthParam || heightParam ? ` =${widthParam}x${heightParam}` : "";
    if (yarleOptions.keepImageSize) {
      sizeString = widthParam || heightParam ? `|${widthParam || 0}x${heightParam || 0}` : "";
      if (realValue.startsWith("./")) {
        return `![[${realValue}${sizeString}]]`;
      } else {
        return `![${sizeString}](${realValue})`;
      }
    }
    if (!value.match(/^[a-z]+:/)) {
      return `![[${realValue}]]`;
    }
    const srcSpl = nodeProxy.src.value.split("/");
    return `![${srcSpl[srcSpl.length - 1]}](${realValue})`;
  }
};

// src/formats/yarle/runtime-properties.ts
var RuntimePropertiesSingleton = class {
  constructor() {
    this.noteIdNameMap = {};
    this.noteIdNameTOCMap = {};
  }
  static getInstance() {
    if (!RuntimePropertiesSingleton.instance) {
      RuntimePropertiesSingleton.instance = new RuntimePropertiesSingleton();
    }
    return RuntimePropertiesSingleton.instance;
  }
  addItemToMap(linkItem) {
    this.noteIdNameMap[linkItem.url] = {
      ...this.noteIdNameMap[linkItem.url],
      title: linkItem.title,
      noteName: this.currentNoteName,
      notebookName: this.currentNotebookName,
      uniqueEnd: linkItem.uniqueEnd
    };
  }
  addItemToTOCMap(linkItem) {
    this.noteIdNameTOCMap[linkItem.url] = {
      ...this.noteIdNameMap[linkItem.url],
      title: linkItem.title,
      noteName: this.currentNoteName,
      notebookName: this.currentNotebookName,
      uniqueEnd: linkItem.uniqueEnd
    };
  }
  getNoteIdNameMap() {
    return this.noteIdNameMap;
  }
  getNoteIdNameTOCMap() {
    return this.noteIdNameTOCMap;
  }
  getAllNoteIdNameMap() {
    return {
      ...this.noteIdNameMap,
      ...this.noteIdNameTOCMap
    };
  }
  getNoteIdNameMapByNoteTitle(noteTitle) {
    return Object.values(this.getAllNoteIdNameMap()).filter((noteIdName) => noteIdName.title === noteTitle);
  }
  setCurrentNotebookName(currentNotebookName) {
    this.currentNotebookName = currentNotebookName;
  }
  setCurrentNoteName(currentNoteName) {
    this.currentNoteName = currentNoteName;
  }
  getCurrentNoteName() {
    return this.currentNoteName;
  }
  getCurrentNotePath() {
    return this.currentNotePath;
  }
  setCurrentNotePath(value) {
    this.currentNotePath = value;
  }
};

// src/formats/yarle/utils/filename-utils.ts
var import_obsidian6 = require("obsidian");

// src/formats/yarle/utils/escape-string-regexp.ts
var escapeStringRegexp = (text) => {
  return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
};

// src/mime.ts
var extensions = {
  "application/andrew-inset": "ez",
  "application/applixware": "aw",
  "application/atom+xml": "atom",
  "application/atomcat+xml": "atomcat",
  "application/atomdeleted+xml": "atomdeleted",
  "application/atomsvc+xml": "atomsvc",
  "application/atsc-dwd+xml": "dwd",
  "application/atsc-held+xml": "held",
  "application/atsc-rsat+xml": "rsat",
  "application/bdoc": "bdoc",
  "application/calendar+xml": "xcs",
  "application/ccxml+xml": "ccxml",
  "application/cdfx+xml": "cdfx",
  "application/cdmi-capability": "cdmia",
  "application/cdmi-container": "cdmic",
  "application/cdmi-domain": "cdmid",
  "application/cdmi-object": "cdmio",
  "application/cdmi-queue": "cdmiq",
  "application/cpl+xml": "cpl",
  "application/cu-seeme": "cu",
  "application/dash+xml": "mpd",
  "application/dash-patch+xml": "mpp",
  "application/davmount+xml": "davmount",
  "application/docbook+xml": "dbk",
  "application/dssc+der": "dssc",
  "application/dssc+xml": "xdssc",
  "application/ecmascript": "es",
  "application/emma+xml": "emma",
  "application/emotionml+xml": "emotionml",
  "application/epub+zip": "epub",
  "application/exi": "exi",
  "application/express": "exp",
  "application/fdt+xml": "fdt",
  "application/font-tdpfr": "pfr",
  "application/geo+json": "geojson",
  "application/gml+xml": "gml",
  "application/gpx+xml": "gpx",
  "application/gxf": "gxf",
  "application/gzip": "gz",
  "application/hjson": "hjson",
  "application/hyperstudio": "stk",
  "application/inkml+xml": "ink",
  "application/ipfix": "ipfix",
  "application/its+xml": "its",
  "application/java-archive": "jar",
  "application/java-serialized-object": "ser",
  "application/java-vm": "class",
  "application/javascript": "js",
  "application/json": "json",
  "application/json5": "json5",
  "application/jsonml+json": "jsonml",
  "application/ld+json": "jsonld",
  "application/lgr+xml": "lgr",
  "application/lost+xml": "lostxml",
  "application/mac-binhex40": "hqx",
  "application/mac-compactpro": "cpt",
  "application/mads+xml": "mads",
  "application/manifest+json": "webmanifest",
  "application/marc": "mrc",
  "application/marcxml+xml": "mrcx",
  "application/mathematica": "ma",
  "application/mathml+xml": "mathml",
  "application/mbox": "mbox",
  "application/media-policy-dataset+xml": "mpf",
  "application/mediaservercontrol+xml": "mscml",
  "application/metalink+xml": "metalink",
  "application/metalink4+xml": "meta4",
  "application/mets+xml": "mets",
  "application/mmt-aei+xml": "maei",
  "application/mmt-usd+xml": "musd",
  "application/mods+xml": "mods",
  "application/mp21": "m21",
  "application/mp4": "mp4s",
  "application/msword": "doc",
  "application/mxf": "mxf",
  "application/n-quads": "nq",
  "application/n-triples": "nt",
  "application/node": "cjs",
  "application/octet-stream": "bin",
  "application/oda": "oda",
  "application/oebps-package+xml": "opf",
  "application/ogg": "ogx",
  "application/omdoc+xml": "omdoc",
  "application/onenote": "onetoc",
  "application/oxps": "oxps",
  "application/p2p-overlay+xml": "relo",
  "application/patch-ops-error+xml": "xer",
  "application/pdf": "pdf",
  "application/pgp-encrypted": "pgp",
  "application/pgp-keys": "asc",
  "application/pgp-signature": "asc",
  "application/pics-rules": "prf",
  "application/pkcs10": "p10",
  "application/pkcs7-mime": "p7m",
  "application/pkcs7-signature": "p7s",
  "application/pkcs8": "p8",
  "application/pkix-attr-cert": "ac",
  "application/pkix-cert": "cer",
  "application/pkix-crl": "crl",
  "application/pkix-pkipath": "pkipath",
  "application/pkixcmp": "pki",
  "application/pls+xml": "pls",
  "application/postscript": "ai",
  "application/provenance+xml": "provx",
  "application/prs.cww": "cww",
  "application/pskc+xml": "pskcxml",
  "application/raml+yaml": "raml",
  "application/rdf+xml": "rdf",
  "application/reginfo+xml": "rif",
  "application/relax-ng-compact-syntax": "rnc",
  "application/resource-lists+xml": "rl",
  "application/resource-lists-diff+xml": "rld",
  "application/rls-services+xml": "rs",
  "application/route-apd+xml": "rapd",
  "application/route-s-tsid+xml": "sls",
  "application/route-usd+xml": "rusd",
  "application/rpki-ghostbusters": "gbr",
  "application/rpki-manifest": "mft",
  "application/rpki-roa": "roa",
  "application/rsd+xml": "rsd",
  "application/rss+xml": "rss",
  "application/rtf": "rtf",
  "application/sbml+xml": "sbml",
  "application/scvp-cv-request": "scq",
  "application/scvp-cv-response": "scs",
  "application/scvp-vp-request": "spq",
  "application/scvp-vp-response": "spp",
  "application/sdp": "sdp",
  "application/senml+xml": "senmlx",
  "application/sensml+xml": "sensmlx",
  "application/set-payment-initiation": "setpay",
  "application/set-registration-initiation": "setreg",
  "application/shf+xml": "shf",
  "application/sieve": "siv",
  "application/smil+xml": "smi",
  "application/sparql-query": "rq",
  "application/sparql-results+xml": "srx",
  "application/srgs": "gram",
  "application/srgs+xml": "grxml",
  "application/sru+xml": "sru",
  "application/ssdl+xml": "ssdl",
  "application/ssml+xml": "ssml",
  "application/swid+xml": "swidtag",
  "application/tei+xml": "tei",
  "application/thraud+xml": "tfi",
  "application/timestamped-data": "tsd",
  "application/toml": "toml",
  "application/trig": "trig",
  "application/ttml+xml": "ttml",
  "application/ubjson": "ubj",
  "application/urc-ressheet+xml": "rsheet",
  "application/urc-targetdesc+xml": "td",
  "application/vnd.1000minds.decision-model+xml": "1km",
  "application/vnd.3gpp.pic-bw-large": "plb",
  "application/vnd.3gpp.pic-bw-small": "psb",
  "application/vnd.3gpp.pic-bw-var": "pvb",
  "application/vnd.3gpp2.tcap": "tcap",
  "application/vnd.3m.post-it-notes": "pwn",
  "application/vnd.accpac.simply.aso": "aso",
  "application/vnd.accpac.simply.imp": "imp",
  "application/vnd.acucobol": "acu",
  "application/vnd.acucorp": "atc",
  "application/vnd.adobe.air-application-installer-package+zip": "air",
  "application/vnd.adobe.formscentral.fcdt": "fcdt",
  "application/vnd.adobe.fxp": "fxp",
  "application/vnd.adobe.xdp+xml": "xdp",
  "application/vnd.adobe.xfdf": "xfdf",
  "application/vnd.age": "age",
  "application/vnd.ahead.space": "ahead",
  "application/vnd.airzip.filesecure.azf": "azf",
  "application/vnd.airzip.filesecure.azs": "azs",
  "application/vnd.amazon.ebook": "azw",
  "application/vnd.americandynamics.acc": "acc",
  "application/vnd.amiga.ami": "ami",
  "application/vnd.android.package-archive": "apk",
  "application/vnd.anser-web-certificate-issue-initiation": "cii",
  "application/vnd.anser-web-funds-transfer-initiation": "fti",
  "application/vnd.antix.game-component": "atx",
  "application/vnd.apple.installer+xml": "mpkg",
  "application/vnd.apple.keynote": "key",
  "application/vnd.apple.mpegurl": "m3u8",
  "application/vnd.apple.numbers": "numbers",
  "application/vnd.apple.pages": "pages",
  "application/vnd.apple.pkpass": "pkpass",
  "application/vnd.aristanetworks.swi": "swi",
  "application/vnd.astraea-software.iota": "iota",
  "application/vnd.audiograph": "aep",
  "application/vnd.balsamiq.bmml+xml": "bmml",
  "application/vnd.blueice.multipass": "mpm",
  "application/vnd.bmi": "bmi",
  "application/vnd.businessobjects": "rep",
  "application/vnd.chemdraw+xml": "cdxml",
  "application/vnd.chipnuts.karaoke-mmd": "mmd",
  "application/vnd.cinderella": "cdy",
  "application/vnd.citationstyles.style+xml": "csl",
  "application/vnd.claymore": "cla",
  "application/vnd.cloanto.rp9": "rp9",
  "application/vnd.clonk.c4group": "c4g",
  "application/vnd.cluetrust.cartomobile-config": "c11amc",
  "application/vnd.cluetrust.cartomobile-config-pkg": "c11amz",
  "application/vnd.commonspace": "csp",
  "application/vnd.contact.cmsg": "cdbcmsg",
  "application/vnd.cosmocaller": "cmc",
  "application/vnd.crick.clicker": "clkx",
  "application/vnd.crick.clicker.keyboard": "clkk",
  "application/vnd.crick.clicker.palette": "clkp",
  "application/vnd.crick.clicker.template": "clkt",
  "application/vnd.crick.clicker.wordbank": "clkw",
  "application/vnd.criticaltools.wbs+xml": "wbs",
  "application/vnd.ctc-posml": "pml",
  "application/vnd.cups-ppd": "ppd",
  "application/vnd.curl.car": "car",
  "application/vnd.curl.pcurl": "pcurl",
  "application/vnd.dart": "dart",
  "application/vnd.data-vision.rdz": "rdz",
  "application/vnd.dbf": "dbf",
  "application/vnd.dece.data": "uvf",
  "application/vnd.dece.ttml+xml": "uvt",
  "application/vnd.dece.unspecified": "uvx",
  "application/vnd.dece.zip": "uvz",
  "application/vnd.denovo.fcselayout-link": "fe_launch",
  "application/vnd.dna": "dna",
  "application/vnd.dolby.mlp": "mlp",
  "application/vnd.dpgraph": "dpg",
  "application/vnd.dreamfactory": "dfac",
  "application/vnd.ds-keypoint": "kpxx",
  "application/vnd.dvb.ait": "ait",
  "application/vnd.dvb.service": "svc",
  "application/vnd.dynageo": "geo",
  "application/vnd.ecowin.chart": "mag",
  "application/vnd.enliven": "nml",
  "application/vnd.epson.esf": "esf",
  "application/vnd.epson.msf": "msf",
  "application/vnd.epson.quickanime": "qam",
  "application/vnd.epson.salt": "slt",
  "application/vnd.epson.ssf": "ssf",
  "application/vnd.eszigno3+xml": "es3",
  "application/vnd.ezpix-album": "ez2",
  "application/vnd.ezpix-package": "ez3",
  "application/vnd.fdf": "fdf",
  "application/vnd.fdsn.mseed": "mseed",
  "application/vnd.fdsn.seed": "seed",
  "application/vnd.flographit": "gph",
  "application/vnd.fluxtime.clip": "ftc",
  "application/vnd.framemaker": "fm",
  "application/vnd.frogans.fnc": "fnc",
  "application/vnd.frogans.ltf": "ltf",
  "application/vnd.fsc.weblaunch": "fsc",
  "application/vnd.fujitsu.oasys": "oas",
  "application/vnd.fujitsu.oasys2": "oa2",
  "application/vnd.fujitsu.oasys3": "oa3",
  "application/vnd.fujitsu.oasysgp": "fg5",
  "application/vnd.fujitsu.oasysprs": "bh2",
  "application/vnd.fujixerox.ddd": "ddd",
  "application/vnd.fujixerox.docuworks": "xdw",
  "application/vnd.fujixerox.docuworks.binder": "xbd",
  "application/vnd.fuzzysheet": "fzs",
  "application/vnd.genomatix.tuxedo": "txd",
  "application/vnd.geogebra.file": "ggb",
  "application/vnd.geogebra.tool": "ggt",
  "application/vnd.geometry-explorer": "gex",
  "application/vnd.geonext": "gxt",
  "application/vnd.geoplan": "g2w",
  "application/vnd.geospace": "g3w",
  "application/vnd.gmx": "gmx",
  "application/vnd.google-apps.document": "gdoc",
  "application/vnd.google-apps.presentation": "gslides",
  "application/vnd.google-apps.spreadsheet": "gsheet",
  "application/vnd.google-earth.kml+xml": "kml",
  "application/vnd.google-earth.kmz": "kmz",
  "application/vnd.grafeq": "gqf",
  "application/vnd.groove-account": "gac",
  "application/vnd.groove-help": "ghf",
  "application/vnd.groove-identity-message": "gim",
  "application/vnd.groove-injector": "grv",
  "application/vnd.groove-tool-message": "gtm",
  "application/vnd.groove-tool-template": "tpl",
  "application/vnd.groove-vcard": "vcg",
  "application/vnd.hal+xml": "hal",
  "application/vnd.handheld-entertainment+xml": "zmm",
  "application/vnd.hbci": "hbci",
  "application/vnd.hhe.lesson-player": "les",
  "application/vnd.hp-hpgl": "hpgl",
  "application/vnd.hp-hpid": "hpid",
  "application/vnd.hp-hps": "hps",
  "application/vnd.hp-jlyt": "jlt",
  "application/vnd.hp-pcl": "pcl",
  "application/vnd.hp-pclxl": "pclxl",
  "application/vnd.hydrostatix.sof-data": "sfd-hdstx",
  "application/vnd.ibm.minipay": "mpy",
  "application/vnd.ibm.modcap": "afp",
  "application/vnd.ibm.rights-management": "irm",
  "application/vnd.ibm.secure-container": "sc",
  "application/vnd.iccprofile": "icc",
  "application/vnd.igloader": "igl",
  "application/vnd.immervision-ivp": "ivp",
  "application/vnd.immervision-ivu": "ivu",
  "application/vnd.insors.igm": "igm",
  "application/vnd.intercon.formnet": "xpw",
  "application/vnd.intergeo": "i2g",
  "application/vnd.intu.qbo": "qbo",
  "application/vnd.intu.qfx": "qfx",
  "application/vnd.ipunplugged.rcprofile": "rcprofile",
  "application/vnd.irepository.package+xml": "irp",
  "application/vnd.is-xpr": "xpr",
  "application/vnd.isac.fcs": "fcs",
  "application/vnd.jam": "jam",
  "application/vnd.jcp.javame.midlet-rms": "rms",
  "application/vnd.jisp": "jisp",
  "application/vnd.joost.joda-archive": "joda",
  "application/vnd.kahootz": "ktz",
  "application/vnd.kde.karbon": "karbon",
  "application/vnd.kde.kchart": "chrt",
  "application/vnd.kde.kformula": "kfo",
  "application/vnd.kde.kivio": "flw",
  "application/vnd.kde.kontour": "kon",
  "application/vnd.kde.kpresenter": "kpr",
  "application/vnd.kde.kspread": "ksp",
  "application/vnd.kde.kword": "kwd",
  "application/vnd.kenameaapp": "htke",
  "application/vnd.kidspiration": "kia",
  "application/vnd.kinar": "kne",
  "application/vnd.koan": "skp",
  "application/vnd.kodak-descriptor": "sse",
  "application/vnd.las.las+xml": "lasxml",
  "application/vnd.llamagraphics.life-balance.desktop": "lbd",
  "application/vnd.llamagraphics.life-balance.exchange+xml": "lbe",
  "application/vnd.lotus-1-2-3": "123",
  "application/vnd.lotus-approach": "apr",
  "application/vnd.lotus-freelance": "pre",
  "application/vnd.lotus-notes": "nsf",
  "application/vnd.lotus-organizer": "org",
  "application/vnd.lotus-screencam": "scm",
  "application/vnd.lotus-wordpro": "lwp",
  "application/vnd.macports.portpkg": "portpkg",
  "application/vnd.mapbox-vector-tile": "mvt",
  "application/vnd.mcd": "mcd",
  "application/vnd.medcalcdata": "mc1",
  "application/vnd.mediastation.cdkey": "cdkey",
  "application/vnd.mfer": "mwf",
  "application/vnd.mfmp": "mfm",
  "application/vnd.micrografx.flo": "flo",
  "application/vnd.micrografx.igx": "igx",
  "application/vnd.mif": "mif",
  "application/vnd.mobius.daf": "daf",
  "application/vnd.mobius.dis": "dis",
  "application/vnd.mobius.mbk": "mbk",
  "application/vnd.mobius.mqy": "mqy",
  "application/vnd.mobius.msl": "msl",
  "application/vnd.mobius.plc": "plc",
  "application/vnd.mobius.txf": "txf",
  "application/vnd.mophun.application": "mpn",
  "application/vnd.mophun.certificate": "mpc",
  "application/vnd.mozilla.xul+xml": "xul",
  "application/vnd.ms-artgalry": "cil",
  "application/vnd.ms-cab-compressed": "cab",
  "application/vnd.ms-excel": "xls",
  "application/vnd.ms-excel.addin.macroenabled.12": "xlam",
  "application/vnd.ms-excel.sheet.binary.macroenabled.12": "xlsb",
  "application/vnd.ms-excel.sheet.macroenabled.12": "xlsm",
  "application/vnd.ms-excel.template.macroenabled.12": "xltm",
  "application/vnd.ms-fontobject": "eot",
  "application/vnd.ms-htmlhelp": "chm",
  "application/vnd.ms-ims": "ims",
  "application/vnd.ms-lrm": "lrm",
  "application/vnd.ms-officetheme": "thmx",
  "application/vnd.ms-outlook": "msg",
  "application/vnd.ms-pki.seccat": "cat",
  "application/vnd.ms-pki.stl": "stl",
  "application/vnd.ms-powerpoint": "ppt",
  "application/vnd.ms-powerpoint.addin.macroenabled.12": "ppam",
  "application/vnd.ms-powerpoint.presentation.macroenabled.12": "pptm",
  "application/vnd.ms-powerpoint.slide.macroenabled.12": "sldm",
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": "ppsm",
  "application/vnd.ms-powerpoint.template.macroenabled.12": "potm",
  "application/vnd.ms-project": "mpp",
  "application/vnd.ms-word.document.macroenabled.12": "docm",
  "application/vnd.ms-word.template.macroenabled.12": "dotm",
  "application/vnd.ms-works": "wps",
  "application/vnd.ms-wpl": "wpl",
  "application/vnd.ms-xpsdocument": "xps",
  "application/vnd.mseq": "mseq",
  "application/vnd.musician": "mus",
  "application/vnd.muvee.style": "msty",
  "application/vnd.mynfc": "taglet",
  "application/vnd.neurolanguage.nlu": "nlu",
  "application/vnd.nitf": "ntf",
  "application/vnd.noblenet-directory": "nnd",
  "application/vnd.noblenet-sealer": "nns",
  "application/vnd.noblenet-web": "nnw",
  "application/vnd.nokia.n-gage.ac+xml": "ac",
  "application/vnd.nokia.n-gage.data": "ngdat",
  "application/vnd.nokia.n-gage.symbian.install": "n-gage",
  "application/vnd.nokia.radio-preset": "rpst",
  "application/vnd.nokia.radio-presets": "rpss",
  "application/vnd.novadigm.edm": "edm",
  "application/vnd.novadigm.edx": "edx",
  "application/vnd.novadigm.ext": "ext",
  "application/vnd.oasis.opendocument.chart": "odc",
  "application/vnd.oasis.opendocument.chart-template": "otc",
  "application/vnd.oasis.opendocument.database": "odb",
  "application/vnd.oasis.opendocument.formula": "odf",
  "application/vnd.oasis.opendocument.formula-template": "odft",
  "application/vnd.oasis.opendocument.graphics": "odg",
  "application/vnd.oasis.opendocument.graphics-template": "otg",
  "application/vnd.oasis.opendocument.image": "odi",
  "application/vnd.oasis.opendocument.image-template": "oti",
  "application/vnd.oasis.opendocument.presentation": "odp",
  "application/vnd.oasis.opendocument.presentation-template": "otp",
  "application/vnd.oasis.opendocument.spreadsheet": "ods",
  "application/vnd.oasis.opendocument.spreadsheet-template": "ots",
  "application/vnd.oasis.opendocument.text": "odt",
  "application/vnd.oasis.opendocument.text-master": "odm",
  "application/vnd.oasis.opendocument.text-template": "ott",
  "application/vnd.oasis.opendocument.text-web": "oth",
  "application/vnd.olpc-sugar": "xo",
  "application/vnd.oma.dd2+xml": "dd2",
  "application/vnd.openblox.game+xml": "obgx",
  "application/vnd.openofficeorg.extension": "oxt",
  "application/vnd.openstreetmap.data+xml": "osm",
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": "pptx",
  "application/vnd.openxmlformats-officedocument.presentationml.slide": "sldx",
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": "ppsx",
  "application/vnd.openxmlformats-officedocument.presentationml.template": "potx",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": "xlsx",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": "xltx",
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "docx",
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": "dotx",
  "application/vnd.osgeo.mapguide.package": "mgp",
  "application/vnd.osgi.dp": "dp",
  "application/vnd.osgi.subsystem": "esa",
  "application/vnd.palm": "pdb",
  "application/vnd.pawaafile": "paw",
  "application/vnd.pg.format": "str",
  "application/vnd.pg.osasli": "ei6",
  "application/vnd.picsel": "efif",
  "application/vnd.pmi.widget": "wg",
  "application/vnd.pocketlearn": "plf",
  "application/vnd.powerbuilder6": "pbd",
  "application/vnd.previewsystems.box": "box",
  "application/vnd.proteus.magazine": "mgz",
  "application/vnd.publishare-delta-tree": "qps",
  "application/vnd.pvi.ptid1": "ptid",
  "application/vnd.quark.quarkxpress": "qxd",
  "application/vnd.rar": "rar",
  "application/vnd.realvnc.bed": "bed",
  "application/vnd.recordare.musicxml": "mxl",
  "application/vnd.recordare.musicxml+xml": "musicxml",
  "application/vnd.rig.cryptonote": "cryptonote",
  "application/vnd.rim.cod": "cod",
  "application/vnd.rn-realmedia": "rm",
  "application/vnd.rn-realmedia-vbr": "rmvb",
  "application/vnd.route66.link66+xml": "link66",
  "application/vnd.sailingtracker.track": "st",
  "application/vnd.seemail": "see",
  "application/vnd.sema": "sema",
  "application/vnd.semd": "semd",
  "application/vnd.semf": "semf",
  "application/vnd.shana.informed.formdata": "ifm",
  "application/vnd.shana.informed.formtemplate": "itp",
  "application/vnd.shana.informed.interchange": "iif",
  "application/vnd.shana.informed.package": "ipk",
  "application/vnd.simtech-mindmapper": "twd",
  "application/vnd.smaf": "mmf",
  "application/vnd.smart.teacher": "teacher",
  "application/vnd.software602.filler.form+xml": "fo",
  "application/vnd.solent.sdkm+xml": "sdkm",
  "application/vnd.spotfire.dxp": "dxp",
  "application/vnd.spotfire.sfs": "sfs",
  "application/vnd.stardivision.calc": "sdc",
  "application/vnd.stardivision.draw": "sda",
  "application/vnd.stardivision.impress": "sdd",
  "application/vnd.stardivision.math": "smf",
  "application/vnd.stardivision.writer": "sdw",
  "application/vnd.stardivision.writer-global": "sgl",
  "application/vnd.stepmania.package": "smzip",
  "application/vnd.stepmania.stepchart": "sm",
  "application/vnd.sun.wadl+xml": "wadl",
  "application/vnd.sun.xml.calc": "sxc",
  "application/vnd.sun.xml.calc.template": "stc",
  "application/vnd.sun.xml.draw": "sxd",
  "application/vnd.sun.xml.draw.template": "std",
  "application/vnd.sun.xml.impress": "sxi",
  "application/vnd.sun.xml.impress.template": "sti",
  "application/vnd.sun.xml.math": "sxm",
  "application/vnd.sun.xml.writer": "sxw",
  "application/vnd.sun.xml.writer.global": "sxg",
  "application/vnd.sun.xml.writer.template": "stw",
  "application/vnd.sus-calendar": "sus",
  "application/vnd.svd": "svd",
  "application/vnd.symbian.install": "sis",
  "application/vnd.syncml+xml": "xsm",
  "application/vnd.syncml.dm+wbxml": "bdm",
  "application/vnd.syncml.dm+xml": "xdm",
  "application/vnd.syncml.dmddf+xml": "ddf",
  "application/vnd.tao.intent-module-archive": "tao",
  "application/vnd.tcpdump.pcap": "pcap",
  "application/vnd.tmobile-livetv": "tmo",
  "application/vnd.trid.tpt": "tpt",
  "application/vnd.triscape.mxs": "mxs",
  "application/vnd.trueapp": "tra",
  "application/vnd.ufdl": "ufd",
  "application/vnd.uiq.theme": "utz",
  "application/vnd.umajin": "umj",
  "application/vnd.unity": "unityweb",
  "application/vnd.uoml+xml": "uoml",
  "application/vnd.vcx": "vcx",
  "application/vnd.visio": "vsd",
  "application/vnd.visionary": "vis",
  "application/vnd.vsf": "vsf",
  "application/vnd.wap.wbxml": "wbxml",
  "application/vnd.wap.wmlc": "wmlc",
  "application/vnd.wap.wmlscriptc": "wmlsc",
  "application/vnd.webturbo": "wtb",
  "application/vnd.wolfram.player": "nbp",
  "application/vnd.wordperfect": "wpd",
  "application/vnd.wqd": "wqd",
  "application/vnd.wt.stf": "stf",
  "application/vnd.xara": "xar",
  "application/vnd.xfdl": "xfdl",
  "application/vnd.yamaha.hv-dic": "hvd",
  "application/vnd.yamaha.hv-script": "hvs",
  "application/vnd.yamaha.hv-voice": "hvp",
  "application/vnd.yamaha.openscoreformat": "osf",
  "application/vnd.yamaha.openscoreformat.osfpvg+xml": "osfpvg",
  "application/vnd.yamaha.smaf-audio": "saf",
  "application/vnd.yamaha.smaf-phrase": "spf",
  "application/vnd.yellowriver-custom-menu": "cmp",
  "application/vnd.zul": "zir",
  "application/vnd.zzazz.deck+xml": "zaz",
  "application/voicexml+xml": "vxml",
  "application/wasm": "wasm",
  "application/watcherinfo+xml": "wif",
  "application/widget": "wgt",
  "application/winhlp": "hlp",
  "application/wsdl+xml": "wsdl",
  "application/wspolicy+xml": "wspolicy",
  "application/x-7z-compressed": "7z",
  "application/x-abiword": "abw",
  "application/x-ace-compressed": "ace",
  "application/x-apple-diskimage": "dmg",
  "application/x-arj": "arj",
  "application/x-authorware-bin": "aab",
  "application/x-authorware-map": "aam",
  "application/x-authorware-seg": "aas",
  "application/x-bcpio": "bcpio",
  "application/x-bdoc": "bdoc",
  "application/x-bittorrent": "torrent",
  "application/x-blorb": "blb",
  "application/x-bzip": "bz",
  "application/x-bzip2": "bz2",
  "application/x-cbr": "cbr",
  "application/x-cdlink": "vcd",
  "application/x-cfs-compressed": "cfs",
  "application/x-chat": "chat",
  "application/x-chess-pgn": "pgn",
  "application/x-chrome-extension": "crx",
  "application/x-cocoa": "cco",
  "application/x-conference": "nsc",
  "application/x-cpio": "cpio",
  "application/x-csh": "csh",
  "application/x-debian-package": "deb",
  "application/x-dgc-compressed": "dgc",
  "application/x-director": "dir",
  "application/x-doom": "wad",
  "application/x-dtbncx+xml": "ncx",
  "application/x-dtbook+xml": "dtb",
  "application/x-dtbresource+xml": "res",
  "application/x-dvi": "dvi",
  "application/x-envoy": "evy",
  "application/x-eva": "eva",
  "application/x-font-bdf": "bdf",
  "application/x-font-ghostscript": "gsf",
  "application/x-font-linux-psf": "psf",
  "application/x-font-pcf": "pcf",
  "application/x-font-snf": "snf",
  "application/x-font-type1": "pfa",
  "application/x-freearc": "arc",
  "application/x-futuresplash": "spl",
  "application/x-gca-compressed": "gca",
  "application/x-glulx": "ulx",
  "application/x-gnumeric": "gnumeric",
  "application/x-gramps-xml": "gramps",
  "application/x-gtar": "gtar",
  "application/x-hdf": "hdf",
  "application/x-httpd-php": "php",
  "application/x-install-instructions": "install",
  "application/x-iso9660-image": "iso",
  "application/x-iwork-keynote-sffkey": "key",
  "application/x-iwork-numbers-sffnumbers": "numbers",
  "application/x-iwork-pages-sffpages": "pages",
  "application/x-java-archive-diff": "jardiff",
  "application/x-java-jnlp-file": "jnlp",
  "application/x-keepass2": "kdbx",
  "application/x-latex": "latex",
  "application/x-lua-bytecode": "luac",
  "application/x-lzh-compressed": "lzh",
  "application/x-makeself": "run",
  "application/x-mie": "mie",
  "application/x-mobipocket-ebook": "prc",
  "application/x-ms-application": "application",
  "application/x-ms-shortcut": "lnk",
  "application/x-ms-wmd": "wmd",
  "application/x-ms-wmz": "wmz",
  "application/x-ms-xbap": "xbap",
  "application/x-msaccess": "mdb",
  "application/x-msbinder": "obd",
  "application/x-mscardfile": "crd",
  "application/x-msclip": "clp",
  "application/x-msdos-program": "exe",
  "application/x-msdownload": "exe",
  "application/x-msmediaview": "mvb",
  "application/x-msmetafile": "wmf",
  "application/x-msmoney": "mny",
  "application/x-mspublisher": "pub",
  "application/x-msschedule": "scd",
  "application/x-msterminal": "trm",
  "application/x-mswrite": "wri",
  "application/x-netcdf": "nc",
  "application/x-ns-proxy-autoconfig": "pac",
  "application/x-nzb": "nzb",
  "application/x-perl": "pl",
  "application/x-pilot": "prc",
  "application/x-pkcs12": "p12",
  "application/x-pkcs7-certificates": "p7b",
  "application/x-pkcs7-certreqresp": "p7r",
  "application/x-rar-compressed": "rar",
  "application/x-redhat-package-manager": "rpm",
  "application/x-research-info-systems": "ris",
  "application/x-sea": "sea",
  "application/x-sh": "sh",
  "application/x-shar": "shar",
  "application/x-shockwave-flash": "swf",
  "application/x-silverlight-app": "xap",
  "application/x-sql": "sql",
  "application/x-stuffit": "sit",
  "application/x-stuffitx": "sitx",
  "application/x-subrip": "srt",
  "application/x-sv4cpio": "sv4cpio",
  "application/x-sv4crc": "sv4crc",
  "application/x-t3vm-image": "t3",
  "application/x-tads": "gam",
  "application/x-tar": "tar",
  "application/x-tcl": "tcl",
  "application/x-tex": "tex",
  "application/x-tex-tfm": "tfm",
  "application/x-texinfo": "texinfo",
  "application/x-tgif": "obj",
  "application/x-ustar": "ustar",
  "application/x-virtualbox-hdd": "hdd",
  "application/x-virtualbox-ova": "ova",
  "application/x-virtualbox-ovf": "ovf",
  "application/x-virtualbox-vbox": "vbox",
  "application/x-virtualbox-vbox-extpack": "vbox-extpack",
  "application/x-virtualbox-vdi": "vdi",
  "application/x-virtualbox-vhd": "vhd",
  "application/x-virtualbox-vmdk": "vmdk",
  "application/x-wais-source": "src",
  "application/x-web-app-manifest+json": "webapp",
  "application/x-x509-ca-cert": "der",
  "application/x-xfig": "fig",
  "application/x-xliff+xml": "xlf",
  "application/x-xpinstall": "xpi",
  "application/x-xz": "xz",
  "application/x-zmachine": "z1",
  "application/xaml+xml": "xaml",
  "application/xcap-att+xml": "xav",
  "application/xcap-caps+xml": "xca",
  "application/xcap-diff+xml": "xdf",
  "application/xcap-el+xml": "xel",
  "application/xcap-ns+xml": "xns",
  "application/xenc+xml": "xenc",
  "application/xhtml+xml": "xhtml",
  "application/xliff+xml": "xlf",
  "application/xml": "xml",
  "application/xml-dtd": "dtd",
  "application/xop+xml": "xop",
  "application/xproc+xml": "xpl",
  "application/xslt+xml": "xsl",
  "application/xspf+xml": "xspf",
  "application/xv+xml": "mxml",
  "application/yang": "yang",
  "application/yin+xml": "yin",
  "application/zip": "zip",
  "audio/3gpp": "3gpp",
  "audio/adpcm": "adp",
  "audio/amr": "amr",
  "audio/basic": "au",
  "audio/midi": "mid",
  "audio/mobile-xmf": "mxmf",
  "audio/mp3": "mp3",
  "audio/mp4": "m4a",
  "audio/mpeg": "mpga",
  "audio/ogg": "oga",
  "audio/s3m": "s3m",
  "audio/silk": "sil",
  "audio/vnd.dece.audio": "uva",
  "audio/vnd.digital-winds": "eol",
  "audio/vnd.dra": "dra",
  "audio/vnd.dts": "dts",
  "audio/vnd.dts.hd": "dtshd",
  "audio/vnd.lucent.voice": "lvp",
  "audio/vnd.ms-playready.media.pya": "pya",
  "audio/vnd.nuera.ecelp4800": "ecelp4800",
  "audio/vnd.nuera.ecelp7470": "ecelp7470",
  "audio/vnd.nuera.ecelp9600": "ecelp9600",
  "audio/vnd.rip": "rip",
  "audio/wav": "wav",
  "audio/wave": "wav",
  "audio/webm": "weba",
  "audio/x-aac": "aac",
  "audio/x-aiff": "aif",
  "audio/x-caf": "caf",
  "audio/x-flac": "flac",
  "audio/x-m4a": "m4a",
  "audio/x-matroska": "mka",
  "audio/x-mpegurl": "m3u",
  "audio/x-ms-wax": "wax",
  "audio/x-ms-wma": "wma",
  "audio/x-pn-realaudio": "ram",
  "audio/x-pn-realaudio-plugin": "rmp",
  "audio/x-realaudio": "ra",
  "audio/x-wav": "wav",
  "audio/xm": "xm",
  "chemical/x-cdx": "cdx",
  "chemical/x-cif": "cif",
  "chemical/x-cmdf": "cmdf",
  "chemical/x-cml": "cml",
  "chemical/x-csml": "csml",
  "chemical/x-xyz": "xyz",
  "font/collection": "ttc",
  "font/otf": "otf",
  "font/ttf": "ttf",
  "font/woff": "woff",
  "font/woff2": "woff2",
  "image/aces": "exr",
  "image/apng": "apng",
  "image/avci": "avci",
  "image/avcs": "avcs",
  "image/avif": "avif",
  "image/bmp": "bmp",
  "image/cgm": "cgm",
  "image/dicom-rle": "drle",
  "image/emf": "emf",
  "image/fits": "fits",
  "image/g3fax": "g3",
  "image/gif": "gif",
  "image/heic": "heic",
  "image/heic-sequence": "heics",
  "image/heif": "heif",
  "image/heif-sequence": "heifs",
  "image/hej2k": "hej2",
  "image/hsj2": "hsj2",
  "image/ief": "ief",
  "image/jls": "jls",
  "image/jp2": "jp2",
  "image/jpeg": "jpeg",
  "image/jph": "jph",
  "image/jphc": "jhc",
  "image/jpm": "jpm",
  "image/jpx": "jpx",
  "image/jxr": "jxr",
  "image/jxra": "jxra",
  "image/jxrs": "jxrs",
  "image/jxs": "jxs",
  "image/jxsc": "jxsc",
  "image/jxsi": "jxsi",
  "image/jxss": "jxss",
  "image/ktx": "ktx",
  "image/ktx2": "ktx2",
  "image/png": "png",
  "image/prs.btif": "btif",
  "image/prs.pti": "pti",
  "image/sgi": "sgi",
  "image/svg+xml": "svg",
  "image/t38": "t38",
  "image/tiff": "tif",
  "image/tiff-fx": "tfx",
  "image/vnd.adobe.photoshop": "psd",
  "image/vnd.airzip.accelerator.azv": "azv",
  "image/vnd.dece.graphic": "uvi",
  "image/vnd.djvu": "djvu",
  "image/vnd.dvb.subtitle": "sub",
  "image/vnd.dwg": "dwg",
  "image/vnd.dxf": "dxf",
  "image/vnd.fastbidsheet": "fbs",
  "image/vnd.fpx": "fpx",
  "image/vnd.fst": "fst",
  "image/vnd.fujixerox.edmics-mmr": "mmr",
  "image/vnd.fujixerox.edmics-rlc": "rlc",
  "image/vnd.microsoft.icon": "ico",
  "image/vnd.ms-dds": "dds",
  "image/vnd.ms-modi": "mdi",
  "image/vnd.ms-photo": "wdp",
  "image/vnd.net-fpx": "npx",
  "image/vnd.pco.b16": "b16",
  "image/vnd.tencent.tap": "tap",
  "image/vnd.valve.source.texture": "vtf",
  "image/vnd.wap.wbmp": "wbmp",
  "image/vnd.xiff": "xif",
  "image/vnd.zbrush.pcx": "pcx",
  "image/webp": "webp",
  "image/wmf": "wmf",
  "image/x-3ds": "3ds",
  "image/x-cmu-raster": "ras",
  "image/x-cmx": "cmx",
  "image/x-freehand": "fh",
  "image/x-icon": "ico",
  "image/x-jng": "jng",
  "image/x-mrsid-image": "sid",
  "image/x-ms-bmp": "bmp",
  "image/x-pcx": "pcx",
  "image/x-pict": "pic",
  "image/x-portable-anymap": "pnm",
  "image/x-portable-bitmap": "pbm",
  "image/x-portable-graymap": "pgm",
  "image/x-portable-pixmap": "ppm",
  "image/x-rgb": "rgb",
  "image/x-tga": "tga",
  "image/x-xbitmap": "xbm",
  "image/x-xpixmap": "xpm",
  "image/x-xwindowdump": "xwd",
  "message/disposition-notification": "disposition-notification",
  "message/global": "u8msg",
  "message/global-delivery-status": "u8dsn",
  "message/global-disposition-notification": "u8mdn",
  "message/global-headers": "u8hdr",
  "message/rfc822": "eml",
  "message/vnd.wfa.wsc": "wsc",
  "model/3mf": "3mf",
  "model/gltf+json": "gltf",
  "model/gltf-binary": "glb",
  "model/iges": "igs",
  "model/mesh": "msh",
  "model/mtl": "mtl",
  "model/obj": "obj",
  "model/step+xml": "stpx",
  "model/step+zip": "stpz",
  "model/step-xml+zip": "stpxz",
  "model/stl": "stl",
  "model/vnd.collada+xml": "dae",
  "model/vnd.dwf": "dwf",
  "model/vnd.gdl": "gdl",
  "model/vnd.gtw": "gtw",
  "model/vnd.mts": "mts",
  "model/vnd.opengex": "ogex",
  "model/vnd.parasolid.transmit.binary": "x_b",
  "model/vnd.parasolid.transmit.text": "x_t",
  "model/vnd.sap.vds": "vds",
  "model/vnd.usdz+zip": "usdz",
  "model/vnd.valve.source.compiled-map": "bsp",
  "model/vnd.vtu": "vtu",
  "model/vrml": "wrl",
  "model/x3d+binary": "x3db",
  "model/x3d+fastinfoset": "x3db",
  "model/x3d+vrml": "x3dv",
  "model/x3d+xml": "x3d",
  "model/x3d-vrml": "x3dv",
  "text/cache-manifest": "appcache",
  "text/calendar": "ics",
  "text/coffeescript": "coffee",
  "text/css": "css",
  "text/csv": "csv",
  "text/html": "html",
  "text/jade": "jade",
  "text/jsx": "jsx",
  "text/less": "less",
  "text/markdown": "markdown",
  "text/mathml": "mml",
  "text/mdx": "mdx",
  "text/n3": "n3",
  "text/plain": "txt",
  "text/prs.lines.tag": "dsc",
  "text/richtext": "rtx",
  "text/rtf": "rtf",
  "text/sgml": "sgml",
  "text/shex": "shex",
  "text/slim": "slim",
  "text/spdx": "spdx",
  "text/stylus": "stylus",
  "text/tab-separated-values": "tsv",
  "text/troff": "t",
  "text/turtle": "ttl",
  "text/uri-list": "uri",
  "text/vcard": "vcard",
  "text/vnd.curl": "curl",
  "text/vnd.curl.dcurl": "dcurl",
  "text/vnd.curl.mcurl": "mcurl",
  "text/vnd.curl.scurl": "scurl",
  "text/vnd.dvb.subtitle": "sub",
  "text/vnd.familysearch.gedcom": "ged",
  "text/vnd.fly": "fly",
  "text/vnd.fmi.flexstor": "flx",
  "text/vnd.graphviz": "gv",
  "text/vnd.in3d.3dml": "3dml",
  "text/vnd.in3d.spot": "spot",
  "text/vnd.sun.j2me.app-descriptor": "jad",
  "text/vnd.wap.wml": "wml",
  "text/vnd.wap.wmlscript": "wmls",
  "text/vtt": "vtt",
  "text/x-asm": "s",
  "text/x-c": "c",
  "text/x-component": "htc",
  "text/x-fortran": "f",
  "text/x-handlebars-template": "hbs",
  "text/x-java-source": "java",
  "text/x-lua": "lua",
  "text/x-markdown": "mkd",
  "text/x-nfo": "nfo",
  "text/x-opml": "opml",
  "text/x-org": "org",
  "text/x-pascal": "p",
  "text/x-processing": "pde",
  "text/x-sass": "sass",
  "text/x-scss": "scss",
  "text/x-setext": "etx",
  "text/x-sfv": "sfv",
  "text/x-suse-ymp": "ymp",
  "text/x-uuencode": "uu",
  "text/x-vcalendar": "vcs",
  "text/x-vcard": "vcf",
  "text/xml": "xml",
  "text/yaml": "yaml",
  "video/3gpp": "3gp",
  "video/3gpp2": "3g2",
  "video/h261": "h261",
  "video/h263": "h263",
  "video/h264": "h264",
  "video/iso.segment": "m4s",
  "video/jpeg": "jpgv",
  "video/jpm": "jpm",
  "video/mj2": "mj2",
  "video/mp2t": "ts",
  "video/mp4": "mp4",
  "video/mpeg": "mpeg",
  "video/ogg": "ogv",
  "video/quicktime": "qt",
  "video/vnd.dece.hd": "uvh",
  "video/vnd.dece.mobile": "uvm",
  "video/vnd.dece.pd": "uvp",
  "video/vnd.dece.sd": "uvs",
  "video/vnd.dece.video": "uvv",
  "video/vnd.dvb.file": "dvb",
  "video/vnd.fvt": "fvt",
  "video/vnd.mpegurl": "mxu",
  "video/vnd.ms-playready.media.pyv": "pyv",
  "video/vnd.uvvu.mp4": "uvu",
  "video/vnd.vivo": "viv",
  "video/webm": "webm",
  "video/x-f4v": "f4v",
  "video/x-fli": "fli",
  "video/x-flv": "flv",
  "video/x-m4v": "m4v",
  "video/x-matroska": "mkv",
  "video/x-mng": "mng",
  "video/x-ms-asf": "asf",
  "video/x-ms-vob": "vob",
  "video/x-ms-wm": "wm",
  "video/x-ms-wmv": "wmv",
  "video/x-ms-wmx": "wmx",
  "video/x-ms-wvx": "wvx",
  "video/x-msvideo": "avi",
  "video/x-sgi-movie": "movie",
  "video/x-smv": "smv",
  "x-conference/x-cooltalk": "ice"
};
var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
function extensionForMime(type) {
  if (!type || typeof type !== "string") {
    return "";
  }
  let match = EXTRACT_TYPE_REGEXP.exec(type);
  let ext = match && extensions[match[1].toLowerCase()];
  return ext || "";
}

// src/formats/yarle/utils/filename-utils.ts
var normalizeTitle = (title) => {
  return sanitizeFileName(title).replace(/[\[\]\#\^]/g, "");
};
var getFileIndex = (dstPath, fileNamePrefix) => {
  const index = fs.readdirSync(dstPath).filter((file) => {
    const filePrefix = file.split(".").slice(0, -1).join(".");
    const escapedFilePrefix = escapeStringRegexp(fileNamePrefix);
    const fileWithSameName = filePrefix.match(new RegExp(`${escapedFilePrefix}\\.\\d+`));
    return filePrefix === fileNamePrefix || fileWithSameName;
  }).length;
  return index;
};
var getResourceFileProperties = (workDir, resource) => {
  const UNKNOWNFILENAME = yarleOptions.useUniqueUnknownFileNames ? "unknown_filename" + (Math.random().toString(16) + "0000000").slice(2, 10) : "unknown_filename";
  const extension = getExtension(resource);
  let fileName = UNKNOWNFILENAME;
  if (resource["resource-attributes"] && resource["resource-attributes"]["file-name"]) {
    const fileNamePrefix = resource["resource-attributes"]["file-name"].substr(0, 50);
    fileName = fileNamePrefix.split(".")[0];
  }
  fileName = fileName.replace(/[/\\?%*:|"<>\[\]\+]/g, "-");
  if (yarleOptions.sanitizeResourceNameSpaces) {
    fileName = fileName.replace(/ /g, yarleOptions.replacementChar);
  }
  const index = getFileIndex(workDir, fileName);
  const fileNameWithIndex = index > 0 ? `${fileName}.${index}` : fileName;
  return {
    fileName: `${fileNameWithIndex}.${extension}`,
    extension,
    index
  };
};
var getFilePrefix = (note) => {
  return normalizeTitle(note["title"] ? `${note["title"].toString()}` : "Untitled");
};
var getNoteFileName = (dstPath, note, extension = "md") => {
  return `${getNoteName(dstPath, note)}.${extension}`;
};
var getExtensionFromResourceFileName = (resource) => {
  if (!(resource["resource-attributes"] && resource["resource-attributes"]["file-name"])) {
    return "";
  }
  const splitFileName = resource["resource-attributes"]["file-name"].split(".");
  return splitFileName.length > 1 ? splitFileName[splitFileName.length - 1] : void 0;
};
var getExtensionFromMime = (resource) => {
  const mimeType = resource.mime;
  if (!mimeType) {
    return "";
  }
  return extensionForMime(mimeType) || "";
};
var getExtension = (resource) => {
  const UNKNOWNEXTENSION = "dat";
  return getExtensionFromResourceFileName(resource) || getExtensionFromMime(resource) || UNKNOWNEXTENSION;
};
var getZettelKastelId = (note, dstPath) => {
  return (0, import_obsidian6.moment)(note["created"]).format("YYYYMMDDHHmm");
};
var getNoteName = (dstPath, note) => {
  let noteName;
  if (yarleOptions.isZettelkastenNeeded || yarleOptions.useZettelIdAsFilename) {
    const zettelPrefix = getZettelKastelId(note, dstPath);
    const nextIndex = getFileIndex(dstPath, zettelPrefix);
    const separator = " ";
    noteName = nextIndex !== 0 ? `${zettelPrefix}.${nextIndex}` : zettelPrefix;
    if (!yarleOptions.useZettelIdAsFilename) {
      noteName += getFilePrefix(note) !== "Untitled" ? `${separator}${getFilePrefix(note)}` : "";
    }
  } else {
    const fileNamePrefix = getFilePrefix(note);
    const nextIndex = getFileIndex(dstPath, fileNamePrefix);
    noteName = nextIndex === 0 ? fileNamePrefix : `${fileNamePrefix}.${nextIndex}`;
  }
  return noteName;
};

// src/formats/yarle/utils/is-toc.ts
var isTOC = (noteTitle) => {
  return noteTitle === "Table of Contents";
};

// src/formats/yarle/utils/turndown-rules/internal-links-rule.ts
var removeBrackets = (str) => {
  return str.replace(/\[|\]/g, "");
};
var removeDoubleBackSlashes = (str) => {
  return str.replace(/\\/g, "");
};
var wikiStyleLinksRule = {
  filter: filterByNodeName("A"),
  replacement: (content, node) => {
    const nodeProxy = getAttributeProxy(node);
    if (!nodeProxy.href) {
      return "";
    }
    let text = getTurndownService(yarleOptions).turndown(removeBrackets(node.innerHTML));
    text = removeDoubleBackSlashes(text);
    let prefix = "";
    let match = text.match(/^(#{1,6} )(.*)/);
    if (match) {
      prefix = match[1];
      text = match[2];
    }
    const value = nodeProxy.href.value;
    const type = nodeProxy.type ? nodeProxy.type.value : void 0;
    const realValue = yarleOptions.urlEncodeFileNamesAndLinks ? encodeURI(value) : value;
    if (type === "file") {
      return `![[${realValue}]]`;
    }
    if (value.match(/^(https?:|www\.|file:|ftp:|mailto:)/)) {
      return prefix + getShortLinkIfPossible(text, value);
    }
    if (value.startsWith("evernote://")) {
      const fileName = normalizeTitle(text);
      const noteIdNameMap = RuntimePropertiesSingleton.getInstance();
      const uniqueId = genUid(6);
      if (isTOC(noteIdNameMap.getCurrentNoteName())) {
        noteIdNameMap.addItemToTOCMap({ url: value, title: fileName, uniqueEnd: uniqueId });
      } else {
        noteIdNameMap.addItemToMap({ url: value, title: fileName, uniqueEnd: uniqueId });
      }
      return prefix + `[[${value}]]`;
    }
    return prefix + `[[${realValue}${text === realValue ? "" : `|${text}`}]]`;
  }
};
var htmlUnescapes = {
  "&amp;": "&",
  "&lt;": "<",
  "&gt;": ">",
  "&quot;": '"',
  "&#39;": "'"
};
var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g;
var reHasEscapedHtml = RegExp(reEscapedHtml.source);
function unescape2(text) {
  return text && reHasEscapedHtml.test(text) ? text.replace(reEscapedHtml, (str) => htmlUnescapes[str]) : text;
}
var getShortLinkIfPossible = (text, value) => {
  return !text || unescape2(text) === unescape2(value) ? yarleOptions.generateNakedUrls ? value : `<${value}>` : `[${text}](${value})`;
};

// src/formats/yarle/outputLanguages.ts
var languageItems = {
  bold: "**",
  italic: "_",
  highlight: "==",
  strikethrough: "~~"
};

// src/formats/yarle/utils/turndown-rules/span-rule.ts
var EVERNOTE_HIGHLIGHT = "-evernote-highlight:true;";
var EVERNOTE_COLORHIGHLIGHT = "--en-highlight";
var BOLD = "bold";
var ITALIC = "italic";
var spanRule = {
  filter: filterByNodeName("SPAN"),
  replacement: (content, node) => {
    const nodeProxy = getAttributeProxy(node);
    if (nodeProxy.style && content.trim() !== "") {
      const nodeValue = nodeProxy.style.value;
      if (content !== "<YARLE_NEWLINE_PLACEHOLDER>") {
        const hasBold = nodeValue.includes(BOLD);
        const hasItalic = nodeValue.includes(ITALIC);
        if (hasBold && !hasItalic) {
          return `${languageItems.bold}${content}${languageItems.bold}`;
        }
        if (!hasBold && hasItalic) {
          return `${languageItems.italic}${content}${languageItems.italic}`;
        }
        if (hasBold && hasItalic) {
          return `${languageItems.italic}${languageItems.bold}${content}${languageItems.bold}${languageItems.italic}`;
        }
      }
      return nodeValue.includes(EVERNOTE_HIGHLIGHT) || nodeValue.includes(EVERNOTE_COLORHIGHLIGHT) ? `${languageItems.highlight}${content}${languageItems.highlight}` : content;
    }
    return content;
  }
};

// src/formats/yarle/utils/turndown-rules/strikethrough-rule.ts
var strikethroughRule = {
  filter: ["del", "s", "strike"],
  replacement: (content) => {
    return `${languageItems.strikethrough}${content}${languageItems.strikethrough}`;
  }
};

// src/formats/yarle/utils/turndown-rules/task-items-rule.ts
var taskItemsRule = {
  filter: filterByNodeName("EN-TODO"),
  replacement: (content, node) => {
    var _a, _b;
    const nodeProxy = getAttributeProxy(node);
    const prefix = ((_b = (_a = node.parentElement) == null ? void 0 : _a.nodeName) == null ? void 0 : _b.toUpperCase()) === "LI" ? "" : "- ";
    return `${prefix}${nodeProxy.checked && nodeProxy.checked.value === "true" ? "[x]" : "[ ]"} ${content}`;
  }
};

// src/formats/yarle/utils/turndown-rules/newline-rule.ts
var newLineRule = {
  filter: filterByNodeName("BR"),
  replacement: (content, node) => {
    const nodeProxy = getAttributeProxy(node);
    return "<YARLE_NEWLINE_PLACEHOLDER>";
  }
};

// src/formats/yarle/utils/turndown-rules/div-rule.ts
var isTaskBlock = (node) => {
  const nodeProxy = getAttributeProxy(node);
  const taskFlag = "--en-task-group:true";
  return nodeProxy.style && nodeProxy.style.value.indexOf(taskFlag) >= 0;
};
var getTaskGroupId = (node) => {
  const nodeProxy = getAttributeProxy(node);
  const idAttr = "--en-id:";
  return nodeProxy.style.value.split(idAttr)[1].split(";")[0];
};
var divRule = {
  filter: filterByNodeName("DIV"),
  replacement: (content, node) => {
    const nodeProxy = getAttributeProxy(node);
    return isTaskBlock(node) ? `<YARLE-EN-V10-TASK>${getTaskGroupId(node)}</YARLE-EN-V10-TASK>` : yarleOptions.monospaceIsCodeBlock ? replaceMonospaceCodeBlock(content, node) : replaceCodeBlock(content, node);
  }
};

// src/formats/yarle/utils/turndown-rules/italic-rule.ts
var italicRule = {
  filter: ["i"],
  replacement: (content) => {
    return content.trim() !== "" ? `${languageItems.italic}${content}${languageItems.italic}` : content;
  }
};

// src/formats/yarle/constants.ts
var checkboxTodo = "- [ ]";
var checkboxDone = "- [x]";

// src/formats/yarle/utils/turndown-rules/task-list-rule.ts
var indentCharacter = "	";
var taskListRule = {
  filter: "li",
  replacement: (content, node, options) => {
    const isTodoDoneBlock = (node2) => {
      const nodeProxy = getAttributeProxy(node2);
      const taskFlag = "--en-checked:true;";
      return nodeProxy.style && nodeProxy.style.value.indexOf(taskFlag) >= 0;
    };
    const isTodoBlock = (node2) => {
      const nodeProxy = getAttributeProxy(node2);
      const taskFlag = "--en-checked:false;";
      return nodeProxy.style && nodeProxy.style.value.indexOf(taskFlag) >= 0;
    };
    const indentCount = content.match(/^\n*/)[0].length || 0;
    const indentChars = indentCharacter.repeat(indentCount);
    const singleLineContent = content.replace(/^\n+/, "").replace(/\n+$/, "\n").replace(/\n/gm, `
${indentCharacter}`);
    let prefix = indentCount > 0 ? indentChars : isTodoDoneBlock(node) ? `${checkboxDone} ` : isTodoBlock(node) ? `${checkboxTodo} ` : "* ";
    const parent = node.parentNode;
    if (parent.nodeName === "OL") {
      const start = parent.getAttribute("start");
      const index = Array.prototype.indexOf.call(parent.children, node);
      prefix = `${start ? Number(start) + index : index + 1}. `;
    }
    let ret;
    ret = prefix + singleLineContent + (node.nextSibling && !/\n$/.test(singleLineContent) ? "\n" : "");
    return ret;
  }
};

// src/formats/yarle/utils/turndown-service.ts
var getTurndownService = (yarleOptions2) => {
  const turndownService = new window.TurndownService({
    br: "",
    ...yarleOptions2.turndownOptions,
    blankReplacement: (content, node) => {
      return node.isBlock ? "\n\n" : "";
    },
    keepReplacement: (content, node) => {
      return node.isBlock ? `
${node.outerHTML}
` : node.outerHTML;
    },
    defaultReplacement: (content, node) => {
      return node.isBlock ? `
${content}
` : content;
    }
  });
  turndownService.use(gfm);
  turndownService.addRule("span", spanRule);
  turndownService.addRule("strikethrough", strikethroughRule);
  turndownService.addRule("evernote task items", taskItemsRule);
  turndownService.addRule("wikistyle links", wikiStyleLinksRule);
  turndownService.addRule("images", imagesRule);
  turndownService.addRule("list", taskListRule);
  turndownService.addRule("italic", italicRule);
  if (yarleOptions2.keepMDCharactersOfENNotes) {
    turndownService.escape = (str) => str;
  }
  turndownService.addRule("divBlock", divRule);
  if (yarleOptions2.keepOriginalAmountOfNewlines) {
    turndownService.addRule("newline", newLineRule);
  }
  return turndownService;
};

// src/formats/yarle/convert-html-to-md.ts
var unwrapElement = (node) => {
  node.replaceWith(...Array.from(node.children));
};
var swapParent = (wrapper) => {
  const inner = wrapper.parentElement;
  inner.replaceWith(...Array.from(inner.childNodes));
  inner.append(...Array.from(wrapper.childNodes));
  wrapper.appendChild(inner);
};
var fixTasks = (node) => {
  const spanTasks = Array.from(node.querySelectorAll("span>en-todo"));
  spanTasks.forEach(swapParent);
  const anchorTasks = Array.from(node.querySelectorAll("a>en-todo"));
  anchorTasks.forEach(swapParent);
  return node;
};
var fixSublistsInContent = (content) => {
  let cont = content.replace(/<li>/g, "<li><div>");
  cont = cont.replace(/<\/li>/g, "</div></li>");
  cont = cont.replace(/<li><div>(\s)*<div>/g, "<li><div>");
  cont = cont.replace(/<\/div>(\s)*<\/div><\/li>/g, "</div></li>");
  return cont;
};
var fixSublists = (node) => {
  var _a;
  const ulElements = Array.from(node.getElementsByTagName("ul"));
  const olElements = Array.from(node.getElementsByTagName("ol"));
  const listElements = ulElements.concat(olElements);
  listElements.forEach((listNode) => {
    if (listNode.parentElement.tagName === "LI") {
      listNode.parentElement.replaceWith(listNode);
    }
    if (listNode.previousElementSibling && listNode.previousElementSibling.tagName === "LI") {
      listNode.previousElementSibling.appendChild(listNode);
    }
  });
  for (const n of listElements) {
    const parentElement = n.parentElement;
    if ((parentElement == null ? void 0 : parentElement.tagName) === "DIV" && ((_a = parentElement == null ? void 0 : parentElement.parentElement) == null ? void 0 : _a.tagName) === "UL") {
      unwrapElement(parentElement);
    }
    if (((parentElement == null ? void 0 : parentElement.tagName) === "UL" || (parentElement == null ? void 0 : parentElement.tagName) === "OL") && (parentElement == null ? void 0 : parentElement.childNodes.length) === 1) {
      unwrapElement(parentElement);
    }
  }
  const liElements = Array.from(node.getElementsByTagName("li"));
  for (const liNode of liElements) {
    const listNodeDiv = liNode.firstElementChild;
    if (listNodeDiv && listNodeDiv.tagName === "DIV") {
      const childElementsArr = Array.from(listNodeDiv.childNodes);
      listNodeDiv.replaceWith(...childElementsArr);
    }
  }
  return node;
};
var convertHtml2Md = (yarleOptions2, { htmlContent }) => {
  const content = htmlContent.replace(/<!DOCTYPE en-note [^>]*>/, "<!DOCTYPE html>").replace(/(<a [^>]*)\/>/, "$1></a>").replace(/<div[^\/\<]*\/>/g, "");
  const contentNode = new DOMParser().parseFromString(fixSublistsInContent(content), "text/html").getElementsByTagName("en-note").item(0);
  let contentInMd = getTurndownService(yarleOptions2).turndown(fixTasks(fixSublists(contentNode)));
  const newLinePlaceholder = new RegExp("<YARLE_NEWLINE_PLACEHOLDER>", "g");
  contentInMd = contentInMd.replace(newLinePlaceholder, "");
  return contentInMd && contentInMd !== "undefined" ? { content: contentInMd } : { content: "" };
};

// src/formats/yarle/process-resources.ts
var import_crypto = __toESM(require("crypto"));

// src/formats/yarle/utils/content-utils.ts
var import_obsidian7 = require("obsidian");
var getMetadata = (note, notebookName) => {
  return {
    createdAt: getCreationTime(note),
    updatedAt: getUpdateTime(note),
    sourceUrl: getSourceUrl(note),
    location: getLatLong(note),
    reminderTime: getReminderTime(note),
    reminderOrder: getReminderOrder(note),
    reminderDoneTime: getReminderDoneTime(note),
    notebookName
  };
};
var getCreationTime = (note) => {
  return !yarleOptions.skipCreationTime && note.created ? (0, import_obsidian7.moment)(note.created).format(yarleOptions.dateFormat) : "";
};
var getUpdateTime = (note) => {
  return !yarleOptions.skipUpdateTime && note.updated ? (0, import_obsidian7.moment)(note.updated).format(yarleOptions.dateFormat) : "";
};
var getSourceUrl = (note) => {
  return !yarleOptions.skipSourceUrl && note["note-attributes"] ? note["note-attributes"]["source-url"] : "";
};
var getLatLong = (note) => {
  return !yarleOptions.skipLocation && note["note-attributes"] && note["note-attributes"].longitude ? `${note["note-attributes"].latitude},${note["note-attributes"].longitude}` : "";
};
var getReminderTime = (note) => {
  return !yarleOptions.skipReminderTime && note["note-attributes"] && note["note-attributes"]["reminder-time"] ? (0, import_obsidian7.moment)(note["note-attributes"]["reminder-time"]).format(yarleOptions.dateFormat) : "";
};
var getReminderOrder = (note) => {
  return !yarleOptions.skipReminderOrder && note["note-attributes"] && note["note-attributes"]["reminder-order"] ? note["note-attributes"]["reminder-order"] : "";
};
var getReminderDoneTime = (note) => {
  return !yarleOptions.skipReminderDoneTime && note["note-attributes"] && note["note-attributes"]["reminder-done-time"] ? (0, import_obsidian7.moment)(note["note-attributes"]["reminder-done-time"]).format(yarleOptions.dateFormat) : "";
};
var getTags = (note) => {
  return { tags: logTags(note) };
};
var logTags = (note) => {
  if (!yarleOptions.skipTags && note.tag) {
    const tagArray = Array.isArray(note.tag) ? note.tag : [note.tag];
    const tagOptions = yarleOptions.nestedTags;
    const tags = tagArray.map((tag) => {
      let cleanTag = tag.toString().replace(/^#/, "");
      if (tagOptions) {
        cleanTag = cleanTag.replace(new RegExp(escapeStringRegexp(tagOptions.separatorInEN), "g"), tagOptions.replaceSeparatorWith);
      }
      const replaceSpaceWith = tagOptions && tagOptions.replaceSpaceWith || "-";
      cleanTag = cleanTag.replace(/ /g, replaceSpaceWith);
      return `${yarleOptions.useHashTags ? "#" : ""}${cleanTag}`;
    });
    return tags.join(" ");
  }
  return "";
};
var btime;
try {
  btime = window.require("btime");
} catch (e2) {
}
var setFileDates = (path2, note) => {
  const creationTime = (0, import_obsidian7.moment)(note.created).valueOf();
  if (creationTime > 0 && btime) {
    btime.btime(path2, creationTime);
  }
  const updated = (0, import_obsidian7.moment)(note.updated).valueOf();
  const mtime = updated / 1e3;
  fs.utimesSync(path2, mtime, mtime);
};
var getTimeStampMoment = (resource) => {
  return resource["resource-attributes"] && resource["resource-attributes"]["timestamp"] ? (0, import_obsidian7.moment)(resource["resource-attributes"]["timestamp"]) : (0, import_obsidian7.moment)();
};

// src/formats/yarle/utils/folder-utils.ts
var paths = {
  mdPath: "",
  resourcePath: ""
};
var MAX_PATH = 249;
var getResourceDir = (dstPath, note) => {
  return getNoteName(dstPath, note).replace(/\s/g, "_");
};
var truncatFileName = (fileName, uniqueId) => {
  if (fileName.length <= 11) {
    throw Error("FATAL: note folder directory path exceeds the OS limitation. Please pick a destination closer to the root folder.");
  }
  const fullPath = `${getNotesPath()}${path.sep}${fileName}`;
  return fullPath.length < MAX_PATH ? fileName : `${fileName.slice(0, MAX_PATH - 11)}_${uniqueId}.md`;
};
var truncateFilePath = (note, fileName, fullFilePath) => {
  const noteIdNameMap = RuntimePropertiesSingleton.getInstance();
  const noteIdMap = noteIdNameMap.getNoteIdNameMapByNoteTitle(normalizeTitle(note.title))[0] || { uniqueEnd: genUid(6) };
  if (fileName.length <= 11) {
    throw Error("FATAL: note folder directory path exceeds the OS limitation. Please pick a destination closer to the root folder.");
  }
  return `${fullFilePath.slice(0, MAX_PATH - 11)}_${noteIdMap.uniqueEnd}.md`;
};
var getFilePath = (dstPath, note, extension) => {
  const fileName = getNoteFileName(dstPath, note, extension);
  const fullFilePath = `${dstPath}${path.sep}${normalizeTitle(fileName)}`;
  return fullFilePath.length < MAX_PATH ? fullFilePath : truncateFilePath(note, fileName, fullFilePath);
};
var getMdFilePath = (note) => {
  return getFilePath(paths.mdPath, note, "md");
};
var clearDistDir = (dstPath) => {
  if (fs.existsSync(dstPath)) {
    if (fs.rmSync) {
      fs.rmSync(dstPath, { recursive: true, force: true });
    } else {
      fs.rmdirSync(dstPath, { recursive: true });
    }
  }
  fs.mkdirSync(dstPath);
};
var getRelativeResourceDir = (note) => {
  const enexFolder = `${path.sep}${yarleOptions.resourcesDir}`;
  if (yarleOptions.haveGlobalResources) {
    return `..${enexFolder}`;
  }
  return yarleOptions.haveEnexLevelResources ? `.${enexFolder}` : `.${enexFolder}${path.sep}${getResourceDir(paths.mdPath, note)}.resources`;
};
var getAbsoluteResourceDir = (note) => {
  if (yarleOptions.haveGlobalResources) {
    return path.resolve(paths.resourcePath, "..", "..", yarleOptions.resourcesDir);
  }
  return yarleOptions.haveEnexLevelResources ? paths.resourcePath : `${paths.resourcePath}${path.sep}${getResourceDir(paths.mdPath, note)}.resources`;
};
var resourceDirClears = /* @__PURE__ */ new Map();
var clearResourceDir = (note) => {
  const resPath = getAbsoluteResourceDir(note);
  if (!resourceDirClears.has(resPath)) {
    resourceDirClears.set(resPath, 0);
  }
  const clears = resourceDirClears.get(resPath) || 0;
  if ((yarleOptions.haveEnexLevelResources || yarleOptions.haveGlobalResources) && clears >= 1) {
    return;
  }
  clearDistDir(resPath);
  resourceDirClears.set(resPath, clears + 1);
};
var setPaths = (enexSource) => {
  const enexFile = enexSource.basename;
  const outputDir = path.isAbsolute(yarleOptions.outputDir) ? yarleOptions.outputDir : `${process.cwd()}${path.sep}${yarleOptions.outputDir}`;
  paths.mdPath = `${outputDir}${path.sep}`;
  paths.resourcePath = `${outputDir}${path.sep}${yarleOptions.resourcesDir}`;
  if (!yarleOptions.skipEnexFileNameFromOutputPath) {
    paths.mdPath = `${paths.mdPath}${enexFile}`;
    paths.resourcePath = `${outputDir}${path.sep}${enexFile}${path.sep}${yarleOptions.resourcesDir}`;
  }
  fs.mkdirSync(paths.mdPath, { recursive: true });
  if (!yarleOptions.haveEnexLevelResources && !yarleOptions.haveGlobalResources) {
    fs.mkdirSync(paths.resourcePath, { recursive: true });
  }
  console.log(`path ${paths.mdPath} created`);
};
var getNotesPath = () => {
  return paths.mdPath;
};

// src/formats/yarle/utils/note-utils.ts
var isComplex = (note) => {
  return note.resource ? true : false;
};
var isWebClip = (note) => {
  return note["note-attributes"] && (note["note-attributes"]["source-application"] === "webclipper.evernote" || note["note-attributes"]["source"] === "web.clip7");
};

// src/formats/yarle/utils/templates/placeholders/content-placeholders.ts
var content_placeholders_exports = {};
__export(content_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER,
  END_BLOCK: () => END_BLOCK,
  START_BLOCK: () => START_BLOCK
});
var CONTENT_PLACEHOLDER = "{content}";
var START_BLOCK = "{content-block}";
var END_BLOCK = "{end-content-block}";

// src/formats/yarle/utils/templates/apply-functions/apply-template-on-block.ts
var applyTemplateOnBlock = ({
  template,
  check,
  startBlockPlaceholder,
  endBlockPlaceholder,
  valuePlaceholder,
  value
}) => {
  if (value && check()) {
    return template.replace(new RegExp(`${startBlockPlaceholder}`, "g"), "").replace(new RegExp(`${endBlockPlaceholder}`, "g"), "").replace(new RegExp(`${valuePlaceholder}`, "g"), value);
  }
  const reg = `${startBlockPlaceholder}([\\d\\D])(?:.|(\r
|\r|
))*?(?=${endBlockPlaceholder})${endBlockPlaceholder}`;
  return template.replace(
    new RegExp(
      reg,
      "g"
    ),
    ""
  );
};

// src/formats/yarle/utils/templates/apply-functions/get-templateblock-settings.ts
var getTemplateBlockSettings = (text, check, T, value) => {
  return {
    template: text,
    check,
    startBlockPlaceholder: T.START_BLOCK,
    endBlockPlaceholder: T.END_BLOCK,
    valuePlaceholder: T.CONTENT_PLACEHOLDER,
    value
  };
};

// src/formats/yarle/utils/templates/apply-functions/apply-content-template.ts
var applyContentTemplate = (noteData, inputText, check) => {
  const contentTemplateSettings = getTemplateBlockSettings(inputText, check, content_placeholders_exports, noteData.content);
  return applyTemplateOnBlock(contentTemplateSettings);
};

// src/formats/yarle/utils/templates/placeholders/tags-placeholders.ts
var tags_placeholders_exports = {};
__export(tags_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER2,
  END_BLOCK: () => END_BLOCK2,
  START_BLOCK: () => START_BLOCK2
});
var CONTENT_PLACEHOLDER2 = "{tags}";
var START_BLOCK2 = "{tags-block}";
var END_BLOCK2 = "{end-tags-block}";

// src/formats/yarle/utils/templates/apply-functions/apply-tags-template.ts
var applyTagsTemplate = (noteData, inputText, check) => {
  const tagsTemplateSettings = getTemplateBlockSettings(inputText, check, tags_placeholders_exports, noteData.tags);
  return applyTemplateOnBlock(tagsTemplateSettings);
};

// src/formats/yarle/utils/templates/placeholders/title-placeholders.ts
var title_placeholders_exports = {};
__export(title_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER3,
  END_BLOCK: () => END_BLOCK3,
  START_BLOCK: () => START_BLOCK3
});
var CONTENT_PLACEHOLDER3 = "{title}";
var START_BLOCK3 = "{title-block}";
var END_BLOCK3 = "{end-title-block}";

// src/formats/yarle/utils/templates/apply-functions/apply-title-template.ts
var applyTitleTemplate = (noteData, inputText, check) => {
  const titleTemplateSettings = getTemplateBlockSettings(inputText, check, title_placeholders_exports, noteData.title);
  return applyTemplateOnBlock(titleTemplateSettings);
};

// src/formats/yarle/utils/templates/placeholders/createdat-placeholders.ts
var createdat_placeholders_exports = {};
__export(createdat_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER4,
  END_BLOCK: () => END_BLOCK4,
  START_BLOCK: () => START_BLOCK4
});
var CONTENT_PLACEHOLDER4 = "{created-at}";
var START_BLOCK4 = "{created-at-block}";
var END_BLOCK4 = "{end-created-at-block}";

// src/formats/yarle/utils/templates/apply-functions/apply-conditional-template.ts
var applyConditionalTemplate = (text, P, newValue) => {
  return text.replace(new RegExp(`${P.CONTENT_PLACEHOLDER}`, "g"), newValue || "").replace(new RegExp(`${P.START_BLOCK}`, "g"), "").replace(new RegExp(`${P.END_BLOCK}`, "g"), "");
};

// src/formats/yarle/utils/templates/apply-functions/apply-createdat-template.ts
var applyCreatedAtTemplate = (noteData, text) => {
  return applyConditionalTemplate(text, createdat_placeholders_exports, noteData.createdAt);
};

// src/formats/yarle/utils/templates/placeholders/updatedat-placeholders.ts
var updatedat_placeholders_exports = {};
__export(updatedat_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER5,
  END_BLOCK: () => END_BLOCK5,
  START_BLOCK: () => START_BLOCK5
});
var CONTENT_PLACEHOLDER5 = "{updated-at}";
var START_BLOCK5 = "{updated-at-block}";
var END_BLOCK5 = "{end-updated-at-block}";

// src/formats/yarle/utils/templates/apply-functions/apply-updatedat-template.ts
var applyUpdatedAtTemplate = (noteData, text) => {
  return applyConditionalTemplate(text, updatedat_placeholders_exports, noteData.updatedAt);
};

// src/formats/yarle/utils/templates/placeholders/sourceurl-placeholders.ts
var sourceurl_placeholders_exports = {};
__export(sourceurl_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER6,
  END_BLOCK: () => END_BLOCK6,
  START_BLOCK: () => START_BLOCK6
});
var CONTENT_PLACEHOLDER6 = "{source-url}";
var START_BLOCK6 = "{source-url-block}";
var END_BLOCK6 = "{end-source-url-block}";

// src/formats/yarle/utils/templates/apply-functions/apply-sourceurl-template.ts
var applySourceUrlTemplate = (noteData, text) => {
  return applyConditionalTemplate(text, sourceurl_placeholders_exports, noteData.sourceUrl);
};

// src/formats/yarle/utils/templates/placeholders/location-placeholders.ts
var location_placeholders_exports = {};
__export(location_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER7,
  END_BLOCK: () => END_BLOCK7,
  START_BLOCK: () => START_BLOCK7
});
var CONTENT_PLACEHOLDER7 = "{location}";
var START_BLOCK7 = "{location-block}";
var END_BLOCK7 = "{end-location-block}";

// src/formats/yarle/utils/templates/apply-functions/apply-location-template.ts
var applyLocationTemplate = (noteData, text) => {
  return applyConditionalTemplate(text, location_placeholders_exports, noteData.location);
};

// src/formats/yarle/utils/templates/placeholders/notebook-placeholders.ts
var notebook_placeholders_exports = {};
__export(notebook_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER8,
  END_BLOCK: () => END_BLOCK8,
  START_BLOCK: () => START_BLOCK8
});
var CONTENT_PLACEHOLDER8 = "{notebook}";
var START_BLOCK8 = "{notebook-block}";
var END_BLOCK8 = "{end-notebook-block}";

// src/formats/yarle/utils/templates/apply-functions/apply-notebook-template.ts
var applyNotebookTemplate = (noteData, text) => {
  return applyConditionalTemplate(text, notebook_placeholders_exports, noteData.notebookName);
};

// src/formats/yarle/utils/templates/placeholders/remindertime-placeholders.ts
var remindertime_placeholders_exports = {};
__export(remindertime_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER9,
  END_BLOCK: () => END_BLOCK9,
  START_BLOCK: () => START_BLOCK9
});
var CONTENT_PLACEHOLDER9 = "{reminder-time}";
var START_BLOCK9 = "{reminder-time-block}";
var END_BLOCK9 = "{end-reminder-time-block}";

// src/formats/yarle/utils/templates/apply-functions/apply-remindertime-template.ts
var applyReminderTimeTemplate = (noteData, text) => {
  return applyConditionalTemplate(text, remindertime_placeholders_exports, noteData.reminderTime);
};

// src/formats/yarle/utils/templates/placeholders/reminderorder-placeholders.ts
var reminderorder_placeholders_exports = {};
__export(reminderorder_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER10,
  END_BLOCK: () => END_BLOCK10,
  START_BLOCK: () => START_BLOCK10
});
var CONTENT_PLACEHOLDER10 = "{reminder-order}";
var START_BLOCK10 = "{reminder-order-block}";
var END_BLOCK10 = "{end-reminder-order-block}";

// src/formats/yarle/utils/templates/apply-functions/apply-reminderorder-template.ts
var applyReminderOrderTemplate = (noteData, text) => {
  return applyConditionalTemplate(text, reminderorder_placeholders_exports, noteData.reminderOrder);
};

// src/formats/yarle/utils/templates/placeholders/reminderdonetime-placeholders.ts
var reminderdonetime_placeholders_exports = {};
__export(reminderdonetime_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER11,
  END_BLOCK: () => END_BLOCK11,
  START_BLOCK: () => START_BLOCK11
});
var CONTENT_PLACEHOLDER11 = "{reminder-done-time}";
var START_BLOCK11 = "{reminder-done-time-block}";
var END_BLOCK11 = "{end-reminder-done-time-block}";

// src/formats/yarle/utils/templates/apply-functions/apply-reminderdonetime-template.ts
var applyReminderDoneTimeTemplate = (noteData, text) => {
  return applyConditionalTemplate(text, reminderdonetime_placeholders_exports, noteData.reminderDoneTime);
};

// src/formats/yarle/utils/templates/placeholders/tags-array-placeholders.ts
var tags_array_placeholders_exports = {};
__export(tags_array_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER12,
  END_BLOCK: () => END_BLOCK12,
  START_BLOCK: () => START_BLOCK12
});
var CONTENT_PLACEHOLDER12 = "{tags-array}";
var START_BLOCK12 = "{tags-array-block}";
var END_BLOCK12 = "{end-tags-array-block}";

// src/formats/yarle/utils/templates/apply-functions/apply-tags-array-template.ts
var applyTagsArrayTemplate = (noteData, inputText, check) => {
  if (noteData.tags) {
    noteData.tags = JSON.stringify(noteData.tags.split(" "));
  }
  const tagsTemplateSettings = getTemplateBlockSettings(inputText, check, tags_array_placeholders_exports, noteData.tags);
  return applyTemplateOnBlock(tagsTemplateSettings);
};

// src/formats/yarle/utils/templates/placeholders/metadata-placeholders.ts
var START_BLOCK13 = "{metadata-block}";
var END_BLOCK13 = "{end-metadata-block}";

// src/formats/yarle/utils/templates/match-all.ts
var MATCH_LF = "\r?\n?";

// src/formats/yarle/utils/templates/remove-functions/remove-placeholder.ts
var removePlaceholder = (text, P) => {
  return text.replace(
    new RegExp(
      `${P.START_BLOCK}(?<=${P.START_BLOCK})(.*)(?=${P.END_BLOCK})${P.END_BLOCK}${MATCH_LF}`,
      "g"
    ),
    ""
  );
};

// src/formats/yarle/utils/templates/remove-functions/remove-createdat-placeholder.ts
var removeCreatedAtPlaceholder = (text) => {
  return removePlaceholder(text, createdat_placeholders_exports);
};

// src/formats/yarle/utils/templates/remove-functions/remove-updatedat-placeholder.ts
var removeUpdatedAtPlaceholder = (text) => {
  return removePlaceholder(text, updatedat_placeholders_exports);
};

// src/formats/yarle/utils/templates/remove-functions/remove-sourceurl-placeholder.ts
var removeSourceUrlPlaceholder = (text) => {
  return removePlaceholder(text, sourceurl_placeholders_exports);
};

// src/formats/yarle/utils/templates/remove-functions/remove-notebook-placeholder.ts
var removeNotebookPlaceholder = (text) => {
  return removePlaceholder(text, notebook_placeholders_exports);
};

// src/formats/yarle/utils/templates/remove-functions/remove-location-placeholder.ts
var removeLocationPlaceholder = (text) => {
  return removePlaceholder(text, location_placeholders_exports);
};

// src/formats/yarle/utils/templates/placeholders/original-placeholders.ts
var original_placeholders_exports = {};
__export(original_placeholders_exports, {
  CONTENT_PLACEHOLDER: () => CONTENT_PLACEHOLDER13,
  END_BLOCK: () => END_BLOCK14,
  START_BLOCK: () => START_BLOCK14
});
var CONTENT_PLACEHOLDER13 = "{link-to-original}";
var START_BLOCK14 = "{link-to-original-block}";
var END_BLOCK14 = "{end-link-to-original-block}";

// src/formats/yarle/utils/templates/remove-functions/remove-link-to-original-placeholder.ts
var removeLinkToOriginalTemplate = (text) => {
  return removePlaceholder(text, original_placeholders_exports);
};

// src/formats/yarle/utils/templates/remove-functions/remove-remindertime-placeholder.ts
var removeReminderTimePlaceholder = (text) => {
  return removePlaceholder(text, remindertime_placeholders_exports);
};

// src/formats/yarle/utils/templates/remove-functions/remove-reminderdonetime-placeholder.ts
var removeReminderDoneTimePlaceholder = (text) => {
  return removePlaceholder(text, reminderdonetime_placeholders_exports);
};

// src/formats/yarle/utils/templates/remove-functions/remove-reminderorder-placeholder.ts
var removeReminderOrderPlaceholder = (text) => {
  return removePlaceholder(text, reminderorder_placeholders_exports);
};

// src/formats/yarle/utils/templates/templates.ts
var applyTemplate = (noteData, yarleOptions2) => {
  let result = yarleOptions2.currentTemplate;
  result = applyTitleTemplate(noteData, result, () => noteData.title);
  result = applyTagsTemplate(noteData, result, () => !yarleOptions2.skipTags);
  result = applyTagsArrayTemplate(noteData, result, () => !yarleOptions2.skipTags);
  result = applyContentTemplate(noteData, result, () => noteData.content);
  result = removeLinkToOriginalTemplate(result);
  result = !yarleOptions2.skipCreationTime && noteData.createdAt ? applyCreatedAtTemplate(noteData, result) : removeCreatedAtPlaceholder(result);
  result = !yarleOptions2.skipUpdateTime && noteData.updatedAt ? applyUpdatedAtTemplate(noteData, result) : removeUpdatedAtPlaceholder(result);
  result = !yarleOptions2.skipSourceUrl && noteData.sourceUrl ? applySourceUrlTemplate(noteData, result) : removeSourceUrlPlaceholder(result);
  result = !yarleOptions2.skipLocation && noteData.location ? applyLocationTemplate(noteData, result) : removeLocationPlaceholder(result);
  result = yarleOptions2.isNotebookNameNeeded && noteData.notebookName ? applyNotebookTemplate(noteData, result) : removeNotebookPlaceholder(result);
  result = !yarleOptions2.skipReminderTime && noteData.reminderTime ? applyReminderTimeTemplate(noteData, result) : removeReminderTimePlaceholder(result);
  result = !yarleOptions2.skipReminderOrder && noteData.reminderOrder ? applyReminderOrderTemplate(noteData, result) : removeReminderOrderPlaceholder(result);
  result = !yarleOptions2.skipReminderDoneTime && noteData.reminderDoneTime ? applyReminderDoneTimeTemplate(noteData, result) : removeReminderDoneTimePlaceholder(result);
  result = result.replace(START_BLOCK13, "").replace(END_BLOCK13, "");
  return result;
};

// src/formats/yarle/utils/file-utils.ts
var writeFile = (absFilePath, data, note) => {
  try {
    fs.writeFileSync(absFilePath, data);
    setFileDates(absFilePath, note);
  } catch (e2) {
    console.error("Cannot write file ", e2);
    throw e2;
  }
};

// src/formats/yarle/utils/save-md-file.ts
var saveMdFile = (data, note) => {
  const absMdFilePath = getMdFilePath(note);
  const runtimeProps = RuntimePropertiesSingleton.getInstance();
  runtimeProps.setCurrentNotePath(absMdFilePath);
  writeFile(absMdFilePath, data, note);
  console.log(`Note saved to ${absMdFilePath}`);
};

// src/formats/yarle/process-resources.ts
var getResourceWorkDirs = (note) => {
  const pathSepRegExp = new RegExp(`\\${path.sep}`, "g");
  const relativeResourceWorkDir = getRelativeResourceDir(note).replace(pathSepRegExp, yarleOptions.pathSeparator || "/");
  const absoluteResourceWorkDir = getAbsoluteResourceDir(note);
  return { absoluteResourceWorkDir, relativeResourceWorkDir };
};
var processResources = (note) => {
  let resourceHashes = {};
  let updatedContent = note.content;
  const { absoluteResourceWorkDir, relativeResourceWorkDir } = getResourceWorkDirs(note);
  console.log(`relative resource work dir: ${relativeResourceWorkDir}`);
  console.log(`absolute resource work dir: ${absoluteResourceWorkDir}`);
  clearResourceDir(note);
  if (Array.isArray(note.resource)) {
    for (const resource of note.resource) {
      resourceHashes = {
        ...resourceHashes,
        ...processResource(absoluteResourceWorkDir, resource)
      };
    }
  } else {
    resourceHashes = {
      ...resourceHashes,
      ...processResource(absoluteResourceWorkDir, note.resource)
    };
  }
  for (const hash2 of Object.keys(resourceHashes)) {
    updatedContent = addMediaReference(updatedContent, resourceHashes, hash2, relativeResourceWorkDir);
  }
  return updatedContent;
};
var addMediaReference = (content, resourceHashes, hash2, workDir) => {
  const src = `${workDir}${yarleOptions.pathSeparator}${resourceHashes[hash2].fileName.replace(/ /g, " ")}`;
  console.log(`mediaReference src ${src} added`);
  let updatedContent;
  const replace = `<en-media ([^>]*)hash="${hash2}".([^>]*)>`;
  const re = new RegExp(replace, "g");
  const matchedElements = content.match(re);
  const mediaType = matchedElements && matchedElements.length > 0 && matchedElements[0].split("type=");
  if (mediaType && mediaType.length > 1 && mediaType[1].startsWith('"image')) {
    const width = matchedElements[0].match(/width="(\w+)"/);
    const widthParam = width ? ` width="${width[1]}"` : "";
    const height = matchedElements[0].match(/height="(\w+)"/);
    const heightParam = height ? ` height="${height[1]}"` : "";
    updatedContent = content.replace(re, `<img src="${src}"${widthParam}${heightParam} alt="${resourceHashes[hash2].fileName}">`);
  } else {
    updatedContent = content.replace(re, `<a href="${src}" type="file">${resourceHashes[hash2].fileName}</a>`);
  }
  return updatedContent;
};
var processResource = (workDir, resource) => {
  const resourceHash = {};
  const data = resource.data.$text;
  if (resource.mime === "application/octet-stream") {
    return resourceHash;
  }
  const accessTime = getTimeStampMoment(resource);
  const resourceFileProps = getResourceFileProperties(workDir, resource);
  let fileName = resourceFileProps.fileName;
  const absFilePath = `${workDir}${path.sep}${fileName}`;
  console.log(resource);
  console.log(data);
  let buffer = Buffer.from(data, "base64");
  fs.writeFileSync(absFilePath, buffer);
  const atime = accessTime.valueOf() / 1e3;
  fs.utimesSync(absFilePath, atime, atime);
  if (resource.recognition && fileName) {
    const hashIndex = resource.recognition.match(/[a-f0-9]{32}/);
    console.log(`resource ${fileName} added with hash ${hashIndex}`);
    resourceHash[hashIndex] = { fileName, alreadyUsed: false };
  } else {
    let hash2 = import_crypto.default.createHash("md5");
    hash2.update(buffer);
    const md5Hash = hash2.digest("hex");
    resourceHash[md5Hash] = { fileName, alreadyUsed: false };
  }
  return resourceHash;
};
var extractDataUrlResources = (note, content) => {
  if (content.indexOf('src="data:') < 0) {
    return content;
  }
  const { absoluteResourceWorkDir, relativeResourceWorkDir } = getResourceWorkDirs(note);
  fs.mkdirSync(absoluteResourceWorkDir, { recursive: true });
  return content.replace(/src="data:([^;,]*)(;base64)?,([^"]*)"/g, (match, mediatype, encoding, data) => {
    const fileName = createResourceFromData(mediatype, encoding === ";base64", data, absoluteResourceWorkDir, note);
    const src = `${relativeResourceWorkDir}${yarleOptions.pathSeparator}${fileName}`;
    return `src="${src}"`;
  });
};
var createResourceFromData = (mediatype, base64, data, absoluteResourceWorkDir, note) => {
  const baseName = "embedded";
  const extension = extensionForMimeType(mediatype) || ".dat";
  const index = getFileIndex(absoluteResourceWorkDir, baseName);
  const fileName = index < 1 ? `${baseName}.${extension}` : `${baseName}.${index}.${extension}`;
  const absFilePath = `${absoluteResourceWorkDir}${path.sep}${fileName}`;
  if (!base64) {
    data = decodeURIComponent(data);
  }
  fs.writeFileSync(absFilePath, data, base64 ? "base64" : void 0);
  setFileDates(absFilePath, note);
  console.log(`data url resource ${fileName} added`);
  return fileName;
};
var extensionForMimeType = (mediatype) => {
  const subtype = mediatype.split("/").pop();
  return subtype.split("+")[0];
};

// src/formats/yarle/process-node.ts
var processNode = (note, notebookName) => {
  const dateStarted = new Date();
  const runtimeProps = RuntimePropertiesSingleton.getInstance();
  runtimeProps.setCurrentNoteName(note.title);
  if (Array.isArray(note.content)) {
    note.content = note.content.join("");
  }
  let noteData = {
    title: note.title,
    content: note.content,
    htmlContent: note.content,
    originalContent: note.content
  };
  console.log(`Converting for note "${noteData.title}" started at ${dateStarted}...`);
  try {
    if (isComplex(note)) {
      noteData.htmlContent = processResources(note);
    }
    noteData.htmlContent = extractDataUrlResources(note, noteData.htmlContent);
    noteData = { ...noteData, ...convertHtml2Md(yarleOptions, noteData) };
    noteData = { ...noteData, ...getMetadata(note, notebookName) };
    noteData = { ...noteData, ...getTags(note) };
    const data = applyTemplate(noteData, yarleOptions);
    saveMdFile(data, note);
  } catch (e2) {
    console.error(`Failed to convert note: ${noteData.title}`, e2);
    throw e2;
  } finally {
    const dateFinished = new Date();
    const conversionDuration = (dateFinished.getTime() - dateStarted.getTime()) / 1e3;
    console.log(`Conversion for note "${noteData.title}" finished at ${dateFinished}. Took ${conversionDuration} seconds`);
  }
};

// src/formats/yarle/process-tasks.ts
var import_obsidian8 = require("obsidian");

// src/formats/yarle/utils/get-task-status-md.ts
var getTaskStatusMd = (task) => {
  return task.taskstatus === "open" /* Open */ ? checkboxTodo : checkboxDone;
};

// src/formats/yarle/process-tasks.ts
var MEDIUM_PRIORITY_ICON = "\u{1F53C}";
var LOW_PRIORITY_ICON = "\u{1F53D}";
var DUE_DATE_ICON = "\u{1F4C5}";
var SCHEDULE_DATE_ICON = "\u23F3";
var convertTasktoMd = (task, notebookName) => {
  const taskStatusMd = getTaskStatusMd(task);
  const title = task.title ? ` ${task.title}` : "";
  const tag = yarleOptions.obsidianTaskTag !== "" ? ` ${yarleOptions.obsidianTaskTag}` : "";
  const duedate = task.duedate && !isNaN(task.duedate.getTime()) ? ` ${DUE_DATE_ICON} ${convertDateFormat(task.duedate)}` : "";
  const reminder = task.reminderdate ? ` ${SCHEDULE_DATE_ICON} ${convertDateFormat(task.reminderdate)}` : "";
  const priority = task.taskflag ? ` ${MEDIUM_PRIORITY_ICON}` : ` ${LOW_PRIORITY_ICON}`;
  return `${taskStatusMd}${tag}${title}${duedate}${reminder}${priority}`;
};
var convertDateFormat = (dateProp) => {
  return (0, import_obsidian8.moment)(dateProp).format("YYYY-MM-DD").toString();
};

// src/formats/yarle/utils/get-all-output-files.ts
var getAllOutputFilesWithExtension = (dirPath, arrayOfFiles, extension) => {
  const files = fs.readdirSync(dirPath);
  arrayOfFiles = arrayOfFiles || [];
  files.forEach((file) => {
    if (fs.statSync(`${dirPath}${path.sep}${file}`).isDirectory()) {
      arrayOfFiles = getAllOutputFilesWithExtension(`${dirPath}${path.sep}${file}`, arrayOfFiles, extension);
    } else {
      if (extension && path.extname(file) == `.${extension}` || !extension) {
        arrayOfFiles.push(path.join(dirPath, "/", file));
      }
    }
  });
  return arrayOfFiles;
};

// src/formats/yarle/utils/apply-links.ts
var applyLinks = (options, outputNotebookFolders) => {
  const linkNameMap = RuntimePropertiesSingleton.getInstance();
  const allLinks = linkNameMap.getAllNoteIdNameMap();
  let entries = Object.entries(allLinks);
  if (entries.length === 0)
    return;
  console.log("About to update links...");
  const allconvertedFiles = [];
  for (const outputFolder of outputNotebookFolders) {
    getAllOutputFilesWithExtension(outputFolder, allconvertedFiles, "");
  }
  for (const notebookFolder of outputNotebookFolders) {
    console.log(`Notebook: ${notebookFolder}`);
    const filesInOutputDir = fs.readdirSync(notebookFolder);
    const targetFiles = filesInOutputDir.filter((file) => {
      return path.extname(file).toLowerCase() === ".md";
    });
    console.log(`${targetFiles.length} files to check for links`);
    for (const targetFile of targetFiles) {
      let filepath = path.join(notebookFolder, targetFile);
      const fileContent = fs.readFileSync(filepath, "utf8");
      let updatedContent = fileContent;
      for (const [linkName, linkProps] of entries) {
        const uniqueId = linkProps.uniqueEnd;
        let fileName = linkProps.title;
        if (allconvertedFiles.find((fn) => fn.includes(uniqueId))) {
          fileName = truncatFileName(fileName, uniqueId);
        }
        const notebookName = linkProps.notebookName;
        const encodedFileName = options.urlEncodeFileNamesAndLinks ? encodeURI(fileName) : fileName;
        let replacement = encodedFileName;
        if (notebookName && !notebookFolder.endsWith(notebookName)) {
          replacement = `${notebookName}/${encodedFileName}`;
        }
        const regexp = new RegExp(escapeStringRegexp(linkName), "g");
        updatedContent = updatedContent.replace(regexp, replacement);
      }
      if (fileContent !== updatedContent) {
        console.log(`File written: ${filepath}`);
        fs.writeFileSync(filepath, updatedContent);
      }
    }
  }
  console.log("Link update complete.");
};

// src/formats/yarle/utils/templates/checker-functions.ts
var hasCreationTimeInTemplate = (templateContent) => {
  return hasItemInTemplate(createdat_placeholders_exports, templateContent);
};
var hasLocationInTemplate = (templateContent) => {
  return hasItemInTemplate(location_placeholders_exports, templateContent);
};
var hasNotebookInTemplate = (templateContent) => {
  return hasItemInTemplate(notebook_placeholders_exports, templateContent);
};
var hasSourceURLInTemplate = (templateContent) => {
  return hasItemInTemplate(sourceurl_placeholders_exports, templateContent);
};
var hasAnyTagsInTemplate = (templateContent) => {
  return hasItemInTemplate(tags_placeholders_exports, templateContent) || hasItemInTemplate(tags_array_placeholders_exports, templateContent);
};
var hasUpdateTimeInTemplate = (templateContent) => {
  return hasItemInTemplate(updatedat_placeholders_exports, templateContent);
};
var hasItemInTemplate = (item, templateContent) => {
  return templateContent.includes(item.START_BLOCK) && templateContent.includes(item.CONTENT_PLACEHOLDER) && templateContent.includes(item.END_BLOCK);
};

// src/formats/yarle/utils/templates/default-template.ts
var tagBlock = "{tags-array-block}---\ntags: {tags-array}\n---\n{end-tags-array-block}";
var titleBlock = "{title-block}# {title}\n\n{end-title-block}";
var contentBlock = "{content-block}{content}{end-content-block}\n";
var defaultTemplate = tagBlock + titleBlock + contentBlock;

// src/formats/yarle/yarle.ts
var flow = import_obsidian9.Platform.isDesktopApp ? require_xml_flow() : null;
var defaultYarleOptions = {
  enexSources: [],
  currentTemplate: "",
  outputDir: "./mdNotes",
  isMetadataNeeded: false,
  isNotebookNameNeeded: false,
  isZettelkastenNeeded: false,
  useZettelIdAsFilename: false,
  plainTextNotesOnly: false,
  skipWebClips: false,
  useHashTags: true,
  nestedTags: {
    separatorInEN: "_",
    replaceSeparatorWith: "/",
    replaceSpaceWith: "-"
  },
  obsidianTaskTag: "",
  urlEncodeFileNamesAndLinks: false,
  sanitizeResourceNameSpaces: false,
  replacementChar: "_",
  pathSeparator: "/",
  resourcesDir: "_resources",
  turndownOptions: {
    headingStyle: "atx"
  }
};
var yarleOptions = { ...defaultYarleOptions };
function deepCopy(obj) {
  if (obj === void 0 || obj === null)
    return obj;
  return JSON.parse(JSON.stringify(obj));
}
function merge(original, ...objects) {
  for (let object of objects) {
    for (let key of Object.keys(object)) {
      let value = object[key];
      let originalValue = original[key];
      if (!Array.isArray(value) && typeof value === "object" && !Array.isArray(originalValue) && typeof originalValue === "object") {
        original[key] = merge({}, originalValue, value);
      } else {
        original[key] = deepCopy(value);
      }
    }
  }
  return original;
}
var setOptions = (options) => {
  yarleOptions = merge({}, defaultYarleOptions, options);
  let template = yarleOptions.templateFile ? fs.readFileSync(yarleOptions.templateFile, "utf-8") : defaultTemplate;
  template = yarleOptions.currentTemplate ? yarleOptions.currentTemplate : template;
  yarleOptions.skipCreationTime = !hasCreationTimeInTemplate(template);
  yarleOptions.skipLocation = !hasLocationInTemplate(template);
  yarleOptions.skipSourceUrl = !hasSourceURLInTemplate(template);
  yarleOptions.skipTags = !hasAnyTagsInTemplate(template);
  yarleOptions.skipUpdateTime = !hasUpdateTimeInTemplate(template);
  yarleOptions.isNotebookNameNeeded = hasNotebookInTemplate(template);
  yarleOptions.currentTemplate = template;
  console.log(`Current config is: ${JSON.stringify(yarleOptions, null, 4)}`);
  console.log(`Path separator:${path.sep}`);
};
var parseStream = async (options, enexSource, ctx) => {
  if (!(enexSource instanceof NodePickedFile))
    throw new Error("Evernote import currently only works on desktop");
  ctx.status("Processing " + enexSource.name);
  console.log(`Getting stream from ${enexSource}`);
  const stream = enexSource.createReadStream();
  const tasks = {};
  const notebookName = enexSource.basename;
  return new Promise((resolve, reject) => {
    const logAndReject = (e2) => {
      ctx.reportFailed(enexSource.fullpath, e2);
      return reject(e2);
    };
    const xml = flow(stream);
    let noteAttributes = null;
    xml.on("tag:note-attributes", (na) => {
      noteAttributes = na;
    });
    xml.on("tag:note", (note) => {
      if (ctx.isCancelled()) {
        stream.close();
        return;
      }
      if (options.skipWebClips && isWebClip(note)) {
        ctx.reportSkipped(note.title);
      } else {
        ctx.status("Importing note " + note.title);
        if (noteAttributes) {
          note["note-attributes"] = noteAttributes;
        }
        try {
          processNode(note, notebookName);
          ctx.reportNoteSuccess(notebookName + "/" + note.title);
        } catch (e2) {
          ctx.reportFailed(note.title || enexSource, e2);
          return resolve();
        }
      }
      noteAttributes = null;
      const runtimeProps = RuntimePropertiesSingleton.getInstance();
      const currentNotePath = runtimeProps.getCurrentNotePath();
      if (currentNotePath) {
        for (const task of Object.keys(tasks)) {
          const taskPlaceholder = `<YARLE-EN-V10-TASK>${task}</YARLE-EN-V10-TASK>`;
          const fileContent = fs.readFileSync(currentNotePath, "utf8");
          const sortedTasks = new Map([...tasks[task]].sort());
          let updatedContent = fileContent.replace(taskPlaceholder, [...sortedTasks.values()].join("\n"));
          fs.writeFileSync(currentNotePath, updatedContent);
        }
      }
    });
    xml.on("tag:task", (pureTask) => {
      const task = mapEvernoteTask(pureTask);
      if (!tasks[task.taskgroupnotelevelid]) {
        tasks[task.taskgroupnotelevelid] = /* @__PURE__ */ new Map();
      }
      tasks[task.taskgroupnotelevelid].set(task.sortweight, convertTasktoMd(task, notebookName));
    });
    xml.on("end", resolve);
    xml.on("error", logAndReject);
    stream.on("error", logAndReject);
  });
};
async function dropTheRope(options, ctx) {
  setOptions(options);
  const outputNotebookFolders = [];
  for (const enex of options.enexSources) {
    if (ctx.isCancelled())
      return;
    setPaths(enex);
    const runtimeProps = RuntimePropertiesSingleton.getInstance();
    runtimeProps.setCurrentNotebookName(enex.basename);
    await parseStream(options, enex, ctx);
    outputNotebookFolders.push(getNotesPath());
  }
  if (ctx.isCancelled())
    return;
  await applyLinks(options, outputNotebookFolders);
}

// src/formats/evernote-enex.ts
var EvernoteEnexImporter = class extends FormatImporter {
  init() {
    this.addFileChooserSetting("Evernote", ["enex"], true);
    this.addOutputLocationSetting("Evernote");
  }
  async import(ctx) {
    let { files } = this;
    if (files.length === 0) {
      new import_obsidian10.Notice("Please pick at least one file to import.");
      return;
    }
    let folder = await this.getOutputFolder();
    if (!folder) {
      new import_obsidian10.Notice("Please select a location to export to.");
      return;
    }
    let { app } = this;
    let adapter = app.vault.adapter;
    if (!(adapter instanceof import_obsidian10.FileSystemAdapter))
      return;
    let yarleOptions2 = {
      ...defaultYarleOptions,
      ...{
        enexSources: files,
        outputDir: path.join(adapter.getBasePath(), folder.path)
      }
    };
    await dropTheRope(yarleOptions2, ctx);
  }
};

// src/formats/html.ts
var import_obsidian11 = require("obsidian");
var HtmlImporter = class extends FormatImporter {
  init() {
    this.addFileChooserSetting("HTML", ["htm", "html"], true);
    this.addAttachmentSizeLimit(0);
    this.addMinimumImageSize(65);
    this.addOutputLocationSetting("HTML import");
  }
  addAttachmentSizeLimit(defaultInMB) {
    this.attachmentSizeLimit = defaultInMB * 10 ** 6;
    new import_obsidian11.Setting(this.modal.contentEl).setName("Attachment size limit (MB)").setDesc("Set 0 to disable.").addText((text) => text.then(({ inputEl }) => {
      inputEl.type = "number";
      inputEl.step = "0.1";
    }).setValue(defaultInMB.toString()).onChange((value) => {
      const num = ["+", "-"].includes(value) ? 0 : Number(value);
      if (Number.isNaN(num) || num < 0) {
        text.setValue((this.attachmentSizeLimit / 10 ** 6).toString());
        return;
      }
      this.attachmentSizeLimit = num * 10 ** 6;
    }));
  }
  addMinimumImageSize(defaultInPx) {
    this.minimumImageSize = defaultInPx;
    new import_obsidian11.Setting(this.modal.contentEl).setName("Minimum image size (px)").setDesc("Set 0 to disable.").addText((text) => text.then(({ inputEl }) => inputEl.type = "number").setValue(defaultInPx.toString()).onChange((value) => {
      const num = ["+", "-"].includes(value) ? 0 : Number(value);
      if (!Number.isInteger(num) || num < 0) {
        text.setValue(this.minimumImageSize.toString());
        return;
      }
      this.minimumImageSize = num;
    }));
  }
  async import(ctx) {
    const { files } = this;
    if (files.length === 0) {
      new import_obsidian11.Notice("Please pick at least one file to import.");
      return;
    }
    const folder = await this.getOutputFolder();
    if (!folder) {
      new import_obsidian11.Notice("Please select a location to export to.");
      return;
    }
    for (let i = 0; i < files.length; i++) {
      if (ctx.isCancelled())
        return;
      ctx.reportProgress(i, files.length);
      await this.processFile(ctx, folder, files[i]);
    }
  }
  async processFile(ctx, folder, file) {
    ctx.status("Processing " + file.name);
    try {
      const htmlContent = await file.readText();
      const dom = parseHTML(htmlContent);
      fixDocumentUrls(dom);
      const baseUrl = file instanceof NodePickedFile ? url.pathToFileURL(file.filepath) : void 0;
      const attachments = /* @__PURE__ */ new Map();
      const attachmentLookup = /* @__PURE__ */ new Map();
      for (let el of dom.findAll("img, audio, video")) {
        if (ctx.isCancelled())
          return;
        let src = el.getAttribute("src");
        if (!src)
          continue;
        try {
          const url2 = new URL(src.startsWith("//") ? `https:${src}` : src, baseUrl);
          let key = url2.href;
          let attachmentFile = attachments.get(key);
          if (!attachments.has(key)) {
            ctx.status("Downloading attachment for " + file.name);
            attachmentFile = await this.downloadAttachment(folder, el, url2);
            attachments.set(key, attachmentFile);
            if (attachmentFile) {
              attachmentLookup.set(attachmentFile.path, attachmentFile);
              ctx.reportAttachmentSuccess(attachmentFile.name);
            } else {
              ctx.reportSkipped(src);
            }
          }
          if (attachmentFile) {
            el.setAttribute("src", attachmentFile.path.replace(/ /g, "%20"));
            if (!(el instanceof HTMLImageElement)) {
              el.replaceWith(createEl("img", {
                attr: {
                  src: attachmentFile.path.replace(/ /g, "%20"),
                  alt: el.getAttr("alt")
                }
              }));
            }
          }
        } catch (e2) {
          ctx.reportFailed(src, e2);
        }
      }
      let mdContent = (0, import_obsidian11.htmlToMarkdown)(dom);
      let mdFile = await this.saveAsMarkdownFile(folder, file.basename, mdContent);
      if (!Object.isEmpty(attachments)) {
        let { metadataCache } = this.app;
        let cache;
        if (metadataCache.computeMetadataAsync) {
          cache = await metadataCache.computeMetadataAsync(stringToUtf8(mdContent));
        } else {
          cache = await new Promise((resolve) => {
            let cache2 = metadataCache.getFileCache(mdFile);
            if (cache2)
              return resolve(cache2);
            const ref = metadataCache.on("changed", (file2, content, cache3) => {
              if (file2 === mdFile) {
                metadataCache.offref(ref);
                resolve(cache3);
              }
            });
          });
        }
        let changes = [];
        if (cache.embeds) {
          for (let { link, position } of cache.embeds) {
            if (attachmentLookup.has(link)) {
              let newLink = this.app.fileManager.generateMarkdownLink(attachmentLookup.get(link), mdFile.path);
              changes.push({ from: position.start.offset, to: position.end.offset, text: newLink });
            }
          }
        }
        changes.sort((a, b) => b.from - a.from);
        for (let change of changes) {
          mdContent = mdContent.substring(0, change.from) + change.text + mdContent.substring(change.to);
        }
        await this.vault.modify(mdFile, mdContent);
      }
      ctx.reportNoteSuccess(file.fullpath);
    } catch (e2) {
      ctx.reportFailed(file.fullpath, e2);
    }
  }
  async downloadAttachment(folder, el, url2) {
    let basename = "";
    let extension = "";
    let data;
    switch (url2.protocol) {
      case "file:":
        let filepath = url.fileURLToPath(url2.href);
        ({ basename, extension } = parseFilePath(filepath));
        data = nodeBufferToArrayBuffer(await fsPromises.readFile(filepath));
        break;
      case "https:":
      case "http:":
        let response = await requestURL(url2);
        let pathInfo = parseURL(url2);
        basename = pathInfo.basename;
        data = response.data;
        extension = extensionForMime(response.mime) || pathInfo.extension;
        break;
      default:
        throw new Error(url2.href);
    }
    if (!this.filterAttachmentSize(data))
      return null;
    if (el instanceof HTMLImageElement && !await this.filterImageSize(data))
      return null;
    if (!extension) {
      if (el instanceof HTMLImageElement) {
        extension = "png";
      } else if (el instanceof HTMLAudioElement) {
        extension = "mp3";
      } else if (el instanceof HTMLVideoElement) {
        extension = "mp4";
      } else {
        return null;
      }
    }
    let attachmentFolder = await this.createFolders((0, import_obsidian11.normalizePath)(folder.path + "/Attachments"));
    const path2 = await this.vault.getAvailablePath(attachmentFolder.getParentPrefix() + basename, extension);
    return await this.vault.createBinary(path2, data);
  }
  filterAttachmentSize(data) {
    const { byteLength } = data;
    return !this.attachmentSizeLimit || byteLength <= this.attachmentSizeLimit;
  }
  async filterImageSize(data) {
    if (!this.minimumImageSize) {
      return true;
    }
    let size;
    try {
      size = await getImageSize(data);
    } catch (e2) {
      return true;
    }
    const { height, width } = size;
    return width >= this.minimumImageSize && height >= this.minimumImageSize;
  }
};
function fixElementRef(element, attribute) {
  const value = element.getAttribute(attribute);
  if (value !== null) {
    element.setAttribute(attribute, value.replace(/ /gu, "%20"));
  }
}
function fixDocumentUrls(el) {
  el.findAll("a").forEach((element) => fixElementRef(element, "href"));
  el.findAll("audio, img, video").forEach((element) => fixElementRef(element, "src"));
}
function parseURL(url2) {
  return parseFilePath((0, import_obsidian11.normalizePath)(decodeURIComponent(url2.pathname)));
}
async function requestURL(url2) {
  var _a, _b;
  try {
    const response2 = await fetch(url2, {
      mode: "cors",
      referrerPolicy: "no-referrer"
    });
    if (response2.ok) {
      return {
        data: await response2.arrayBuffer(),
        mime: (_a = response2.headers.get("Content-Type")) != null ? _a : ""
      };
    }
  } catch (e2) {
  }
  const response = await (0, import_obsidian11.requestUrl)(url2.href);
  return {
    data: response.arrayBuffer,
    mime: (_b = response.headers["Content-Type"]) != null ? _b : ""
  };
}
async function getImageSize(data) {
  const image = new Image();
  const url2 = URL.createObjectURL(new Blob([data]));
  try {
    return await new Promise((resolve, reject) => {
      image.addEventListener("error", ({ error }) => reject(error), { once: true, passive: true });
      image.addEventListener(
        "load",
        () => resolve({ height: image.naturalHeight, width: image.naturalWidth }),
        { once: true, passive: true }
      );
      image.src = url2;
    });
  } finally {
    URL.revokeObjectURL(url2);
  }
}

// src/formats/keep-json.ts
var import_obsidian12 = require("obsidian");

// src/formats/keep/util.ts
var potentialTagsRe = /(#[^ ^#]*)/g;
var illegalTagCharsRe = /[\\:*?<>\"|!@#$%^&()+=\`\'~;,.]/g;
function sanitizeTag(name) {
  let tagName = name.replace(illegalTagCharsRe, "");
  tagName = tagName.split(" ").join("-");
  if (!isNaN(tagName[0])) {
    tagName = "_" + tagName;
  }
  return tagName;
}
function sanitizeTags(str) {
  return str.replace(potentialTagsRe, (str2) => {
    return "#" + sanitizeTag(str2);
  });
}
function toSentenceCase(str) {
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
}

// src/formats/keep-json.ts
var BUNDLE_EXTS = ["zip"];
var NOTE_EXTS = ["json"];
var ATTACHMENT_EXTS = ["png", "webp", "jpg", "jpeg", "gif", "bmp", "svg", "mpg", "m4a", "webm", "wav", "ogv", "3gp", "mov", "mp4", "mkv", "pdf"];
var ZIP_IGNORED_EXTS = ["html", "txt"];
var KeepImporter = class extends FormatImporter {
  constructor() {
    super(...arguments);
    this.importArchived = false;
    this.importTrashed = false;
  }
  init() {
    this.addFileChooserSetting("Notes & attachments", [...BUNDLE_EXTS, ...NOTE_EXTS, ...ATTACHMENT_EXTS], true);
    this.importArchivedSetting = new import_obsidian12.Setting(this.modal.contentEl).setName("Import archived notes").setDesc("If imported, files archived in Google Keep will be tagged as archived.").addToggle((toggle) => {
      toggle.setValue(this.importArchived);
      toggle.onChange(async (value) => {
        this.importArchived = value;
      });
    });
    this.importTrashedSetting = new import_obsidian12.Setting(this.modal.contentEl).setName("Import deleted notes").setDesc("If imported, files deleted in Google Keep will be tagged as deleted. Deleted notes will only exist in your Google export if deleted recently.").addToggle((toggle) => {
      toggle.setValue(this.importTrashed);
      toggle.onChange(async (value) => {
        this.importTrashed = value;
      });
    });
    this.addOutputLocationSetting("Google Keep");
  }
  async import(ctx) {
    let { files } = this;
    if (files.length === 0) {
      new import_obsidian12.Notice("Please pick at least one file to import.");
      return;
    }
    let folder = await this.getOutputFolder();
    if (!folder) {
      new import_obsidian12.Notice("Please select a location to import your files to.");
      return;
    }
    let assetFolderPath = `${folder.path}/Assets`;
    for (let file of files) {
      if (ctx.isCancelled())
        return;
      await this.handleFile(file, folder, assetFolderPath, ctx);
    }
  }
  async handleFile(file, folder, assetFolderPath, ctx) {
    let { fullpath, name, extension } = file;
    ctx.status("Processing " + name);
    try {
      if (extension === "zip") {
        await this.readZipEntries(file, folder, assetFolderPath, ctx);
      } else if (extension === "json") {
        await this.importKeepNote(file, folder, ctx);
      } else if (ATTACHMENT_EXTS.contains(extension)) {
        ctx.status("Importing attachment " + name);
        await this.copyFile(file, assetFolderPath);
        ctx.reportAttachmentSuccess(fullpath);
      } else if (!(file instanceof ZipEntryFile) && !ZIP_IGNORED_EXTS.contains(extension)) {
        ctx.reportSkipped(fullpath);
      }
    } catch (e2) {
      ctx.reportFailed(fullpath, e2);
    }
  }
  async readZipEntries(file, folder, assetFolderPath, ctx) {
    await readZip(file, async (zip, entries) => {
      for (let entry of entries) {
        if (ctx.isCancelled())
          return;
        await this.handleFile(entry, folder, assetFolderPath, ctx);
      }
    });
  }
  async importKeepNote(file, folder, ctx) {
    let { fullpath, basename } = file;
    ctx.status("Importing note " + basename);
    let content = await file.readText();
    const keepJson = JSON.parse(content);
    if (!keepJson || !keepJson.userEditedTimestampUsec || !keepJson.createdTimestampUsec) {
      ctx.reportFailed(fullpath, "Invalid Google Keep JSON");
      return;
    }
    if (keepJson.isArchived && !this.importArchived) {
      ctx.reportSkipped(fullpath, "Archived note");
      return;
    }
    if (keepJson.isTrashed && !this.importTrashed) {
      ctx.reportSkipped(fullpath, "Deleted note");
      return;
    }
    await this.convertKeepJson(keepJson, folder, basename);
    ctx.reportNoteSuccess(fullpath);
  }
  // Keep assets have filenames that appear unique, so no duplicate handling isn't implemented
  async copyFile(file, folderPath) {
    let assetFolder = await this.createFolders(folderPath);
    let data = await file.read();
    await this.vault.createBinary(`${assetFolder.path}/${file.name}`, data);
  }
  async convertKeepJson(keepJson, folder, filename) {
    let mdContent = [];
    let frontMatter = {};
    if (keepJson.title) {
      let aliases = keepJson.title.split("\n").filter((a) => a !== filename);
      if (aliases.length > 0) {
        frontMatter["aliases"] = aliases;
      }
    }
    let tags = [];
    if (keepJson.color && keepJson.color !== "DEFAULT") {
      let colorName = keepJson.color.toLowerCase();
      colorName = toSentenceCase(colorName);
      tags.push(`Keep/Color/${colorName}`);
    }
    if (keepJson.isPinned)
      tags.push("Keep/Pinned");
    if (keepJson.attachments)
      tags.push("Keep/Attachment");
    if (keepJson.isArchived)
      tags.push("Keep/Archived");
    if (keepJson.isTrashed)
      tags.push("Keep/Deleted");
    if (keepJson.labels) {
      for (let label of keepJson.labels) {
        tags.push(`Keep/Label/${label.name}`);
      }
    }
    if (tags.length > 0) {
      frontMatter["tags"] = tags.map((tag) => sanitizeTag(tag));
    }
    mdContent.push(serializeFrontMatter(frontMatter));
    if (keepJson.textContent) {
      mdContent.push("\n");
      mdContent.push(sanitizeTags(keepJson.textContent));
    }
    if (keepJson.listContent) {
      let mdListContent = [];
      for (const listItem of keepJson.listContent) {
        if (!listItem.text)
          continue;
        let listItemContent = `- [${listItem.isChecked ? "X" : " "}] ${listItem.text}`;
        mdListContent.push(sanitizeTags(listItemContent));
      }
      mdContent.push("\n\n");
      mdContent.push(mdListContent.join("\n"));
    }
    if (keepJson.attachments) {
      mdContent.push("\n\n");
      for (const attachment of keepJson.attachments) {
        mdContent.push(`![[${attachment.filePath}]]`);
      }
    }
    const file = await this.saveAsMarkdownFile(folder, filename, mdContent.join(""));
    await this.vault.append(file, "", {
      ctime: keepJson.createdTimestampUsec / 1e3,
      mtime: keepJson.userEditedTimestampUsec / 1e3
    });
  }
};

// src/formats/roam-json.ts
var import_obsidian14 = require("obsidian");

// src/formats/roam/utils.ts
var import_obsidian13 = require("obsidian");
var illegalReNoDir = /[\?<>\\:\*\|"]/g;
var controlRe2 = /[\x00-\x1f\x80-\x9f]/g;
var reservedRe2 = /^\.+$/;
var windowsReservedRe2 = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i;
var windowsTrailingRe2 = /[\. ]+$/;
var startsWithDotRe2 = /^\./;
var squareBracketOpenRe2 = /\[/g;
var squareBracketCloseRe2 = /\]/g;
function sanitizeFileNameKeepPath(name) {
  return name.replace(illegalReNoDir, "").replace(controlRe2, "").replace(reservedRe2, "").replace(windowsReservedRe2, "").replace(windowsTrailingRe2, "").replace(squareBracketOpenRe2, "").replace(squareBracketCloseRe2, "").replace(startsWithDotRe2, "");
}
function convertDateString(dateString, newFormat) {
  const validFormat = "MMMM Do, YYYY";
  const dateObj = (0, import_obsidian13.moment)(dateString, validFormat);
  if (dateObj.format(validFormat) !== dateString) {
    return dateString;
  }
  if (dateObj.isValid()) {
    return dateObj.format(newFormat);
  } else {
    return dateString;
  }
}

// src/formats/roam-json.ts
var roamSpecificMarkup = ["POMO", "word-count", "date", "slider", "encrypt", "TaoOfRoam", "orphans", "count", "character-count", "comment-button", "query", "streak", "attr-table", "mentions", "search", "roam/render", "calc"];
var roamSpecificMarkupRe = new RegExp(`\\{\\{(\\[\\[)?(${roamSpecificMarkup.join("|")})(\\]\\])?.*?\\}\\}(\\})?`, "g");
var regex = /{{pdf:|{{\[\[pdf|{{\[\[audio|{{audio:|{{video:|{{\[\[video/;
var imageRegex = /https:\/\/firebasestorage(.*?)\?alt(.*?)\)/;
var binaryRegex = /https:\/\/firebasestorage(.*?)\?alt(.*?)/;
var blockRefRegex = /(?<=\(\()\b(.*?)\b(?=\)\))/g;
var RoamJSONImporter = class extends FormatImporter {
  constructor() {
    super(...arguments);
    this.downloadAttachments = false;
  }
  init() {
    this.addFileChooserSetting("Roam (.json)", ["json"]);
    this.addOutputLocationSetting("Roam");
    this.userDNPFormat = this.getUserDNPFormat();
    new import_obsidian14.Setting(this.modal.contentEl).setName("Import settings").setHeading();
    new import_obsidian14.Setting(this.modal.contentEl).setName("Download all attachments").setDesc("If enabled, all attachments uploaded to Roam will be downloaded to your attachments folder.").addToggle((toggle) => {
      toggle.setValue(this.downloadAttachments);
      toggle.onChange(async (value) => {
        this.downloadAttachments = value;
      });
    });
  }
  async import(progress) {
    this.progress = progress;
    let { files } = this;
    if (files.length === 0) {
      new import_obsidian14.Notice("Please pick at least one file to import.");
      return;
    }
    let outputFolder = await this.getOutputFolder();
    if (!outputFolder) {
      new import_obsidian14.Notice("Please select a location to export to.");
      return;
    }
    for (let file of files) {
      if (progress.isCancelled()) {
        return;
      }
      const graphName = sanitizeFileName(file.basename);
      const graphFolder = `${outputFolder.path}/${graphName}`;
      const attachmentsFolder = `${outputFolder.path}/${graphName}/Attachments`;
      await this.createFolders(graphFolder);
      await this.createFolders(attachmentsFolder);
      const data = await file.readText();
      const allPages = JSON.parse(data);
      const [blockLocations, toPostProcess] = this.preprocess(allPages);
      const markdownPages = /* @__PURE__ */ new Map();
      for (let index2 in allPages) {
        const pageData = allPages[index2];
        let pageName = convertDateString(sanitizeFileNameKeepPath(pageData.title), this.userDNPFormat).trim();
        if (pageName === "") {
          progress.reportFailed(pageData.uid, "Title is empty");
          console.error("Cannot import data with an empty title", pageData);
          continue;
        }
        const filename = `${graphFolder}/${pageName}.md`;
        const markdownOutput = await this.jsonToMarkdown(graphFolder, attachmentsFolder, pageData);
        markdownPages.set(filename, markdownOutput);
      }
      for (const [_, callingBlock] of toPostProcess.entries()) {
        const callingBlockStringScrubbed = await this.roamMarkupScrubber(graphFolder, attachmentsFolder, callingBlock.blockString, true);
        const newCallingBlockReferences = await this.extractAndProcessBlockReferences(markdownPages, blockLocations, graphFolder, callingBlockStringScrubbed);
        const callingBlockFilePath = `${graphFolder}/${callingBlock.pageName}.md`;
        const callingBlockMarkdown = markdownPages.get(callingBlockFilePath);
        if (callingBlockMarkdown) {
          let lines = callingBlockMarkdown.split("\n");
          let index2 = lines.findIndex((item) => item.contains("* " + callingBlockStringScrubbed));
          if (index2 !== -1) {
            lines[index2] = lines[index2].replace(callingBlockStringScrubbed, newCallingBlockReferences);
          }
          markdownPages.set(callingBlockFilePath, lines.join("\n"));
        }
      }
      const { vault } = this;
      const totalCount = markdownPages.size;
      let index = 1;
      for (const [filename, markdownOutput] of markdownPages.entries()) {
        if (progress.isCancelled()) {
          return;
        }
        try {
          const { parent } = parseFilePath(filename);
          await this.createFolders(parent);
          const existingFile = vault.getAbstractFileByPath(filename);
          if (existingFile) {
            await vault.modify(existingFile, markdownOutput);
          } else {
            await vault.create(filename, markdownOutput);
          }
          progress.reportNoteSuccess(filename);
          progress.reportProgress(index, totalCount);
        } catch (error) {
          console.error("Error saving Markdown to file:", filename, error);
          progress.reportFailed(filename);
        }
        index++;
      }
    }
  }
  getUserDNPFormat() {
    const dailyNotePluginInstance = this.app.internalPlugins.getPluginById("daily-notes").instance;
    if (!dailyNotePluginInstance) {
      console.log('Daily note plugin is not enabled. Roam import defaulting to "YYYY-MM-DD" format.');
      return "YYYY-MM-DD";
    }
    let dailyPageFormat = dailyNotePluginInstance.options.format;
    return dailyPageFormat || "YYYY-MM-DD";
  }
  preprocess(pages) {
    let blockLocations = /* @__PURE__ */ new Map();
    let toPostProcessblockLocations = /* @__PURE__ */ new Map();
    const userDNPFormat = this.userDNPFormat;
    function processBlock(page, block) {
      if (block.uid) {
        const dateObject = new Date(page.uid);
        if (!isNaN(dateObject.getTime())) {
          const newPageTitle = convertDateString(page.title, userDNPFormat);
          page.title = newPageTitle;
        }
        const info = {
          pageName: sanitizeFileNameKeepPath(page.title),
          blockString: block.string
        };
        const blockRefRegex2 = /.*?(\(\(.*?\)\)).*?/g;
        if (blockRefRegex2.test(block.string)) {
          toPostProcessblockLocations.set(block.uid, info);
        }
        blockLocations.set(block.uid, info);
      }
      if (block.children) {
        for (let child of block.children) {
          processBlock(page, child);
        }
      }
    }
    for (let page of pages) {
      if (page.children) {
        for (let block of page.children) {
          processBlock(page, block);
        }
      }
    }
    return [blockLocations, toPostProcessblockLocations];
  }
  async roamMarkupScrubber(graphFolder, attachmentsFolder, blockText, skipDownload = false) {
    blockText = blockText.replace(roamSpecificMarkupRe, "");
    if (blockText.substring(0, 8) == ":hiccup " && blockText.includes(":hr")) {
      return "---";
    }
    blockText = blockText.replace(/\[\[(.*?)\]\]/g, (match, group1) => `[[${convertDateString(sanitizeFileNameKeepPath(group1), this.userDNPFormat)}]]`);
    blockText = blockText.replace(/\[\[(.*\/.*)\]\]/g, (_, group1) => `[[${graphFolder}/${group1}|${group1}]]`);
    blockText = blockText.replace(/\[.+?\]\((\(.+?\)\))\)/g, "$1");
    blockText = blockText.replace(/\[(.+?)\]\(\[\[(.+?)\]\]\)/g, "[[$2|$1]]");
    blockText = blockText.replace(/\[\[>\]\]/g, ">");
    blockText = blockText.replace(/{{TODO}}|{{\[\[TODO\]\]}}/g, "[ ]");
    blockText = blockText.replace(/{{DONE}}|{{\[\[DONE\]\]}}/g, "[x]");
    blockText = blockText.replace("::", ":");
    blockText = blockText.replace(/{{.*?\bvideo\b.*?(\bhttp.*?\byoutu.*?)}}/g, "![]($1)");
    blockText = blockText.replace(/(https?:\/\/twitter\.com\/(?:#!\/)?\w+\/status\/\d+(?:\?[\w=&-]+)?)/g, "![]($1)");
    blockText = blockText.replace(/\_\_(.+?)\_\_/g, "*$1*");
    blockText = blockText.replace(/\^\^(.+?)\^\^/g, "==$1==");
    blockText = blockText.replace(/{{\[{0,2}embed.*?(\(\(.*?\)\)).*?}}/g, "$1");
    blockText = blockText.replace(/{{\[{0,2}embed.*?(\[\[.*?\]\]).*?}}/g, "$1");
    if (this.downloadAttachments && !skipDownload) {
      if (blockText.includes("firebasestorage")) {
        blockText = await this.downloadFirebaseFile(blockText, attachmentsFolder);
      }
    }
    return blockText;
  }
  async jsonToMarkdown(graphFolder, attachmentsFolder, json, indent = "", isChild = false) {
    let markdown = [];
    if ("string" in json && json.string) {
      const prefix = json.heading ? "#".repeat(json.heading) + " " : "";
      const scrubbed = await this.roamMarkupScrubber(graphFolder, attachmentsFolder, json.string);
      markdown.push(`${isChild ? indent + "* " : indent}${prefix}${scrubbed}`);
    }
    if (json.children) {
      for (const child of json.children) {
        markdown.push(await this.jsonToMarkdown(graphFolder, attachmentsFolder, child, indent + "  ", true));
      }
    }
    return markdown.join("\n");
  }
  async modifySourceBlockString(markdownPages, sourceBlock, graphFolder, sourceBlockUID) {
    if (!sourceBlock.blockString.endsWith("^" + sourceBlockUID)) {
      const sourceBlockFilePath = `${graphFolder}/${sourceBlock.pageName}.md`;
      let markdown = markdownPages.get(sourceBlockFilePath);
      if (markdown) {
        let lines = markdown.split("\n");
        let index = lines.findIndex((item) => item.contains("* " + sourceBlock.blockString));
        if (index !== -1) {
          let newSourceBlockString = sourceBlock.blockString + " ^" + sourceBlockUID;
          lines[index] = lines[index].replace(sourceBlock.blockString, newSourceBlockString);
          sourceBlock.blockString = sourceBlock.blockString + " ^" + sourceBlockUID;
        }
        markdownPages.set(sourceBlockFilePath, lines.join("\n"));
      }
    }
  }
  async extractAndProcessBlockReferences(markdownPages, blockLocations, graphFolder, inputString) {
    const blockReferences = inputString.match(blockRefRegex);
    if (!blockReferences) {
      return inputString;
    }
    let processedBlocks = [];
    for (const sourceBlockUID of blockReferences) {
      try {
        const sourceBlock = blockLocations.get(sourceBlockUID);
        if (!sourceBlock) {
          processedBlocks.push(sourceBlockUID);
          continue;
        }
        let strippedSourceBlockString = sourceBlock.blockString.replace(/\[\[|\]\]/g, "");
        let processedBlock = `[[${graphFolder}/${sourceBlock.pageName}#^${sourceBlockUID}|${strippedSourceBlockString}]]`;
        await this.modifySourceBlockString(markdownPages, sourceBlock, graphFolder, sourceBlockUID);
        processedBlocks.push(processedBlock);
      } catch (error) {
        processedBlocks.push(sourceBlockUID);
      }
    }
    let index = 0;
    const processedString = inputString.replace(/\(\(\b.*?\b\)\)/g, () => processedBlocks[index++]);
    return processedString;
  }
  async downloadFirebaseFile(line, attachmentsFolder) {
    const { progress, vault } = this;
    let url2 = "";
    try {
      let link;
      let syntaxLink;
      if (regex.test(line)) {
        link = line.match(/https:\/\/firebasestorage(.*?)\?alt(.*?)\}/);
        syntaxLink = line.match(/{{.*https:\/\/firebasestorage.*?alt=media&.*?(?=\s|$)/);
      } else if (imageRegex.test(line)) {
        link = line.match(imageRegex);
        syntaxLink = line.match(/!\[.*https:\/\/firebasestorage.*?alt=media&.*?(?=\s|$)/);
      } else {
        link = line.match(binaryRegex);
        syntaxLink = line.match(/https:\/\/firebasestorage.*?alt=media&.*?(?=\s|$)/);
      }
      if (link && syntaxLink) {
        const firebaseShort = "https://firebasestorage" + link[1];
        let filename = decodeURIComponent(firebaseShort.split("/").last() || "");
        if (filename) {
          const filenameParts = filename.split("/");
          if (filenameParts.length > 1) {
            filenameParts.splice(-1, 1);
            this.createFolders(`${attachmentsFolder}/${filenameParts.join("/")}`);
          }
        } else {
          const timestamp = Math.floor(Date.now() / 1e3);
          const extMatch = firebaseShort.slice(-5).match(/(.*?)\.(.+)/);
          if (!extMatch) {
            progress.reportSkipped(link[1], "Unexpected file extension");
            return line;
          }
          filename = `${timestamp}.${extMatch[2]}`;
        }
        const newFilePath = `${attachmentsFolder}/${filename}`;
        const existingFile = vault.getAbstractFileByPath(newFilePath);
        if (existingFile) {
          progress.reportSkipped(link[1], "File already exists");
          return line;
        }
        url2 = link[0].slice(0, -1);
        const response = await fetch(url2, {});
        const data = await response.arrayBuffer();
        await vault.createBinary(newFilePath, data);
        progress.reportAttachmentSuccess(url2);
        return line.replace(syntaxLink[0], `![[${newFilePath}]]`);
      }
    } catch (error) {
      console.error(error);
      progress.reportFailed(url2, error);
    }
    return line;
  }
};

// src/formats/notion.ts
var import_obsidian17 = require("obsidian");

// src/formats/notion/clean-duplicates.ts
var import_obsidian15 = require("obsidian");
function cleanDuplicates({
  info,
  vault,
  targetFolderPath,
  parentsInSubfolders
}) {
  const loadedFiles = vault.getAllLoadedFiles();
  const pathDuplicateChecks = /* @__PURE__ */ new Set();
  const titleDuplicateChecks = new Set(
    loadedFiles.map((file) => file.name)
  );
  if (parentsInSubfolders) {
    moveParentsToSubfolders(info);
  }
  cleanDuplicateNotes({
    info,
    pathDuplicateChecks,
    titleDuplicateChecks
  });
  cleanDuplicateAttachments({
    info,
    loadedFiles,
    titleDuplicateChecks,
    targetFolderPath
  });
}
function cleanDuplicateNotes({
  info,
  pathDuplicateChecks,
  titleDuplicateChecks
}) {
  for (let fileInfo of Object.values(info.idsToFileInfo)) {
    let path2 = info.getPathForFile(fileInfo);
    if (pathDuplicateChecks.has(`${path2}${fileInfo.title}`)) {
      let duplicateResolutionIndex = 2;
      fileInfo.title = fileInfo.title + " " + duplicateResolutionIndex;
      while (pathDuplicateChecks.has(`${path2}${fileInfo.title}`)) {
        duplicateResolutionIndex++;
        fileInfo.title = `${fileInfo.title.replace(/ \d+$/, "")} ${duplicateResolutionIndex}`;
      }
    }
    if (titleDuplicateChecks.has(fileInfo.title + ".md")) {
      fileInfo.fullLinkPathNeeded = true;
    }
    pathDuplicateChecks.add(`${path2}${fileInfo.title}`);
    titleDuplicateChecks.add(fileInfo.title + ".md");
  }
}
function moveParentsToSubfolders(info) {
  const notesByLastParent = new Set(
    Object.values(info.idsToFileInfo).map((info2) => info2.parentIds).concat(Object.values(info.pathsToAttachmentInfo).map((info2) => info2.parentIds)).map((parentIds) => parentIds.length > 0 ? parentIds[parentIds.length - 1] : "")
  );
  for (let id of Object.keys(info.idsToFileInfo)) {
    if (notesByLastParent.has(id)) {
      info.idsToFileInfo[id].parentIds.push(id);
    }
  }
}
function cleanDuplicateAttachments({
  info,
  loadedFiles,
  titleDuplicateChecks,
  targetFolderPath
}) {
  var _a;
  const attachmentPaths = new Set(
    loadedFiles.filter((file) => !file.path.endsWith(".md")).map((file) => file.path)
  );
  let attachmentFolderPath = info.attachmentPath;
  let attachmentsInCurrentFolder = /^\.\//.test(attachmentFolderPath);
  let attachmentSubfolder = (_a = attachmentFolderPath.match(/\.\/(.*)/)) == null ? void 0 : _a[1];
  for (let attachmentInfo of Object.values(info.pathsToAttachmentInfo)) {
    if (titleDuplicateChecks.has(attachmentInfo.nameWithExtension)) {
      attachmentInfo.fullLinkPathNeeded = true;
    }
    let parentFolderPath = "";
    if (attachmentsInCurrentFolder) {
      parentFolderPath = (0, import_obsidian15.normalizePath)(
        `${targetFolderPath}${info.getPathForFile(attachmentInfo)}${attachmentSubfolder != null ? attachmentSubfolder : ""}`
      );
    } else {
      parentFolderPath = (0, import_obsidian15.normalizePath)(attachmentFolderPath + "/");
    }
    if (!parentFolderPath.endsWith("/"))
      parentFolderPath += "/";
    if (attachmentPaths.has(parentFolderPath + attachmentInfo.nameWithExtension)) {
      let duplicateResolutionIndex = 2;
      const { basename, extension } = parseFilePath(attachmentInfo.path);
      while (attachmentPaths.has(
        `${parentFolderPath}${basename} ${duplicateResolutionIndex}.${extension}`
      )) {
        duplicateResolutionIndex++;
      }
      attachmentInfo.nameWithExtension = `${basename} ${duplicateResolutionIndex}.${extension}`;
    }
    attachmentInfo.targetParentFolder = parentFolderPath;
    attachmentPaths.add(parentFolderPath + attachmentInfo.nameWithExtension);
    titleDuplicateChecks.add(attachmentInfo.nameWithExtension);
  }
}

// src/formats/notion/convert-to-md.ts
var import_obsidian16 = require("obsidian");

// src/formats/notion/notion-utils.ts
var stripNotionId = (id) => {
  return id.replace(/-/g, "").replace(/[ -]?[a-z0-9]{32}(\.|$)/, "$1");
};
var getNotionId = (id) => {
  var _a;
  return (_a = id.replace(/-/g, "").match(/([a-z0-9]{32})(\?|\.|$)/)) == null ? void 0 : _a[1];
};
var parseParentIds = (filename) => {
  const { parent } = parseFilePath(filename);
  return parent.split("/").map((parentNote) => getNotionId(parentNote)).filter((id) => id);
};
function parseDate(content) {
  if (content.hour() === 0 && content.minute() === 0) {
    return content.format("YYYY-MM-DD");
  } else {
    return content.format("YYYY-MM-DDTHH:mm");
  }
}
function stripParentDirectories(relativeURI) {
  return relativeURI.replace(/^(\.\.\/)+/, "");
}
function escapeHashtags(body) {
  const tagExp = /#[a-z0-9\-]+/gi;
  if (!tagExp.test(body))
    return body;
  const lines = body.split("\n");
  for (let i = 0; i < lines.length; i++) {
    const hashtags = lines[i].match(tagExp);
    if (!hashtags)
      continue;
    let newLine = lines[i];
    for (let hashtag of hashtags) {
      const hashtagInLink = new RegExp(
        `\\[\\[[^\\]]*${hashtag}[^\\]]*\\]\\]|\\[[^\\]]*${hashtag}[^\\]]*\\]\\([^\\)]*\\)|\\[[^\\]]*\\]\\([^\\)]*${hashtag}[^\\)]*\\)|\\\\${hashtag}`
      );
      if (hashtagInLink.test(newLine))
        continue;
      newLine = newLine.replace(hashtag, "\\" + hashtag);
    }
    lines[i] = newLine;
  }
  body = lines.join("\n");
  return body;
}
function hoistChildren(el) {
  el.replaceWith(...Array.from(el.childNodes));
}

// src/formats/notion/convert-to-md.ts
async function readToMarkdown(info, file) {
  var _a;
  const text = await file.readText();
  const dom = parseHTML(text);
  const body = dom.find("div[class=page-body]");
  const notionLinks = getNotionLinks(info, body);
  convertLinksToObsidian(info, notionLinks, true);
  let frontMatter = {};
  const rawProperties = dom.find("table[class=properties] > tbody");
  if (rawProperties) {
    const propertyLinks = getNotionLinks(info, rawProperties);
    convertLinksToObsidian(info, propertyLinks, false);
    convertHtmlLinksToURLs(rawProperties);
    for (let row of Array.from(rawProperties.rows)) {
      const property = parseProperty(row);
      if (property) {
        frontMatter[property.title] = property.content;
      }
    }
  }
  replaceNestedTags(body, "strong");
  replaceNestedTags(body, "em");
  fixNotionEmbeds(body);
  stripLinkFormatting(body);
  encodeNewlinesToBr(body);
  fixNotionDates(body);
  fixEquations(body);
  replaceElementsWithChildren(body, "div.indented");
  replaceElementsWithChildren(body, "details");
  fixToggleHeadings(body);
  fixNotionLists(body, "ul");
  fixNotionLists(body, "ol");
  addCheckboxes(body);
  replaceTableOfContents(body);
  formatDatabases(body);
  let htmlString = body.innerHTML;
  splitBrsInFormatting(htmlString, "strong");
  splitBrsInFormatting(htmlString, "em");
  let markdownBody = (0, import_obsidian16.htmlToMarkdown)(htmlString);
  markdownBody = escapeHashtags(markdownBody);
  markdownBody = fixDoubleBackslash(markdownBody);
  const description = (_a = dom.find("p[class*=page-description]")) == null ? void 0 : _a.textContent;
  if (description)
    markdownBody = description + "\n\n" + markdownBody;
  return serializeFrontMatter(frontMatter) + markdownBody;
}
var typesMap = {
  checkbox: ["checkbox"],
  date: ["created_time", "last_edited_time", "date"],
  list: ["file", "multi_select", "relation"],
  number: ["number", "auto_increment_id"],
  text: [
    "email",
    "person",
    "phone_number",
    "text",
    "url",
    "status",
    "select",
    "formula",
    "rollup",
    "last_edited_by",
    "created_by"
  ]
};
function parseProperty(property) {
  var _a, _b, _c, _d, _e, _f;
  const notionType = (_a = property.className.match(/property-row-(.*)/)) == null ? void 0 : _a[1];
  if (!notionType) {
    throw new Error("property type not found for: " + property);
  }
  const title = (0, import_obsidian16.htmlToMarkdown)((_b = property.cells[0].textContent) != null ? _b : "");
  const body = property.cells[1];
  let type = Object.keys(typesMap).find(
    (type2) => typesMap[type2].includes(notionType)
  );
  if (!type)
    throw new Error("type not found for: " + body);
  let content = "";
  switch (type) {
    case "checkbox":
      content = body.innerHTML.includes("checkbox-on");
      break;
    case "number":
      content = Number(body.textContent);
      if (isNaN(content))
        return;
      break;
    case "date":
      fixNotionDates(body);
      const dates = body.getElementsByTagName("time");
      if (dates.length === 0) {
        content = "";
      } else if (dates.length === 1) {
        content = parseDate((0, import_obsidian16.moment)((_c = dates.item(0)) == null ? void 0 : _c.textContent));
      } else {
        const dateList = [];
        for (let i = 0; i < dates.length; i++) {
          dateList.push(
            parseDate((0, import_obsidian16.moment)((_d = dates.item(i)) == null ? void 0 : _d.textContent))
          );
        }
        content = dateList.join(" - ");
      }
      if (content.length === 0)
        return;
      break;
    case "list":
      const children = body.children;
      const childList = [];
      for (let i = 0; i < children.length; i++) {
        const itemContent = (_e = children.item(i)) == null ? void 0 : _e.textContent;
        if (!itemContent)
          continue;
        childList.push(itemContent);
      }
      content = childList;
      if (content.length === 0)
        return;
      break;
    case "text":
      content = (_f = body.textContent) != null ? _f : "";
      if (content.length === 0)
        return;
      break;
  }
  return {
    title,
    content
  };
}
function getNotionLinks(info, body) {
  var _a;
  const links = [];
  for (const a of body.findAll("a")) {
    const decodedURI = stripParentDirectories(
      decodeURI((_a = a.getAttribute("href")) != null ? _a : "")
    );
    const id = getNotionId(decodedURI);
    const attachmentPath = Object.keys(info.pathsToAttachmentInfo).find((filename) => filename.includes(decodedURI));
    if (id && decodedURI.endsWith(".html")) {
      links.push({ type: "relation", a, id });
    } else if (attachmentPath) {
      links.push({
        type: "attachment",
        a,
        path: attachmentPath
      });
    }
  }
  return links;
}
function fixDoubleBackslash(markdownBody) {
  const slashSearch = /\[\[[^\]]*(\\\\)\|[^\]]*\]\]/;
  const doubleSlashes = markdownBody.match(new RegExp(slashSearch, "g"));
  doubleSlashes == null ? void 0 : doubleSlashes.forEach((slash) => {
    markdownBody = markdownBody.replace(
      slash,
      slash.replace(/\\\\\|/g, "\\|")
    );
  });
  return markdownBody;
}
function fixEquations(body) {
  const katexEls = body.findAll(".katex");
  for (const katex of katexEls) {
    const annotation = katex.find("annotation");
    if (!annotation)
      continue;
    annotation.setText(`$${annotation.textContent}$`);
    katex.replaceWith(annotation);
  }
}
function fixNotionEmbeds(body) {
  var _a, _b;
  for (let embed of body.findAll("a.bookmark.source")) {
    const link = embed.getAttribute("href");
    const title = (_a = embed.find("div.bookmark-title")) == null ? void 0 : _a.textContent;
    const description = (_b = embed.find("div.bookmark-description")) == null ? void 0 : _b.textContent;
    const calloutBlock = `> [!info] ${title}
> ${description}
> [${link}](${link})
`;
    embed.replaceWith(calloutBlock);
  }
}
function formatDatabases(body) {
  var _a, _b, _c;
  for (const user of body.findAll("span[class=user]")) {
    user.innerText = (_a = user.textContent) != null ? _a : "";
  }
  for (const checkbox of body.findAll("td div[class*=checkbox]")) {
    const newCheckbox = createSpan();
    newCheckbox.setText(checkbox.hasClass("checkbox-on") ? "X" : "");
    checkbox.replaceWith(newCheckbox);
  }
  for (const select of body.findAll("table span[class*=selected-value]")) {
    const lastChild = (_b = select.parentElement) == null ? void 0 : _b.lastElementChild;
    if (lastChild === select)
      continue;
    select.setText(select.textContent + ", ");
  }
  for (const a of body.findAll("a[href]")) {
    if (!/^(https?:\/\/|www\.)/.test(a.href)) {
      const strippedURL = createSpan();
      strippedURL.setText((_c = a.textContent) != null ? _c : "");
      a.replaceWith(strippedURL);
    }
  }
}
function replaceNestedTags(body, tag) {
  for (const el of body.findAll(tag)) {
    if (!el.parentElement || el.parentElement.tagName === tag.toUpperCase()) {
      continue;
    }
    let firstNested = el.find(tag);
    while (firstNested) {
      hoistChildren(firstNested);
      firstNested = el.find(tag);
    }
  }
}
function splitBrsInFormatting(htmlString, tag) {
  const tags = htmlString.match(new RegExp(`<${tag}>(.|
)*</${tag}>`));
  if (!tags)
    return;
  for (let tag2 of tags.filter((tag3) => tag3.contains("<br />"))) {
    htmlString = htmlString.replace(
      tag2,
      tag2.split("<br />").join(`</${tag2}><br /><${tag2}>`)
    );
  }
}
function replaceTableOfContents(body) {
  var _a;
  const tocLinks = body.findAll("a[href*=\\#]");
  for (const link of tocLinks) {
    if ((_a = link.getAttribute("href")) == null ? void 0 : _a.startsWith("#")) {
      link.setAttribute("href", "#" + link.textContent);
    }
  }
}
function encodeNewlinesToBr(body) {
  body.innerHTML = body.innerHTML.replace(/\n/g, "<br />");
  for (const block of body.findAll("code")) {
    block.innerHTML = block.innerHTML.replace(/<br \/>/g, "\n");
  }
}
function stripLinkFormatting(body) {
  var _a;
  for (const link of body.findAll("link")) {
    link.innerText = (_a = link.textContent) != null ? _a : "";
  }
}
function fixNotionDates(body) {
  var _a, _b;
  for (const time of body.findAll("time")) {
    time.textContent = (_b = (_a = time.textContent) == null ? void 0 : _a.replace(/@/g, "")) != null ? _b : "";
  }
}
var fontSizeToHeadings = {
  "1.875em": "h1",
  "1.5em": "h2",
  "1.25em": "h3"
};
function fixToggleHeadings(body) {
  var _a;
  const toggleHeadings = body.findAll("summary");
  for (const heading of toggleHeadings) {
    const style = heading.getAttribute("style");
    if (!style)
      continue;
    for (const key of Object.keys(fontSizeToHeadings)) {
      if (style.includes(key)) {
        heading.replaceWith(createEl(fontSizeToHeadings[key], { text: (_a = heading.textContent) != null ? _a : "" }));
        break;
      }
    }
  }
}
function replaceElementsWithChildren(body, selector) {
  let els = body.findAll(selector);
  for (const el of els) {
    hoistChildren(el);
  }
}
function fixNotionLists(body, tagName) {
  for (const htmlList of body.findAll(tagName)) {
    const htmlLists = [];
    const listItems = [];
    let nextAdjacentList = htmlList;
    while (nextAdjacentList.tagName === tagName.toUpperCase()) {
      htmlLists.push(nextAdjacentList);
      for (let i = 0; i < nextAdjacentList.children.length; i++) {
        listItems.push(nextAdjacentList.children[i]);
      }
      if (!nextAdjacentList.nextElementSibling || nextAdjacentList.getAttribute("class") !== nextAdjacentList.nextElementSibling.getAttribute("class"))
        break;
      nextAdjacentList = nextAdjacentList.nextElementSibling;
    }
    const joinedList = body.createEl(tagName);
    for (const li of listItems) {
      joinedList.appendChild(li);
    }
    htmlLists[0].replaceWith(joinedList);
    htmlLists.slice(1).forEach((htmlList2) => htmlList2.remove());
  }
}
function addCheckboxes(body) {
  for (let checkboxEl of body.findAll(".checkbox.checkbox-on")) {
    checkboxEl.replaceWith("[x] ");
  }
  for (let checkboxEl of body.findAll(".checkbox.checkbox-off")) {
    checkboxEl.replaceWith("[ ] ");
  }
}
function convertHtmlLinksToURLs(content) {
  var _a;
  const links = content.findAll("a");
  if (links.length === 0)
    return content;
  for (const link of links) {
    const span = createSpan();
    span.setText((_a = link.getAttribute("href")) != null ? _a : "");
    link.replaceWith(span);
  }
}
function convertLinksToObsidian(info, notionLinks, embedAttachments) {
  var _a;
  for (let link of notionLinks) {
    let obsidianLink = createSpan();
    let linkContent;
    switch (link.type) {
      case "relation":
        const linkInfo = info.idsToFileInfo[link.id];
        if (!linkInfo) {
          console.warn("missing relation data for id: " + link.id);
          const { basename } = parseFilePath(
            decodeURI((_a = link.a.getAttribute("href")) != null ? _a : "")
          );
          linkContent = `[[${stripNotionId(basename)}]]`;
        } else {
          const isInTable = link.a.closest("table");
          linkContent = `[[${linkInfo.fullLinkPathNeeded ? `${info.getPathForFile(linkInfo)}${linkInfo.title}${isInTable ? "\\" : ""}|${linkInfo.title}` : linkInfo.title}]]`;
        }
        break;
      case "attachment":
        const attachmentInfo = info.pathsToAttachmentInfo[link.path];
        if (!attachmentInfo) {
          console.warn("missing attachment data for: " + link.path);
          continue;
        }
        linkContent = `${embedAttachments ? "!" : ""}[[${attachmentInfo.fullLinkPathNeeded ? attachmentInfo.targetParentFolder + attachmentInfo.nameWithExtension + "|" + attachmentInfo.nameWithExtension : attachmentInfo.nameWithExtension}]]`;
        break;
    }
    obsidianLink.setText(linkContent);
    link.a.replaceWith(obsidianLink);
  }
}

// src/formats/notion/notion-types.ts
var NotionResolverInfo = class {
  constructor(attachmentPath) {
    this.idsToFileInfo = {};
    this.pathsToAttachmentInfo = {};
    this.attachmentPath = attachmentPath;
  }
  getPathForFile(fileInfo) {
    let { idsToFileInfo } = this;
    const pathNames = fileInfo.path.split("/");
    return fileInfo.parentIds.map(
      (parentId) => {
        var _a, _b, _c;
        return (_c = (_a = idsToFileInfo[parentId]) == null ? void 0 : _a.title) != null ? _c : (_b = pathNames.find((pathSegment) => pathSegment.contains(parentId))) == null ? void 0 : _b.replace(` ${parentId}`, "");
      }
    ).filter((parentId) => parentId).map((folder) => folder.replace(/[\. ]+$/, "")).join("/") + "/";
  }
};

// src/formats/notion/parse-info.ts
async function parseFileInfo(info, file) {
  var _a, _b, _c;
  let { filepath } = file;
  if (file.extension === "html") {
    const text = await file.readText();
    const dom = parseHTML(text);
    const id = getNotionId((_b = (_a = dom.find("article")) == null ? void 0 : _a.getAttr("id")) != null ? _b : "");
    if (!id)
      throw new Error("no id found for: " + filepath);
    const parsedTitle = ((_c = dom.find("title")) == null ? void 0 : _c.textContent) || "Untitled";
    let title = sanitizeFileName(
      parsedTitle.replace(/\n/g, " ").replace(/:/g, "-").replace(/#/g, "").trim()
    );
    while (title.length > 200) {
      const wordList = title.split(" ");
      title = wordList.slice(0, wordList.length - 1).join(" ") + "...";
    }
    info.idsToFileInfo[id] = {
      path: filepath,
      parentIds: parseParentIds(filepath),
      title,
      fullLinkPathNeeded: false
    };
  } else {
    info.pathsToAttachmentInfo[filepath] = {
      path: filepath,
      parentIds: parseParentIds(filepath),
      nameWithExtension: sanitizeFileName(file.name),
      targetParentFolder: "",
      fullLinkPathNeeded: false
    };
  }
}

// src/formats/notion.ts
var NotionImporter = class extends FormatImporter {
  init() {
    this.parentsInSubfolders = true;
    this.addFileChooserSetting("Exported Notion", ["zip"]);
    this.addOutputLocationSetting("Notion");
    new import_obsidian17.Setting(this.modal.contentEl).setName("Save parent pages in subfolders").setDesc("Places the parent database pages in the same folder as the nested content.").addToggle((toggle) => toggle.setValue(this.parentsInSubfolders).onChange((value) => this.parentsInSubfolders = value));
  }
  async import(ctx) {
    var _a;
    const { vault, parentsInSubfolders, files } = this;
    if (files.length === 0) {
      new import_obsidian17.Notice("Please pick at least one file to import.");
      return;
    }
    const folder = await this.getOutputFolder();
    if (!folder) {
      new import_obsidian17.Notice("Please select a location to export to.");
      return;
    }
    let targetFolderPath = folder.path;
    targetFolderPath = (0, import_obsidian17.normalizePath)(targetFolderPath);
    if (!(targetFolderPath == null ? void 0 : targetFolderPath.endsWith("/")))
      targetFolderPath += "/";
    const info = new NotionResolverInfo((_a = vault.getConfig("attachmentFolderPath")) != null ? _a : "");
    ctx.status("Looking for files to import");
    let total = 0;
    await processZips(ctx, files, async (file) => {
      try {
        await parseFileInfo(info, file);
        total = Object.keys(info.idsToFileInfo).length + Object.keys(info.pathsToAttachmentInfo).length;
        ctx.reportProgress(0, total);
      } catch (e2) {
        ctx.reportSkipped(file.fullpath);
      }
    });
    if (ctx.isCancelled())
      return;
    ctx.status("Resolving links and de-duplicating files");
    cleanDuplicates({
      vault,
      info,
      targetFolderPath,
      parentsInSubfolders
    });
    const flatFolderPaths = /* @__PURE__ */ new Set([targetFolderPath]);
    const allFolderPaths = Object.values(info.idsToFileInfo).map((fileInfo) => targetFolderPath + info.getPathForFile(fileInfo)).concat(Object.values(info.pathsToAttachmentInfo).map(
      (attachmentInfo) => attachmentInfo.targetParentFolder
    ));
    for (let folderPath of allFolderPaths) {
      flatFolderPaths.add(folderPath);
    }
    for (let path2 of flatFolderPaths) {
      if (ctx.isCancelled())
        return;
      await this.createFolders(path2);
    }
    let current = 0;
    ctx.status("Starting import");
    await processZips(ctx, files, async (file) => {
      current++;
      ctx.reportProgress(current, total);
      try {
        if (file.extension === "html") {
          const id = getNotionId(file.name);
          if (!id) {
            throw new Error("ids not found for " + file.filepath);
          }
          const fileInfo = info.idsToFileInfo[id];
          if (!fileInfo) {
            throw new Error("file info not found for " + file.filepath);
          }
          ctx.status(`Importing note ${fileInfo.title}`);
          const markdownBody = await readToMarkdown(info, file);
          const path2 = `${targetFolderPath}${info.getPathForFile(fileInfo)}${fileInfo.title}.md`;
          await vault.create(path2, markdownBody);
          ctx.reportNoteSuccess(file.fullpath);
        } else {
          const attachmentInfo = info.pathsToAttachmentInfo[file.filepath];
          if (!attachmentInfo) {
            throw new Error("attachment info not found for " + file.filepath);
          }
          ctx.status(`Importing attachment ${file.name}`);
          const data = await file.read();
          await vault.createBinary(`${attachmentInfo.targetParentFolder}${attachmentInfo.nameWithExtension}`, data);
          ctx.reportAttachmentSuccess(file.fullpath);
        }
      } catch (e2) {
        ctx.reportFailed(file.fullpath, e2);
      }
    });
  }
};
async function processZips(ctx, files, callback) {
  for (let zipFile of files) {
    if (ctx.isCancelled())
      return;
    try {
      await readZip(zipFile, async (zip, entries) => {
        for (let entry of entries) {
          if (ctx.isCancelled())
            return;
          if (entry.extension === "csv" && getNotionId(entry.name))
            continue;
          if (entry.name === "index.html")
            continue;
          if (entry.extension === "zip" && entry.parent === "") {
            try {
              await processZips(ctx, [entry], callback);
            } catch (e2) {
              ctx.reportFailed(entry.fullpath);
            }
          } else {
            await callback(entry);
          }
        }
      });
    } catch (e2) {
      ctx.reportFailed(zipFile.fullpath);
    }
  }
}

// src/formats/onenote.ts
var import_obsidian18 = require("obsidian");
var GRAPH_CLIENT_ID = "66553851-08fa-44f2-8bb1-1436f121a73d";
var GRAPH_SCOPES = ["user.read", "notes.read"];
var ATTACHMENT_EXTS2 = ["png", "webp", "jpg", "jpeg", "gif", "bmp", "svg", "mpg", "m4a", "webm", "wav", "ogv", "3gp", "mov", "mp4", "mkv", "pdf"];
var OneNoteImporter = class extends FormatImporter {
  constructor() {
    super(...arguments);
    this.useDefaultAttachmentFolder = true;
    this.importIncompatibleAttachments = false;
    // In the future, enabling this option will only import InkML files.
    // It would be useful for existing OneNote imports or users whose notes are mainly drawings.
    this.importDrawingsOnly = false;
    this.attachmentQueue = [];
    this.selectedSections = [];
    this.graphData = {
      state: genUid(32),
      accessToken: ""
    };
  }
  init() {
    this.addOutputLocationSetting("OneNote");
    new import_obsidian18.Setting(this.modal.contentEl).setName("Use the default attachment folder").setDesc("If disabled, attachments will be stored in the export folder in the OneNote Attachments folder.").addToggle(
      (toggle) => toggle.setValue(true).onChange((value) => this.useDefaultAttachmentFolder = value)
    );
    new import_obsidian18.Setting(this.modal.contentEl).setName("Import incompatible attachments").setDesc("Imports incompatible attachments which cannot be embedded in Obsidian, such as .exe files.").addToggle(
      (toggle) => toggle.setValue(false).onChange((value) => this.importIncompatibleAttachments = value)
    );
    this.microsoftAccountSetting = new import_obsidian18.Setting(this.modal.contentEl).setName("Sign in with your Microsoft account").setDesc("You need to sign in to import your OneNote data.").addButton(
      (button) => button.setCta().setButtonText("Sign in").onClick(() => {
        this.registerAuthCallback(this.authenticateUser.bind(this));
        const requestBody = new URLSearchParams({
          client_id: GRAPH_CLIENT_ID,
          scope: GRAPH_SCOPES.join(" "),
          response_type: "code",
          redirect_uri: AUTH_REDIRECT_URI,
          response_mode: "query",
          state: this.graphData.state
        });
        window.open(`https://login.microsoftonline.com/common/oauth2/v2.0/authorize?${requestBody.toString()}`);
      })
    );
    this.contentArea = this.modal.contentEl.createEl("div");
  }
  async authenticateUser(protocolData) {
    try {
      if (protocolData["state"] !== this.graphData.state) {
        throw new Error(`An incorrect state was returned.
Expected state: ${this.graphData.state}
Returned state: ${protocolData["state"]}`);
      }
      const requestBody = new URLSearchParams({
        client_id: GRAPH_CLIENT_ID,
        scope: GRAPH_SCOPES.join(" "),
        code: protocolData["code"],
        redirect_uri: AUTH_REDIRECT_URI,
        grant_type: "authorization_code"
      });
      const tokenResponse = await (0, import_obsidian18.requestUrl)({
        method: "POST",
        url: "https://login.microsoftonline.com/common/oauth2/v2.0/token",
        contentType: "application/x-www-form-urlencoded",
        body: requestBody.toString()
      }).json;
      if (!tokenResponse.access_token) {
        throw new Error(`Unexpected data was returned instead of an access token. Error details: ${tokenResponse}`);
      }
      this.graphData.accessToken = tokenResponse.access_token;
      const userData = await this.fetchResource("https://graph.microsoft.com/v1.0/me", "json");
      this.microsoftAccountSetting.setDesc(
        `Signed in as ${userData.displayName} (${userData.mail}). If that's not the correct account, sign in again.`
      );
      this.showSectionPickerUI();
    } catch (e2) {
      console.error("An error occurred while we were trying to sign you in. Error details: ", e2);
      this.modal.contentEl.createEl("div", { text: "An error occurred while trying to sign you in." }).createEl("details", { text: e2 }).createEl("summary", { text: "Click here to show error details" });
    }
  }
  async showSectionPickerUI() {
    const sectionsUrl = "https://graph.microsoft.com/v1.0/me/onenote/notebooks?$expand=sections($select=id,displayName)&$select=id,displayName&$orderby=createdDateTime";
    const notebooks = (await this.fetchResource(sectionsUrl, "json")).value;
    this.contentArea.empty();
    this.contentArea.createEl("h4", {
      text: "Choose data to import"
    });
    for (const notebook of notebooks) {
      this.contentArea.createEl("strong", {
        text: notebook.displayName
      });
      let sections = notebook.sections;
      let sectionGroups = notebook.sectionGroups;
      if (sections)
        this.createSectionList(sections);
      for (const sectionGroup of sectionGroups || []) {
        this.contentArea.createEl("h6", {
          text: sectionGroup.displayName
        });
        this.createSectionList(sectionGroup.sections);
      }
    }
  }
  createSectionList(sections) {
    const list = this.contentArea.createEl("ul", {
      attr: {
        style: "padding-inline-start: 1em;"
      }
    });
    for (const section of sections) {
      const listElement = list.createEl("li", {
        cls: "task-list-item"
      });
      let label = listElement.createEl("label");
      let checkbox = label.createEl("input");
      checkbox.type = "checkbox";
      checkbox.checked = true;
      label.appendChild(document.createTextNode(section.displayName));
      label.createEl("br");
      checkbox.addEventListener("change", () => {
        if (checkbox.checked)
          this.selectedSections.push(section);
        else {
          const index = this.selectedSections.findIndex((sec) => sec.id === section.id);
          if (index !== -1) {
            this.selectedSections.splice(index, 1);
          }
        }
      });
    }
  }
  async import(progress) {
    let outputFolder = await this.getOutputFolder();
    let remainingSections = this.selectedSections.length;
    if (!outputFolder) {
      new import_obsidian18.Notice("Please select a location to export to.");
      return;
    }
    progress.status("Starting OneNote import");
    for (let section of this.selectedSections) {
      progress.reportProgress(0, remainingSections);
      remainingSections--;
      let pageCount = 0;
      let sectionFolder = await this.createFolders(outputFolder.path + "/" + section.displayName);
      const pagesUrl = `https://graph.microsoft.com/v1.0/me/onenote/sections/${section.id}/pages?$select=id,title,createdDateTime,lastModifiedDateTime`;
      let pages = (await this.fetchResource(pagesUrl, "json")).value;
      progress.reportProgress(0, pages.length);
      for (let i = 0; i < pages.length; i++) {
        const page = pages[i];
        try {
          pageCount++;
          progress.status(`Importing note ${page.title || "Untitled"}`);
          if (i !== 0 && i % 50 === 0) {
            await new Promise((resolve) => setTimeout(resolve, 5e3));
          }
          this.processFile(
            progress,
            sectionFolder,
            outputFolder,
            await this.fetchResource(`https://graph.microsoft.com/v1.0/me/onenote/pages/${page.id}/content?includeInkML=true`, "text"),
            page
          );
          progress.reportProgress(pageCount, pages.length);
        } catch (e2) {
          progress.reportFailed(page.title || "Untitled note", e2.toString());
        }
      }
    }
  }
  async processFile(progress, sectionFolder, outputFolder, content, page) {
    try {
      const splitContent = this.convertFormat(content);
      if (this.importDrawingsOnly) {
      } else {
        let parsedPage = this.getAllAttachments(splitContent.html);
        parsedPage = this.styledElementToHTML(parsedPage);
        parsedPage = this.convertTags(parsedPage);
        parsedPage = this.convertInternalLinks(parsedPage);
        parsedPage = this.convertDrawings(parsedPage);
        let mdContent = (0, import_obsidian18.htmlToMarkdown)(parsedPage).trim();
        const fileRef = await this.saveAsMarkdownFile(sectionFolder, page.title, mdContent);
        await this.fetchAttachmentQueue(progress, fileRef, outputFolder);
        const writeOptions = {
          ctime: (page == null ? void 0 : page.lastModifiedDateTime) ? Date.parse(page.lastModifiedDateTime.toString()) : (page == null ? void 0 : page.createdDateTime) ? Date.parse(page.createdDateTime.toString()) : Date.now(),
          mtime: (page == null ? void 0 : page.lastModifiedDateTime) ? Date.parse(page.lastModifiedDateTime.toString()) : (page == null ? void 0 : page.createdDateTime) ? Date.parse(page.createdDateTime.toString()) : Date.now()
        };
        await this.vault.append(fileRef, "", writeOptions);
        progress.reportNoteSuccess(page.title);
      }
    } catch (e2) {
      progress.reportFailed(page.title || "Untitled note", e2);
    }
  }
  // OneNote returns page data and inking data in one file, so we need to split them
  convertFormat(input) {
    const output = { html: "", inkml: "" };
    const boundary = input.split("\n", 1)[0];
    input.slice(0, -2);
    const parts = input.split(boundary);
    parts.shift();
    if (parts.length === 2) {
      for (let part of parts) {
        let contentTypeLine = part.split("\n").find((line) => line.includes("Content-Type"));
        let contentType = contentTypeLine.split(";")[0].split(":")[1].trim();
        let value = part.split("\n").slice(2).join("\n").trim();
        if (contentType === "text/html")
          output.html = value;
        else if (contentType === "application/inkml+xml")
          output.inkml = value;
      }
    } else {
      throw new Error("The input string is incorrect and may be missing data. Inputted string: " + input);
    }
    return output;
  }
  convertTags(pageElement) {
    var _a, _b;
    const tagElements = Array.from(pageElement.querySelectorAll("[data-tag]"));
    for (const element of tagElements) {
      if ((_a = element.getAttribute("data-tag")) == null ? void 0 : _a.contains("to-do")) {
        const isChecked = element.getAttribute("data-tag") === "to-do:completed";
        const check = isChecked ? "[x]" : "[ ]";
        element.innerHTML = `- ${check} ${element.innerHTML}`;
      } else {
        const tags = (_b = element.getAttribute("data-tag")) == null ? void 0 : _b.split(",");
        tags == null ? void 0 : tags.forEach((tag) => {
          element.innerHTML = element.innerHTML + ` #${tag.replace(":", "-")} `;
        });
      }
    }
    return pageElement;
  }
  // TODO: Dirty working hack, but do this the correct way using this.app.fileManager.generateMarkdownLink
  convertInternalLinks(pageElement) {
    const links = pageElement.findAll("a");
    for (const link of links) {
      if (link.href.startsWith("onenote:")) {
        const startIdx = link.href.indexOf("#") + 1;
        const endIdx = link.href.indexOf("&", startIdx);
        link.href = link.href.slice(startIdx, endIdx);
      }
    }
    return pageElement;
  }
  // This function gets all attachments and adds them to the queue, as well as adds embedding syntax for supported file formats
  getAllAttachments(pageHTML) {
    var _a, _b, _c;
    const regex2 = /<object([^>]*)\/>/g;
    const pageElement = parseHTML(pageHTML.replace(regex2, "<object$1></object>"));
    const objects = pageElement.findAll("object");
    const images = pageElement.findAll("img");
    const videos = pageElement.findAll("iframe");
    for (const object of objects) {
      let split = object.getAttribute("data-attachment").split(".");
      const extension = split[split.length - 1];
      if (!ATTACHMENT_EXTS2.contains(extension) && !this.importIncompatibleAttachments) {
        continue;
      } else {
        this.attachmentQueue.push({
          name: object.getAttribute("data-attachment"),
          contentLocation: object.getAttribute("data")
        });
        const markdownLink = document.createElement("p");
        markdownLink.innerText = `![[${object.getAttribute("data-attachment")}]]`;
        (_a = object.parentNode) == null ? void 0 : _a.replaceChild(markdownLink, object);
      }
    }
    for (const image of images) {
      let split = image.getAttribute("data-fullres-src-type").split("/");
      const extension = split[1];
      const currentDate = (0, import_obsidian18.moment)().format("YYYYMMDDHHmmss");
      const fileName = `Exported image ${currentDate}.${extension}`;
      this.attachmentQueue.push({
        name: fileName,
        contentLocation: image.getAttribute("data-fullres-src")
      });
      image.src = encodeURIComponent(fileName);
      if (!image.alt)
        image.alt = "Exported image";
    }
    for (const video of videos) {
      if (video.src.contains("youtube.com") || video.src.contains("youtu.be")) {
        const embedNode = document.createTextNode(`![Embedded YouTube video](${video.src})`);
        (_b = video.parentNode) == null ? void 0 : _b.replaceChild(embedNode, video);
      } else {
        const linkNode = document.createElement("a");
        linkNode.href = video.src;
        (_c = video.parentNode) == null ? void 0 : _c.replaceChild(linkNode, video);
      }
    }
    return pageElement;
  }
  // Downloads attachments from the attachmentQueue once the file has been created.
  async fetchAttachmentQueue(progress, currentFile, outputFolder) {
    if (this.attachmentQueue.length >= 1) {
      let attachmentPath = outputFolder.path + "/OneNote Attachments";
      if (this.useDefaultAttachmentFolder)
        attachmentPath = await this.app.vault.getAvailablePathForAttachments(currentFile.basename, currentFile.extension, currentFile);
      try {
        this.vault.createFolder(attachmentPath);
      } catch (e2) {
      }
      for (const attachment of this.attachmentQueue) {
        try {
          const data = await this.fetchResource(attachment.contentLocation, "file");
          await this.app.vault.createBinary(attachmentPath + "/" + attachment.name, data);
          progress.reportAttachmentSuccess(attachment.name);
        } catch (e2) {
          progress.reportFailed(attachment.name, e2);
        }
      }
      this.attachmentQueue = [];
    } else {
    }
  }
  // Convert OneNote styled elements to valid HTML for proper htmlToMarkdown conversion
  styledElementToHTML(pageElement) {
    const styledElements = pageElement.querySelectorAll("[style]");
    const cites = pageElement.findAll("cite");
    cites.forEach((cite) => cite.innerHTML = "> " + cite.innerHTML + "<br>");
    const styleMap = {
      "font-weight:bold": "b",
      "font-style:italic": "i",
      "text-decoration:underline": "u",
      "text-decoration:line-through": "s",
      "background-color": "mark",
      "font-family:Consolas": "pre"
    };
    styledElements.forEach((element) => {
      const style = element.getAttribute("style") || "";
      const matchingStyle = Object.keys(styleMap).find((key) => style.includes(key));
      if (matchingStyle) {
        const newElementTag = styleMap[matchingStyle];
        const newElement = document.createElement(newElementTag);
        if (newElementTag === "pre") {
          const code = newElement.createEl("code");
          code.textContent = element.textContent;
        } else
          newElement.innerHTML = element.innerHTML;
        element.replaceWith(newElement);
      }
    });
    return pageElement;
  }
  convertDrawings(element) {
    var _a;
    const walker = document.createTreeWalker(element, NodeFilter.SHOW_COMMENT);
    let hasDrawings = false;
    while (walker.nextNode()) {
      const commentNode = walker.currentNode;
      if (((_a = commentNode.nodeValue) == null ? void 0 : _a.trim()) === "InkNode is not supported")
        hasDrawings = true;
    }
    if (hasDrawings) {
      const textNode = document.createTextNode("> [!caution] This page contained a drawing which was not converted.");
      element.insertBefore(textNode, element.firstChild);
    } else {
      for (let i = 0; i < element.children.length; i++) {
        const child = element.children[i];
        if (child instanceof HTMLElement) {
          this.convertDrawings(child);
        }
      }
    }
    return element;
  }
  async fetchResource(url2, returnType = "json") {
    try {
      let response = await fetch(url2, { headers: { Authorization: `Bearer ${this.graphData.accessToken}` } });
      let responseBody;
      switch (returnType) {
        case "text":
          responseBody = await response.text();
          break;
        case "file":
          responseBody = await response.arrayBuffer();
          break;
        default:
          responseBody = await response.json();
          if ("@odata.nextLink" in responseBody) {
            responseBody.value.push(...(await this.fetchResource(responseBody["@odata.nextLink"], "json")).value);
          }
          break;
      }
      return responseBody;
    } catch (e2) {
      console.error(`An error occurred while trying to fetch '${url2}'. Error details: `, e2);
      throw e2;
    }
  }
};

// src/main.ts
var AUTH_REDIRECT_URI = "obsidian://importer-auth/";
var ImportContext2 = class {
  constructor(el) {
    this.notes = 0;
    this.attachments = 0;
    this.skipped = [];
    this.failed = [];
    this.maxFileNameLength = 100;
    this.cancelled = false;
    this.el = el;
    el.empty();
    this.statusEl = el.createDiv("importer-status");
    this.progressBarEl = el.createDiv("importer-progress-bar", (el2) => {
      this.progressBarInnerEl = el2.createDiv("importer-progress-bar-inner");
    });
    el.createDiv("importer-stats-container", (el2) => {
      el2.createDiv("importer-stat mod-imported", (el3) => {
        this.importedCountEl = el3.createDiv({ cls: "importer-stat-count", text: "0" });
        el3.createDiv({ cls: "importer-stat-name", text: "imported" });
      });
      el2.createDiv("importer-stat mod-attachments", (el3) => {
        this.attachmentCountEl = el3.createDiv({ cls: "importer-stat-count", text: "0" });
        el3.createDiv({ cls: "importer-stat-name", text: "attachments" });
      });
      el2.createDiv("importer-stat mod-remaining", (el3) => {
        this.remainingCountEl = el3.createDiv({ cls: "importer-stat-count", text: "0" });
        el3.createDiv({ cls: "importer-stat-name", text: "remaining" });
      });
      el2.createDiv("importer-stat mod-skipped", (el3) => {
        this.skippedCountEl = el3.createDiv({ cls: "importer-stat-count", text: "0" });
        el3.createDiv({ cls: "importer-stat-name", text: "skipped" });
      });
      el2.createDiv("importer-stat mod-failed", (el3) => {
        this.failedCountEl = el3.createDiv({ cls: "importer-stat-count", text: "0" });
        el3.createDiv({ cls: "importer-stat-name", text: "failed" });
      });
    });
    this.importLogEl = el.createDiv("importer-log");
    this.importLogEl.hide();
  }
  /**
   * Sets the current user visible in-progress task. The purpose is to tell the user that something is happening,
   * and makes it easy to tell if something got stuck.
   *
   * Try to keep the message short, since longer ones will get truncated based on font and space availability.
   * @param message
   */
  status(message) {
    this.statusEl.setText(message.trim() + "...");
  }
  /**
   * Report that a note has been successfully imported.
   * @param name
   */
  reportNoteSuccess(name) {
    this.notes++;
    this.importedCountEl.setText(this.notes.toString());
  }
  /**
   * Report that an attachment has been successfully imported.
   * @param name
   */
  reportAttachmentSuccess(name) {
    this.attachments++;
    this.attachmentCountEl.setText(this.attachments.toString());
  }
  /**
   * Report that something has been skipped and ignored.
   * If the skipping action is on purpose and expected for the import, then prefer not to report it
   * (for example, some tools export to a Note.json and a Note.html, and we only use one of them).
   * @param name
   * @param reason
   */
  reportSkipped(name, reason) {
    let { importLogEl } = this;
    this.skipped.push(name);
    this.skippedCountEl.setText(this.skipped.length.toString());
    console.log("Import skipped", name, reason);
    this.importLogEl.createDiv("list-item", (el) => {
      el.createSpan({ cls: "importer-error", text: "Skipped: " });
      el.createSpan({ text: `"${truncateText(name, this.maxFileNameLength)}"` + (reason ? ` because ${truncateText(String(reason), this.maxFileNameLength)}` : "") });
    });
    importLogEl.scrollTop = importLogEl.scrollHeight;
    importLogEl.show();
  }
  /**
   * Report that something has failed to import.
   * @param name
   * @param reason
   */
  reportFailed(name, reason) {
    let { importLogEl } = this;
    this.failed.push(name);
    this.failedCountEl.setText(this.failed.length.toString());
    console.log("Import failed", name, reason);
    this.importLogEl.createDiv("list-item", (el) => {
      el.createSpan({ cls: "importer-error", text: "Failed: " });
      el.createSpan({ text: `"${truncateText(name, this.maxFileNameLength)}"` + (reason ? ` because ${truncateText(String(reason), this.maxFileNameLength)}` : "") });
    });
    importLogEl.scrollTop = importLogEl.scrollHeight;
    importLogEl.show();
  }
  /**
   * Report the current progress. This will update the progress bar as well as changing
   * the "imported" and "remaining" numbers on the UI.
   * @param current
   * @param total
   */
  reportProgress(current, total) {
    if (total <= 0)
      return;
    console.log("Current progress:", (100 * current / total).toFixed(1) + "%");
    this.remainingCountEl.setText((total - current).toString());
    this.importedCountEl.setText(current.toString());
    this.progressBarInnerEl.style.width = (100 * current / total).toFixed(1) + "%";
  }
  cancel() {
    this.cancelled = true;
    this.progressBarEl.hide();
    this.statusEl.hide();
  }
  /**
   * Check if the user has cancelled this run.
   */
  isCancelled() {
    return this.cancelled;
  }
};
var ImporterPlugin = class extends import_obsidian19.Plugin {
  async onload() {
    this.importers = {
      "bear": {
        name: "Bear",
        optionText: "Bear (.bear2bk)",
        importer: Bear2bkImporter,
        helpPermalink: "import/bear"
      },
      "evernote": {
        name: "Evernote",
        optionText: "Evernote (.enex)",
        importer: EvernoteEnexImporter,
        helpPermalink: "import/evernote"
      },
      "keep": {
        name: "Google Keep",
        optionText: "Google Keep (.zip/.json)",
        importer: KeepImporter,
        helpPermalink: "import/google-keep"
      },
      "html": {
        name: "HTML files",
        optionText: "HTML (.html)",
        importer: HtmlImporter,
        helpPermalink: "import/html"
      },
      "onenote": {
        name: "Microsoft OneNote",
        optionText: "Microsoft OneNote",
        importer: OneNoteImporter,
        helpPermalink: "import/onenote"
      },
      "notion": {
        name: "Notion",
        optionText: "Notion (.zip)",
        importer: NotionImporter,
        helpPermalink: "import/notion",
        formatDescription: "Export your Notion workspace to HTML format."
      },
      "roam-json": {
        name: "Roam Research",
        optionText: "Roam Research (.json)",
        importer: RoamJSONImporter,
        helpPermalink: "import/roam",
        formatDescription: "Export your Roam Research workspace to JSON format."
      }
    };
    this.addRibbonIcon("lucide-import", "Open Importer", () => {
      new ImporterModal(this.app, this).open();
    });
    this.addCommand({
      id: "open-modal",
      name: "Open importer",
      callback: () => {
        new ImporterModal(this.app, this).open();
      }
    });
    this.registerObsidianProtocolHandler(
      "importer-auth",
      (data) => {
        if (this.authCallback) {
          this.authCallback(data);
          this.authCallback = void 0;
        }
        new import_obsidian19.Notice("Unexpected auth event. Please restart the auth process.");
      }
    );
  }
  onunload() {
  }
  /**
   * Register a function to be called when the `obsidian://importer-auth/` open
   * event is received by Obsidian.
   *
   * Note: The callback will be cleared after being called. It must be
   * reregistered if a subsequent auth event is expected.
   */
  registerAuthCallback(callback) {
    this.authCallback = callback;
  }
};
var ImporterModal = class extends import_obsidian19.Modal {
  constructor(app, plugin) {
    super(app);
    this.current = null;
    this.plugin = plugin;
    this.titleEl.setText("Import data into Obsidian");
    this.modalEl.addClass("mod-importer");
    let keys = Object.keys(plugin.importers);
    if (keys.length > 0) {
      this.selectedId = keys[0];
      this.updateContent();
    }
  }
  updateContent() {
    const { contentEl, selectedId } = this;
    let importers = this.plugin.importers;
    let selectedImporter = importers[selectedId];
    contentEl.empty();
    let descriptionFragment = new DocumentFragment();
    descriptionFragment.createSpan({ text: "The format to be imported." });
    if (selectedImporter.formatDescription) {
      descriptionFragment.createEl("br");
      descriptionFragment.createSpan({ text: selectedImporter.formatDescription });
    }
    descriptionFragment.createEl("br");
    descriptionFragment.createEl("a", {
      text: `Learn more about importing from ${selectedImporter.name}.`,
      href: `https://help.obsidian.md/${selectedImporter.helpPermalink}`
    });
    new import_obsidian19.Setting(contentEl).setName("File format").setDesc(descriptionFragment).addDropdown((dropdown) => {
      for (let id in importers) {
        if (importers.hasOwnProperty(id)) {
          dropdown.addOption(id, importers[id].optionText);
        }
      }
      dropdown.onChange((value) => {
        if (importers.hasOwnProperty(value)) {
          this.selectedId = value;
          this.updateContent();
        }
      });
      dropdown.setValue(this.selectedId);
    });
    if (selectedId && importers.hasOwnProperty(selectedId)) {
      let importer = this.importer = new selectedImporter.importer(this.app, this);
      contentEl.createDiv("modal-button-container", (el) => {
        el.createEl("button", { cls: "mod-cta", text: "Import" }, (el2) => {
          el2.addEventListener("click", async () => {
            if (this.current) {
              this.current.cancel();
            }
            contentEl.empty();
            let progressEl = contentEl.createDiv();
            let ctx = this.current = new ImportContext2(progressEl);
            let buttonsEl = contentEl.createDiv("modal-button-container");
            let cancelButtonEl = buttonsEl.createEl("button", { cls: "mod-danger", text: "Stop" }, (el3) => {
              el3.addEventListener("click", () => {
                ctx.cancel();
                cancelButtonEl.detach();
              });
            });
            try {
              await importer.import(ctx);
            } finally {
              if (this.current === ctx) {
                this.current = null;
              }
              cancelButtonEl.detach();
              buttonsEl.createEl("button", { cls: "mod-cta", text: "Done" }, (el3) => {
                el3.addEventListener("click", () => this.close());
              });
              buttonsEl.createEl("button", { text: "Back" }, (el3) => {
                el3.addEventListener("click", () => this.updateContent());
              });
            }
          });
        });
      });
    }
  }
  onClose() {
    const { contentEl, current } = this;
    contentEl.empty();
    if (current) {
      current.cancel();
    }
  }
};
/*! Bundled license information:

sax/lib/sax.js:
  (*! http://mths.be/fromcodepoint v0.1.0 by @mathias *)
*/
//# sourceMappingURL=data:application/json;base64,
